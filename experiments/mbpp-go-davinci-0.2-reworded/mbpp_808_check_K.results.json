{
  "name": "mbpp_808_check_K",
  "language": "go_test.go",
  "prompt": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    test_list := test_tup[0].([]int)\n    for _, num := range test_list {\n        if num == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "--- FAIL: TestCheck_K (0.00s)\npanic: interface conversion: interface {} is int, not []int [recovered]\n\tpanic: interface conversion: interface {} is int, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.check_K(0xc000086600, 0x5, 0x5, 0x6, 0x5fa1b0)\n\t/tmp/tmp2h5rjcmq_test.go:10 +0x9e\ncommand-line-arguments_test.TestCheck_K(0xc000001380)\n\t/tmp/tmp2h5rjcmq_test.go:26 +0xfe\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case int:\n            if elem.(int) == K {\n                return true\n            }\n        case []interface{}:\n            if check_K(elem.([]interface{}), K) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, test_val := range test_tup {\n        if test_val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        switch v.(type) {\n        case int:\n            if v.(int) == K {\n                return true\n            }\n        case []int:\n            if check_K(v.([]interface{}), K) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    if len(test_tup) == 0 {\n        return false\n    }\n    var test_list []int\n    for _, v := range test_tup {\n        test_list = append(test_list, v.(int))\n    }\n    for _, v := range test_list {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, x := range test_tup {\n        if x == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, ele := range test_tup {\n        if ele == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    test_list := test_tup[0].([]int)\n    for _, v := range test_list {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        switch v.(type) {\n        case int:\n            if v.(int) == K {\n                return true\n            }\n        case []interface{}:\n            if check_K(v.([]interface{}), K) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    // check if the given list is empty or not.\n    if len(test_tup) == 0 {\n        return false\n    }\n    // check if the given list contains the k or not.\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, i := range test_tup {\n        if i == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    test_list := test_tup[0].([]int)\n    for _, val := range test_list {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, elem := range test_tup {\n        if elem == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, i := range test_tup {\n        if i == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, x := range test_tup {\n        if x == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, i := range test_tup {\n        if i == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    // Check if the list is empty or not.\n    if len(test_tup) == 0 {\n        return false\n    }\n    // Check if the list contains the K or not.\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    test_list := test_tup[0].([]int)\n    for _, val := range test_list {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, x := range test_tup {\n        if x == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v.(int) == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, item := range test_tup {\n        if item == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, v := range test_tup {\n        if v == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_K_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given lists contain the k or not.\nfunc check_K(test_tup []interface{}, K int) bool {\n    for _, val := range test_tup {\n        if val == K {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_K(t *testing.T) {\n  candidate := check_K\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, 8}, 6), expected: true },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, 7), expected: false },\n     { actual: candidate([]interface{}{7, 8, 9, 44, 11, 12}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509894,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}