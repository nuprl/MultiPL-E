{
  "name": "mbpp_614_cummulative_sum",
  "language": "go_test.go",
  "prompt": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3s7vruv9_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3s7vruv9_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3s7vruv9_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, num := range list {\n            sum += num.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0snfhj0n_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0snfhj0n_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp0snfhj0n_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0snfhj0n_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp0snfhj0n_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0snfhj0n_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsvecz2w5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyh7itwp_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsvecz2w5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var total int\n    for _, v := range test_list {\n        total += v[0].(int)\n    }\n    return total\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdvl4oux5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdvl4oux5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdvl4oux5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdvl4oux5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdvl4oux5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdvl4oux5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, sub_list := range test_list {\n        for _, value := range sub_list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt6lsokeq_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt6lsokeq_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpt6lsokeq_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt6lsokeq_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpt6lsokeq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt6lsokeq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        for _, value := range element {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2p0jettq_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2p0jettq_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2p0jettq_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2p0jettq_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2p0jettq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2p0jettq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyh7itwp_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        if v[0] == \"add\" {\n            sum += v[1].(int)\n        } else if v[0] == \"subtract\" {\n            sum -= v[1].(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0c5kzq54_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0c5kzq54_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp0c5kzq54_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0c5kzq54_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp0c5kzq54_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp0c5kzq54_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3s7vruv9_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3s7vruv9_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3s7vruv9_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3s7vruv9_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        for _, v2 := range v {\n            sum += v2.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq0_ovraq_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq0_ovraq_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq0_ovraq_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq0_ovraq_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq0_ovraq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq0_ovraq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, element := range test_list {\n        for _, value := range element {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpypgf8um8_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpypgf8um8_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpypgf8um8_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpypgf8um8_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpypgf8um8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpypgf8um8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var result int\n    for _, item := range test_list {\n        result += item[0].(int)\n    }\n    return result\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgtx6ie9z_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgtx6ie9z_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgtx6ie9z_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgtx6ie9z_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgtx6ie9z_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgtx6ie9z_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, list := range test_list {\n        for _, item := range list {\n            sum += item.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppzcrj9ez_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppzcrj9ez_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppzcrj9ez_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppzcrj9ez_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppzcrj9ez_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppzcrj9ez_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvhq2w8ly_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvhq2w8ly_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvhq2w8ly_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyh7itwp_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyh7itwp_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8388giss_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8388giss_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8388giss_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8388giss_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8388giss_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8388giss_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyh7itwp_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvyh7itwp_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvyh7itwp_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, i := range test_list {\n        sum += i[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsvecz2w5_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsvecz2w5_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsvecz2w5_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnsmx510_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmnsmx510_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmnsmx510_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, test := range test_list {\n        sum += test[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehq4d73s_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehq4d73s_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpehq4d73s_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehq4d73s_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpehq4d73s_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehq4d73s_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9pgwdtjm_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9pgwdtjm_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9pgwdtjm_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9pgwdtjm_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9pgwdtjm_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9pgwdtjm_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9pgwdtjm_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpur67_tnb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpur67_tnb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpur67_tnb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg40wwtst_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg40wwtst_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg40wwtst_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkhzgacci_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkhzgacci_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkhzgacci_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakocdl4e_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpakocdl4e_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpakocdl4e_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg40wwtst_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg40wwtst_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg40wwtst_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg40wwtst_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, element := range test_list {\n        sum += element[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdk1ipb_b_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk1ipb_b_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk1ipb_b_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk1ipb_b_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk1ipb_b_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk1ipb_b_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvhq2w8ly_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvhq2w8ly_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvhq2w8ly_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvhq2w8ly_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var cummulative_sum int\n\n    for _, list := range test_list {\n        for _, value := range list {\n            cummulative_sum += value.(int)\n        }\n    }\n\n    return cummulative_sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7gs2bktu_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7gs2bktu_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7gs2bktu_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7gs2bktu_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7gs2bktu_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7gs2bktu_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        if v[0] == \"add\" {\n            sum += v[1].(int)\n        } else if v[0] == \"subtract\" {\n            sum -= v[1].(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5xl8go6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq5xl8go6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq5xl8go6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq5xl8go6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq5xl8go6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq5xl8go6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, item := range test_list {\n        sum += item[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzpgewyh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjzpgewyh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjzpgewyh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphe95wqrx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphe95wqrx_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphe95wqrx_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int = 0\n    for _, val := range test_list {\n        sum += val[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe2ksjzkb_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe2ksjzkb_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe2ksjzkb_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe2ksjzkb_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe2ksjzkb_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe2ksjzkb_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    sum := 0\n    for _, value := range test_list {\n        sum += value[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphl6987ha_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphl6987ha_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphl6987ha_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, list := range test_list {\n        for _, value := range list {\n            sum += value.(int)\n        }\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122583,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6qol38tg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6qol38tg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6qol38tg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package cummulative_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the cumulative sum of all the values that are present in the given list list.\nfunc cummulative_sum(test_list [][]interface{}) int {\n    var sum int\n    for _, v := range test_list {\n        sum += v[0].(int)\n    }\n    return sum\n}\n\nfunc TestCummulative_Sum(t *testing.T) {\n  candidate := cummulative_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{1, 3}, []interface{}{5, 6, 7}, []interface{}{2, 6}}), expected: 30 },\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7, 8}, []interface{}{3, 7}}), expected: 37 },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8, 9}, []interface{}{4, 8}}), expected: 44 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509743,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hghaba_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19hghaba_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19hghaba_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}