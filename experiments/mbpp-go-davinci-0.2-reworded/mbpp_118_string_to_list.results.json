{
  "name": "mbpp_118_string_to_list",
  "language": "go_test.go",
  "prompt": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        if string(value) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(value)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmp0r1z_6lq_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc0001a2300)\n\t/tmp/tmp0r1z_6lq_test.go:28 +0x56\ntesting.tRunner(0xc0001a2300, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, val := range myString {\n        myList = append(myList, string(val))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmplrovlmhd_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmplrovlmhd_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmplrovlmhd_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpizm0iq3i_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpizm0iq3i_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa1a0, 0x608a20, 0x0)\n\t/tmp/tmpyyd3u8j0_test.go:15 +0x265\ncommand-line-arguments_test.TestString_To_List(0xc000102600)\n\t/tmp/tmpyyd3u8j0_test.go:28 +0x56\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpizm0iq3i_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpizm0iq3i_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    myList := make([]string, 0)\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpd_46f73p_test.go:15 +0x285\ncommand-line-arguments_test.TestString_To_List(0xc000186300)\n\t/tmp/tmpd_46f73p_test.go:28 +0x56\ntesting.tRunner(0xc000186300, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpizm0iq3i_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpizm0iq3i_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if string(char) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpizm0iq3i_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpizm0iq3i_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        if string(v) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(v)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpohtnmsq8_test.go:15 +0x27b\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpohtnmsq8_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range strings.Split(myString, \" \") {\n        myList = append(myList, word)\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9cnfwwti_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    myList := make([]string, 0)\n    for _, v := range myString {\n        if string(v) == \" \" {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(v)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001680)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa180, 0x608a20, 0x0)\n\t/tmp/tmpys39ecia_test.go:15 +0x285\ncommand-line-arguments_test.TestString_To_List(0xc000001680)\n\t/tmp/tmpys39ecia_test.go:28 +0x56\ntesting.tRunner(0xc000001680, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa1a0, 0x608a20, 0x0)\n\t/tmp/tmpyyd3u8j0_test.go:15 +0x265\ncommand-line-arguments_test.TestString_To_List(0xc000102600)\n\t/tmp/tmpyyd3u8j0_test.go:28 +0x56\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        if v == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(v)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa1a0, 0x608a20, 0x0)\n\t/tmp/tmpe1bsh8mq_test.go:15 +0x265\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpe1bsh8mq_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var result []string\n    for _, word := range myString {\n        result = append(result, string(word))\n    }\n    return result\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpzf9d6zpc_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpzf9d6zpc_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpzf9d6zpc_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, word := range myString {\n        myList = append(myList, string(word))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpeobt_9cf_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    myList := make([]string, 0)\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa1a0, 0x608a20, 0x0)\n\t/tmp/tmpu02ch6ki_test.go:15 +0x27a\ncommand-line-arguments_test.TestString_To_List(0xc000001380)\n\t/tmp/tmpu02ch6ki_test.go:28 +0x56\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, value := range myString {\n        myList = append(myList, string(value))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpodwla01l_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpodwla01l_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpodwla01l_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Fields(myString)\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj670c4yq_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    myList = append(myList, myString)\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, v := range myString {\n        myList = append(myList, string(v))\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[python programming]', got '[p y t h o n   p r o g r a m m i n g]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[lists tuples strings]', got '[l i s t s   t u p l e s   s t r i n g s]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmpaosb4qr5_test.go:32: expected '[write a program]', got '[w r i t e   a   p r o g r a m]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return strings.Split(myString, \" \")\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9zwm4nb_test.go:10:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    var myList []string\n    for _, char := range myString {\n        if char == ' ' {\n            myList = append(myList, \"\")\n        } else {\n            myList[len(myList)-1] += string(char)\n        }\n    }\n    return myList\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124223,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.string_to_list(0x548024, 0x12, 0x5fa1a0, 0x608a20, 0x0)\n\t/tmp/tmpyyd3u8j0_test.go:15 +0x265\ncommand-line-arguments_test.TestString_To_List(0xc000102600)\n\t/tmp/tmpyyd3u8j0_test.go:28 +0x56\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a string to a list of strings split on the space character.\nfunc string_to_list(myString string) []string {\n    return nil\n}\n\nfunc TestString_To_List(t *testing.T) {\n  candidate := string_to_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python programming\"), expected: []string{\"python\", \"programming\"} },\n     { actual: candidate(\"lists tuples strings\"), expected: []string{\"lists\", \"tuples\", \"strings\"} },\n     { actual: candidate(\"write a program\"), expected: []string{\"write\", \"a\", \"program\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509893,
      "stdout": "--- FAIL: TestString_To_List (0.00s)\n    --- FAIL: TestString_To_List/test_num__0 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[python programming]', got '[]'\n    --- FAIL: TestString_To_List/test_num__1 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[lists tuples strings]', got '[]'\n    --- FAIL: TestString_To_List/test_num__2 (0.00s)\n        tmp8gn6rfnb_test.go:28: expected '[write a program]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}