{
  "name": "mbpp_775_odd_position",
  "language": "go_test.go",
  "prompt": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "reworded",
  "tests": "func TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 0 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 0 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 0 {\n            if v % 2 == 0 {\n                return false\n            }\n        } else {\n            if v % 2 != 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmp852ahymo_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmp852ahymo_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmp852ahymo_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 {\n            if n % 2 == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 {\n            if n % 2 == 0 {\n                return false\n            }\n        } else {\n            if n % 2 != 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmp73ndhed5_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmp73ndhed5_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmp73ndhed5_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, val := range nums {\n        if i % 2 == 1 && val % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 1 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, v := range nums {\n        if i % 2 == 0 && v % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpze4kp87e_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 0 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpg1zet7n9_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, n := range nums {\n        if i % 2 == 1 && n % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 {\n            if num % 2 == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 1 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 0; i < len(nums); i++ {\n        if i % 2 == 0 {\n            if nums[i] % 2 == 0 {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmpesjygttz_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmpesjygttz_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmpesjygttz_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i := 1; i < len(nums); i += 2 {\n        if nums[i] % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether every odd index contains odd numbers of a given list.\nfunc odd_position(nums []int) bool {\n    for i, num := range nums {\n        if i % 2 == 0 && num % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestOdd_Position(t *testing.T) {\n  candidate := odd_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 4, 3, 6, 7, 6, 3}), expected: true },\n     { actual: candidate([]int{4, 1, 2}), expected: true },\n     { actual: candidate([]int{1, 2, 3}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123404,
      "stdout": "--- FAIL: TestOdd_Position (0.00s)\n    --- FAIL: TestOdd_Position/test_num__0 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__1 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestOdd_Position/test_num__2 (0.00s)\n        tmplqpblcgy_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}