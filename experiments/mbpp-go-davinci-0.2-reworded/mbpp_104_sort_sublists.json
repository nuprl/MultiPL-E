{
  "name": "mbpp_104_sort_sublists",
  "language": "go_test.go",
  "prompt": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(input_list []interface{}) [][]string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([]interface{}{[]string{\" red \", \"green\"}, []string{\"blue \", \" black\"}, []string{\" orange\", \"brown\"}}), expected: [][]int{[]string{\" red \", \"green\"}, []string{\" black\", \"blue \"}, []string{\" orange\", \"brown\"}} },\n     { actual: candidate([]interface{}{[]string{\"zilver\", \"gold\"}, []string{\"magnesium\", \"aluminium\"}, []string{\"steel\", \"bronze\"}}), expected: [][]int{[]string{\"gold\", \"zilver\"}, []string{\"aluminium\", \"magnesium\"}, []string{\"bronze\", \"steel\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    output_list := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        switch sublist.(type) {\n        case []string:\n            output_list[i] = sublist.([]string)\n        default:\n            fmt.Printf(\"Error: input_list[%d] is not a slice of strings\\n\", i)\n        }\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        output_list = append(output_list, sort_sublist(sublist))\n    }\n    return output_list\n}\n",
    "    output_list := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        output_list[i] = make([]string, len(sublist.([]string)))\n        copy(output_list[i], sublist.([]string))\n        for j := len(output_list[i]) - 1; j > 0; j-- {\n            for k := 0; k < j; k++ {\n                if output_list[i][k] > output_list[i][k+1] {\n                    output_list[i][k], output_list[i][k+1] = output_list[i][k+1], output_list[i][k]\n                }\n            }\n        }\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    output_list := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        output_list[i] = sublist.([]string)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        output_list = append(output_list, sort_sublist(sublist.([]string)))\n    }\n    return output_list\n}\n",
    "    var result [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        result = append(result, sublist_strings)\n    }\n    return result\n}\n",
    "    result := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        result[i] = sublist.([]string)\n    }\n    return result\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    var result [][]string\n    for _, sublist := range input_list {\n        var sublist_string []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_string = append(sublist_string, item.(string))\n        }\n        result = append(result, sublist_string)\n    }\n    return result\n}\n",
    "    output_list := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        output_list[i] = sublist.([]string)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_string []string\n        for _, element := range sublist.([]interface{}) {\n            sublist_string = append(sublist_string, element.(string))\n        }\n        output_list = append(output_list, sublist_string)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_string []string\n        for _, element := range sublist.([]interface{}) {\n            sublist_string = append(sublist_string, element.(string))\n        }\n        output_list = append(output_list, sublist_string)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    output_list := make([][]string, len(input_list))\n    for i, sublist := range input_list {\n        output_list[i] = sublist.([]string)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var sublist_strings []string\n        for _, item := range sublist.([]interface{}) {\n            sublist_strings = append(sublist_strings, item.(string))\n        }\n        output_list = append(output_list, sublist_strings)\n    }\n    return output_list\n}\n",
    "    var output_list [][]string\n    for _, sublist := range input_list {\n        var output_sublist []string\n        for _, element := range sublist.([]interface{}) {\n            output_sublist = append(output_sublist, element.(string))\n        }\n        output_list = append(output_list, output_sublist)\n    }\n    return output_list\n}\n"
  ]
}