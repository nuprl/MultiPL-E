{
  "name": "mbpp_458_rectangle_area",
  "language": "go_test.go",
  "prompt": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package rectangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the area of a rectangle.\nfunc rectangle_area(l int, b int) int {\n    return l * b\n}\n\nfunc TestRectangle_Area(t *testing.T) {\n  candidate := rectangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 20), expected: 200 },\n     { actual: candidate(10, 5), expected: 50 },\n     { actual: candidate(4, 2), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}