{
  "name": "mbpp_3_is_not_prime",
  "language": "go_test.go",
  "prompt": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    if n == 2 {\n        return false\n    }\n    if n % 2 == 0 {\n        return true\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    // A number is not prime if it has a divisor other than 1 and itself.\n    // So we need to check if n is divisible by any number less than n.\n    // If n is divisible by any number between 2 and n-1, then it is not prime.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n%i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    if n == 2 {\n        return false\n    }\n    if n % 2 == 0 {\n        return true\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    if n <= 3 {\n        return false\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return true\n    }\n    for i := 5; i * i <= n; i = i + 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    // A prime number is only divisible by 1 and itself.\n    // So, we can check if n is divisible by any number between 2 and n.\n    // If n is divisible by any number, it is not prime.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 2 {\n        return false\n    }\n    if n % 2 == 0 {\n        return true\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    // A number is not prime if it has a divisor other than 1 and itself.\n    // So, try all numbers from 2 to n-1 as possible divisors.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123982,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n < 2 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n == 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_not_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to identify non-prime numbers.\nfunc is_not_prime(n int) bool {\n    if n <= 1 {\n        return true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Not_Prime(t *testing.T) {\n  candidate := is_not_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: false },\n     { actual: candidate(10), expected: true },\n     { actual: candidate(35), expected: true },\n     { actual: candidate(37), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509725,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}