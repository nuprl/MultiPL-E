{
  "name": "mbpp_781_count_divisors",
  "language": "go_test.go",
  "prompt": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    if count % 2 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_divisors_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the count of divisors is even. https://www.w3resource.com/gothon-exercises/basic/gothon-basic-1-exercise-24.php\nfunc count_divisors(n int) bool {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count % 2 == 0\n}\n\nfunc TestCount_Divisors(t *testing.T) {\n  candidate := count_divisors\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(100), expected: false },\n     { actual: candidate(125), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510021,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}