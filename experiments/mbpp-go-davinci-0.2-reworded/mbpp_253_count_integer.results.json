{
  "name": "mbpp_253_count_integer",
  "language": "go_test.go",
  "prompt": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []interface{}:\n        return len(list1.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp0iw5xchq_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp0iw5xchq_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []int:\n        count := 0\n        for _, v := range list1.([]int) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmprkkhpiup_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmprkkhpiup_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    // list1 is a slice of int\n    // list1 is a slice of float64\n    // list1 is a slice of string\n    // list1 is a slice of interface{}\n    // list1 is a slice of []int\n    // list1 is a slice of []float64\n    // list1 is a slice of []string\n    // list1 is a slice of []interface{}\n    // list1 is a map[string]int\n    // list1 is a map[string]float64\n    // list1 is a map[string]string\n    // list1 is a map[string]interface{}\n    // list1 is a map[int]int\n    // list1 is a map[int]float64\n    // list1 is a map[int]string\n    // list1 is a map[int]interface{}\n    // list1 is a map[interface{}]int\n    // list1 is a map[interface{}]float64\n    // list1 is a map[interface{}]string\n    // list1 is a map[interface{}]interface{}\n    // list1 is a map[string]map[string]int\n    // list1 is a map[string]map[string]float64\n    // list1 is a map[string]map[string]string\n    // list1 is a map[string]map[string]interface{}\n    // list1 is a map[string]map[int]int\n    // list1 is a map[string]map[int]float64\n    // list1 is a map[string]map[int]string\n    // list1 is a map[string]map[int]interface{}\n    // list1 is a map[string]map[interface{}]int\n    // list1 is a map[string]map[interface{}]float64\n    // list1 is a map[string]map[interface{}]string\n    // list1 is a map[string]map[interface{}]interface{}\n    // list1 is a map[int]map[string]int\n    // list1 is a map[int]map[string]float64\n    // list1 is a map[int]map[string]string\n    //\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj3w6q_bt_test.go:46:6: expected '(', found TestCount_Integer\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpbk4ihwvh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            return len(list1.([]int))\n        case []string:\n            return len(list1.([]string))\n        case []float64:\n            return len(list1.([]float64))\n        case []bool:\n            return len(list1.([]bool))\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp__nmr7r__test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp__nmr7r__test.go:39: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd1nnjy3d_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpd1nnjy3d_test.go:20:26: invalid type assertion: v.(string) (non-interface type string on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2aoeff9b_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count += 1\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count += 1\n            }\n        }\n        return count\n    }\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnev8fnli_test.go:15:30: invalid type assertion: value.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                if v == int(v) {\n                    count++\n                }\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                if v == float64(int(v)) {\n                    count++\n                }\n            }\n        case []interface{}:\n            for _, v := range list1.([]interface{}) {\n                switch v.(type) {\n                    case int:\n                        count++\n                    case float64:\n                        if v.(float64) == float64(int(v.(float64))) {\n                            count++\n                        }\n                }\n            }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpw2lddmpr_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw2lddmpr_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []interface{}:\n        list := list1.([]interface{})\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp5h2avzse_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp5h2avzse_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []interface{}:\n        return len(list1.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp0iw5xchq_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp0iw5xchq_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_9nv8948_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, item := range list {\n            if _, ok := item.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp70x1two__test.go:15:29: invalid type assertion: item.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt9bt1wmr_test.go:26:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case []int:\n                count += count_integer(v)\n            case []interface{}:\n                count += count_integer(v)\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpgt4imuhm_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafbrjspx_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpafbrjspx_test.go:20:26: invalid type assertion: v.(int) (non-interface type string on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            if value == int(value) {\n                count++\n            }\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, value := range list1.([]interface{}) {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, num := range list {\n            if num == int(num) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpfxajuo3f_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpfxajuo3f_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpsfntawsg_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpsfntawsg_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf9f3anvb_test.go:24:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2aoeff9b_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, i := range list {\n            if i == int(i) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, i := range list {\n            if i == float64(int(i)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpntuhtpyy_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        for _, v := range list {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmphx0uu4ma_test.go:38: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmphx0uu4ma_test.go:38: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, item := range list {\n            if item == item {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, item := range list {\n            if item == item {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpktosk66i_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpktosk66i_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwp6vumft_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2aoeff9b_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwp6vumft_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return len(list)\n        case []string:\n            list := list1.([]string)\n            return len(list)\n        case []interface{}:\n            list := list1.([]interface{})\n            return len(list)\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_agv70c9_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_agv70c9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            return len(list1.([]int))\n        case []string:\n            return len(list1.([]string))\n        case []interface{}:\n            return len(list1.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp66th9t0a_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp66th9t0a_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count++\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpa2dhpubs_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpa2dhpubs_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, item := range list {\n            count += count_integer(item)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpvly8mjqc_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpvly8mjqc_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    list := list1.([]interface{})\n    count := 0\n    for _, v := range list {\n        switch v.(type) {\n        case int:\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_integer(0x51a3a0, 0xc00008c6a0, 0x2)\n\t/tmp/tmpu1jv5s2c_test.go:10 +0xb8\ncommand-line-arguments_test.TestCount_Integer(0xc000102600)\n\t/tmp/tmpu1jv5s2c_test.go:29 +0x199\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwhskr93n_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpwhskr93n_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            count := 0\n            for _, item := range list {\n                count += count_integer(item)\n            }\n            return count\n        case int:\n            return 1\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpzy2318ir_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpzy2318ir_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == v {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == v {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuvrvt7ia_test.go:43: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpuvrvt7ia_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplbryg43b_test.go:11:12: undefined: reflect\n/tmp/tmplbryg43b_test.go:12:10: undefined: reflect\n/tmp/tmplbryg43b_test.go:13:14: undefined: reflect\n/tmp/tmplbryg43b_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return len(list)\n        case []string:\n            list := list1.([]string)\n            return len(list)\n        case []float64:\n            list := list1.([]float64)\n            return len(list)\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmphyvmv4mn_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmphyvmv4mn_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, i := range list {\n            if i == i {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, i := range list {\n            if i == i {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, i := range list {\n            if i == i {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpntubhhjg_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpntubhhjg_test.go:58: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpzp2aomef_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []interface{}:\n        list := list1.([]interface{})\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp5h2avzse_test.go:40: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp5h2avzse_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, item := range list {\n            if item == int(item) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmppi1bf1hj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppi1bf1hj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpaf4f05hk_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpaf4f05hk_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpucg2cbik_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf9f3anvb_test.go:24:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, item := range list {\n            count += count_integer(item)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpvly8mjqc_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpvly8mjqc_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, item := range list {\n            if item == int(item) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmppi1bf1hj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppi1bf1hj_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwp6vumft_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmppc1tic70_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppc1tic70_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    case []interface{}:\n        return len(list1.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp7ywa38x6_test.go:39: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp7ywa38x6_test.go:39: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        return len(list1.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpyrcbsxc1_test.go:35: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpyrcbsxc1_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, val := range list1.([]interface{}) {\n            count += count_integer(val)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpotd5w3i4_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpotd5w3i4_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Invalid input.\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "Invalid input.\n--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpqidj8edj_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            if value == int(value) {\n                count++\n            }\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, value := range list1.([]interface{}) {\n            if value == int(value) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcu649anh_test.go:26:28: cannot convert value (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        var count int = 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp75rsm5aw_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp75rsm5aw_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                if _, ok := v.(int); ok {\n                    count++\n                }\n            }\n        case []interface{}:\n            for _, v := range list1.([]interface{}) {\n                if _, ok := v.(int); ok {\n                    count++\n                }\n            }\n        case []string:\n            for _, v := range list1.([]string) {\n                if _, ok := v.(int); ok {\n                    count++\n                }\n            }\n        default:\n            fmt.Println(\"Invalid input\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8vde2yvv_test.go:14:30: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmp8vde2yvv_test.go:26:30: invalid type assertion: v.(int) (non-interface type string on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfd16i9b9_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        list := list1.([]string)\n        for _, v := range list {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        list := list1.([]float64)\n        for _, v := range list {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        list := list1.([]bool)\n        for _, v := range list {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgfseo962_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpgfseo962_test.go:22:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpgfseo962_test.go:29:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n/tmp/tmpgfseo962_test.go:36:26: invalid type assertion: v.(bool) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            count += count_integer(s.Index(i).Interface())\n        }\n        return count\n    case reflect.Int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123079,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5u7mrkyf_test.go:10:12: undefined: reflect\n/tmp/tmp5u7mrkyf_test.go:11:10: undefined: reflect\n/tmp/tmp5u7mrkyf_test.go:12:14: undefined: reflect\n/tmp/tmp5u7mrkyf_test.go:18:10: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == v {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if v == v {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == v {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if v == v {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == v {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpqcfm_dlo_test.go:63: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpqcfm_dlo_test.go:63: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, val := range list {\n            if _, ok := val.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, val := range list {\n            if _, ok := val.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7gsk_c2v_test.go:15:28: invalid type assertion: val.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp8x5zzxe1_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp8x5zzxe1_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplj161m10_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpftz0jxc9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcytxwye4_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, i := range list1.([]int) {\n            if i == int(i) {\n                count++\n            }\n        }\n    case []float64:\n        for _, i := range list1.([]float64) {\n            if i == float64(int(i)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, i := range list1.([]interface{}) {\n            switch i.(type) {\n            case int:\n                count++\n            case float64:\n                if i.(float64) == float64(int(i.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp6qnqbvxy_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case int:\n        count = 1\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpqc_tpv1b_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpqc_tpv1b_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyufym5j_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpw4sh7sok_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwp6vumft_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123077,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpywsfmb10_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpefqxloav_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpefqxloav_test.go:20:26: invalid type assertion: v.(int) (non-interface type string on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == v {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == v {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if v == v {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpbf1993zm_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpbf1993zm_test.go:49: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    // list1 is a slice of interface{}\n    // list1 is a slice of any type\n    // list1 is a slice of anything\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type!\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwlrea9qn_test.go:17:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpwlrea9qn_test.go:23:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpwlrea9qn_test.go:29:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    }\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123080,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmplhikshci_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplhikshci_test.go:39: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppwjjx4f9_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmplteuql___test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510185,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpuiwtkvwq_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}