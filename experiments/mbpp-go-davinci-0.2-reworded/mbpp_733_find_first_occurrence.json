{
  "name": "mbpp_733_find_first_occurrence",
  "language": "go_test.go",
  "prompt": "package find_first_occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the index of the first occurrence of a given number in a sorted list.\nfunc find_first_occurrence(A []int, x int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_First_Occurrence(t *testing.T) {\n  candidate := find_first_occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 1 },\n     { actual: candidate([]int{2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), expected: 2 },\n     { actual: candidate([]int{2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    mid := len(A) / 2\n    if A[mid] == x {\n        if mid == 0 {\n            return 0\n        }\n        if A[mid - 1] == x {\n            return find_first_occurrence(A[:mid], x)\n        }\n        return mid\n    }\n    if A[mid] > x {\n        return find_first_occurrence(A[:mid], x)\n    }\n    return find_first_occurrence(A[mid + 1:], x)\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    start := 0\n    end := len(A) - 1\n\n    for start <= end {\n        mid := (start + end) / 2\n\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                end = mid - 1\n            }\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := l + (r - l) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n\n    if A[l] == x {\n        return l\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if low < len(A) && A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start + 1 < end {\n        mid := start + (end - start) / 2\n        if A[mid] < x {\n            start = mid\n        } else if A[mid] > x {\n            end = mid\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    if A[end] == x {\n        return end\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    // binary search\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    n := len(A)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] > x || A[n-1] < x {\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[n-1] == x {\n        return n-1\n    }\n    l, r := 0, n-1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] == x {\n            r = m\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return l\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A) - 1] == x {\n        return len(A) - 1\n    }\n    start := 0\n    end := len(A) - 1\n    for start < end {\n        mid := (start + end) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            end = mid - 1\n        } else if A[mid] < x {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] < x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n\n    if A[low] == x {\n        return low\n    } else {\n        return -1\n    }\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := l + (r - l) / 2\n        if A[m] == x {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            l = m + 1\n        }\n    }\n    return -1\n}\n",
    "    n := len(A)\n    if n == 0 {\n        return -1\n    }\n    if n == 1 {\n        if A[0] == x {\n            return 0\n        }\n        return -1\n    }\n    if A[0] > x || A[n-1] < x {\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[n-1] == x {\n        return n-1\n    }\n    left, right := 0, n-1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid-1] < x {\n                return mid\n            }\n            right = mid - 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    lo, hi := 0, len(A) - 1\n    for lo <= hi {\n        mid := lo + (hi - lo) / 2\n        if A[mid] < x {\n            lo = mid + 1\n        } else if A[mid] > x {\n            hi = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            }\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    lo := 0\n    hi := len(A) - 1\n    for lo <= hi {\n        mid := lo + (hi - lo) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        } else if A[mid] > x {\n            hi = mid - 1\n        } else {\n            lo = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A) - 1] == x {\n        return len(A) - 1\n    }\n    return find_first_occurrence_recursive(A, x, 0, len(A) - 1)\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            right = mid\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    // find the first occurrence of x\n    // binary search\n    // if A[mid] == x, then we need to check if A[mid-1] == x\n    // if A[mid-1] == x, then we need to check if A[mid-2] == x\n    // ...\n    // if A[0] == x, then we return 0\n    // if A[0] != x, then we return mid\n    // if A[mid] > x, then we need to check A[mid-1]\n    // if A[mid] < x, then we need to check A[mid+1]\n    // if A[mid] != x, then we return -1\n    if len(A) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 {\n                return 0\n            }\n            if A[mid-1] == x {\n                high = mid - 1\n            } else {\n                return mid\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // Find the leftmost occurrence of x\n    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start := 0\n    end := len(A) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            end = mid - 1\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if A[0] > x || A[len(A)-1] < x {\n        return -1\n    }\n    if A[0] == x {\n        return 0\n    }\n    if A[len(A)-1] == x {\n        return len(A)-1\n    }\n    return find_first_occurrence_helper(A, x, 0, len(A)-1)\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start + 1 < end {\n        mid := start + (end - start) / 2\n        if A[mid] == x {\n            end = mid\n        } else if A[mid] < x {\n            start = mid\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    if A[end] == x {\n        return end\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid-1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    } else {\n        return -1\n    }\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    lo, hi := 0, len(A) - 1\n    for lo <= hi {\n        mid := lo + (hi - lo) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        } else if A[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    // binary search\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // binary search\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    lo, hi := 0, len(A) - 1\n    for lo < hi {\n        mid := (lo + hi) / 2\n        if A[mid] < x {\n            lo = mid + 1\n        } else {\n            hi = mid\n        }\n    }\n    if A[lo] == x {\n        return lo\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            }\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    if len(A) == 1 {\n        if A[0] == x {\n            return 0\n        } else {\n            return -1\n        }\n    }\n    if len(A) == 2 {\n        if A[0] == x {\n            return 0\n        }\n        if A[1] == x {\n            return 1\n        }\n        return -1\n    }\n    mid := len(A) / 2\n    if A[mid] == x {\n        if A[mid-1] == x {\n            return find_first_occurrence(A[:mid], x)\n        } else {\n            return mid\n        }\n    }\n    if A[mid] > x {\n        return find_first_occurrence(A[:mid], x)\n    } else {\n        return find_first_occurrence(A[mid:], x)\n    }\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n\n    if A[left] == x {\n        return left\n    } else {\n        return -1\n    }\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := left + (right - left) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    start, end := 0, len(A) - 1\n    for start + 1 < end {\n        mid := start + (end - start) / 2\n        if A[mid] == x {\n            end = mid\n        } else if A[mid] < x {\n            start = mid\n        } else {\n            end = mid\n        }\n    }\n    if A[start] == x {\n        return start\n    }\n    if A[end] == x {\n        return end\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := low + (high - low) / 2\n        if x == A[mid] {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low := 0\n    high := len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    lo, hi := 0, len(A) - 1\n    for lo <= hi {\n        mid := (lo + hi) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                hi = mid - 1\n            }\n        } else if A[mid] > x {\n            hi = mid - 1\n        } else {\n            lo = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    l := 0\n    r := len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else if A[m] > x {\n            r = m - 1\n        } else {\n            if m == 0 || A[m - 1] != x {\n                return m\n            } else {\n                r = m - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    l, r := 0, len(A) - 1\n    for l < r {\n        m := (l + r) / 2\n        if A[m] < x {\n            l = m + 1\n        } else {\n            r = m\n        }\n    }\n    if A[l] == x {\n        return l\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] < x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    // Binary search.\n    l, r := 0, len(A) - 1\n    for l <= r {\n        m := (l + r) / 2\n        if A[m] == x {\n            // Search left.\n            for m > 0 && A[m - 1] == x {\n                m--\n            }\n            return m\n        } else if A[m] < x {\n            l = m + 1\n        } else {\n            r = m - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if x < A[mid] {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return result\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := (low + high) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    if len(A) == 0 {\n        return -1\n    }\n\n    low, high := 0, len(A) - 1\n    for low < high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n\n    if A[low] == x {\n        return low\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid-1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n",
    "    left, right := 0, len(A) - 1\n    for left <= right {\n        mid := left + (right - left) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                right = mid - 1\n            }\n        } else if A[mid] > x {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] < x {\n            low = mid + 1\n        } else if A[mid] > x {\n            high = mid - 1\n        } else {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        }\n    }\n    return -1\n}\n",
    "    start, end := 0, len(A) - 1\n    for start <= end {\n        mid := (start + end) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                end = mid - 1\n            }\n        } else if A[mid] > x {\n            end = mid - 1\n        } else {\n            start = mid + 1\n        }\n    }\n    return -1\n}\n",
    "    low := 0\n    high := len(A) - 1\n    result := -1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            result = mid\n            high = mid - 1\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return result\n}\n",
    "    left, right := 0, len(A) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if A[mid] < x {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    if A[left] == x {\n        return left\n    }\n    return -1\n}\n",
    "    low, high := 0, len(A) - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if A[mid] == x {\n            if mid == 0 || A[mid - 1] != x {\n                return mid\n            } else {\n                high = mid - 1\n            }\n        } else if A[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return -1\n}\n"
  ]
}