{
  "name": "mbpp_632_move_zero",
  "language": "go_test.go",
  "prompt": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i-zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count += 1\n        }\n    }\n    var result []int\n    for _, num := range num_list {\n        if num != 0 {\n            result = append(result, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // TODO\n    return num_list\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n"
  ]
}