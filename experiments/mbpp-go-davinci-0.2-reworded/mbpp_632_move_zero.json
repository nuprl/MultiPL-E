{
  "name": "mbpp_632_move_zero",
  "language": "go_test.go",
  "prompt": "package move_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to move all zeroes to the end of the given list.\nfunc move_zero(num_list []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMove_Zero(t *testing.T) {\n  candidate := move_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 0, 2, 0, 3, 4}), expected: []int{1, 2, 3, 4, 0, 0} },\n     { actual: candidate([]int{2, 3, 2, 0, 0, 4, 0, 5, 0}), expected: []int{2, 3, 2, 4, 5, 0, 0, 0, 0} },\n     { actual: candidate([]int{0, 1, 0, 1, 1}), expected: []int{1, 1, 1, 0, 0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i-zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count += 1\n        }\n    }\n    var result []int\n    for _, num := range num_list {\n        if num != 0 {\n            result = append(result, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // TODO\n    return num_list\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            for j := i + 1; j < len(num_list); j++ {\n                if num_list[j] != 0 {\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n                }\n            }\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_list = append(zero_list, num_list[i])\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            i--\n        }\n    }\n    return append(num_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var non_zero_list []int\n    var zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_index int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_index = i\n            break\n        }\n    }\n    for i, num := range num_list {\n        if num != 0 {\n            num_list[zero_index] = num\n            num_list[i] = 0\n            zero_index++\n        }\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            for j := i; j < len(num_list); j++ {\n                if num_list[j] != 0 {\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n                }\n            }\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_index int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index] = num_list[i]\n            zero_index++\n        }\n    }\n    for i := zero_index; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < len(num_list) - len(new_list); i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // create a new list to hold the results\n    result := make([]int, len(num_list))\n    // create a counter to keep track of the number of zeroes\n    zero_count := 0\n    // loop through the list and move all non-zeroes to the result list\n    for _, num := range num_list {\n        if num != 0 {\n            result[zero_count] = num\n            zero_count++\n        }\n    }\n    // return the result list\n    return result\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        }\n    }\n    for _, num := range num_list {\n        if num != 0 {\n            zero_list = append(zero_list, num)\n        }\n    }\n    return zero_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_index int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_index = i\n            break\n        }\n    }\n    for i := zero_index + 1; i < len(num_list); i++ {\n        if num_list[i] != 0 {\n            num_list[zero_index] = num_list[i]\n            num_list[i] = 0\n            zero_index++\n        }\n    }\n    return num_list\n}\n",
    "    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            new_list = append(new_list, 0)\n        }\n    }\n    return new_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // TODO: implement\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var nonzero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            nonzero_list = append(nonzero_list, num)\n        }\n    }\n    return append(nonzero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var result []int\n    for _, num := range num_list {\n        if num != 0 {\n            result = append(result, num)\n        }\n    }\n    for i := 0; i < len(num_list) - len(result); i++ {\n        result = append(result, 0)\n    }\n    return result\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_count++\n        }\n    }\n    for i := 0; i < zero_count; i++ {\n        num_list = append(num_list[:i], num_list[i+1:]...)\n        num_list = append(num_list, 0)\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_num int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_num++\n        } else if zero_num > 0 {\n            num_list[i-zero_num] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    zero_list := []int{}\n    non_zero_list := []int{}\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_list = append(zero_list, num_list[i])\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            i--\n        }\n    }\n    num_list = append(num_list, zero_list...)\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // TODO: implement this function\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count += 1\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            num_list = append(num_list[:i], num_list[i+1:]...)\n            num_list = append(num_list, 0)\n        }\n    }\n    return num_list\n}\n",
    "    // Your code here\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    zero_count := 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    // TODO: implement\n    return num_list\n}\n",
    "    // TODO: Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i, num := range num_list {\n        if num == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num\n        }\n    }\n    for i := len(num_list)-zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // Write your code here\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var result []int\n    var zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            result = append(result, num)\n        }\n    }\n    result = append(result, zero_list...)\n    return result\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    // Your code here\n    return num_list\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    // TODO: implement this function\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var new_list []int\n    for _, num := range num_list {\n        if num != 0 {\n            new_list = append(new_list, num)\n        }\n    }\n    for i := 0; i < len(num_list) - len(new_list); i++ {\n        new_list = append(new_list, 0)\n    }\n    return new_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i - zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n",
    "    var zero_count int\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else if zero_count > 0 {\n            num_list[i - zero_count] = num_list[i]\n            num_list[i] = 0\n        }\n    }\n    return num_list\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_list []int\n    var non_zero_list []int\n    for _, num := range num_list {\n        if num == 0 {\n            zero_list = append(zero_list, num)\n        } else {\n            non_zero_list = append(non_zero_list, num)\n        }\n    }\n    return append(non_zero_list, zero_list...)\n}\n",
    "    var zero_count int = 0\n    for i := 0; i < len(num_list); i++ {\n        if num_list[i] == 0 {\n            zero_count++\n        } else {\n            num_list[i-zero_count] = num_list[i]\n        }\n    }\n    for i := len(num_list) - zero_count; i < len(num_list); i++ {\n        num_list[i] = 0\n    }\n    return num_list\n}\n"
  ]
}