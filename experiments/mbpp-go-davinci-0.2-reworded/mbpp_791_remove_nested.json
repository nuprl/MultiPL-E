{
  "name": "mbpp_791_remove_nested",
  "language": "go_test.go",
  "prompt": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove lists from the given list.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(elem.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, elem)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        if elem_type, ok := elem.([]interface{}); ok {\n            result = append(result, remove_nested(elem_type)...)\n        } else {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n            case []interface{}:\n                result = append(result, remove_nested(elem.([]interface{}))...)\n            default:\n                result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        if item_list, ok := item.([]interface{}); ok {\n            result = append(result, remove_nested(item_list)...)\n        } else {\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    // Create a new list to store the result.\n    result := make([]interface{}, 0)\n\n    // Iterate over the list.\n    for _, item := range test_tup {\n        // Check if the item is a list.\n        if item_list, ok := item.([]interface{}); ok {\n            // If it is, append the result of the recursive call to the result.\n            result = append(result, remove_nested(item_list)...)\n        } else {\n            // Otherwise, append the item to the result.\n            result = append(result, item)\n        }\n    }\n\n    // Return the result.\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    // The list to be returned.\n    ret_list := []interface{}{}\n\n    // Iterate over the given list.\n    for _, elem := range test_tup {\n        // If the element is a list, then recursively call the function.\n        if elem_list, ok := elem.([]interface{}); ok {\n            ret_list = append(ret_list, remove_nested(elem_list)...)\n        } else {\n            // If the element is not a list, then append it to the return list.\n            ret_list = append(ret_list, elem)\n        }\n    }\n\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(val.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, val)\n        }\n    }\n    return ret_list\n}\n",
    "    var ret []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            ret = append(ret, remove_nested(v.([]interface{}))...)\n        default:\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(val.([]interface{}))...)\n        default:\n            new_list = append(new_list, val)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(item.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, item)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(item.([]interface{}))...)\n        default:\n            new_list = append(new_list, item)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var res []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            res = append(res, remove_nested(v.([]interface{}))...)\n        default:\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(v.([]interface{}))...)\n        default:\n            new_list = append(new_list, v)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var ret []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret = append(ret, remove_nested(val.([]interface{}))...)\n        default:\n            ret = append(ret, val)\n        }\n    }\n    return ret\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(val.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, val)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        if _, ok := elem.([]interface{}); !ok {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, x := range test_tup {\n        switch x.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(x.([]interface{}))...)\n        default:\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, x := range test_tup {\n        switch x.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(x.([]interface{}))...)\n        default:\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return test_tup\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tup {\n        switch element.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(element.([]interface{}))...)\n        default:\n            result = append(result, element)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(item.([]interface{}))...)\n        default:\n            new_list = append(new_list, item)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(v.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, v)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var res []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            res = append(res, remove_nested(item.([]interface{}))...)\n        default:\n            res = append(res, item)\n        }\n    }\n    return res\n}\n",
    "    var result []interface{}\n    for _, x := range test_tup {\n        switch x.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(x.([]interface{}))...)\n        default:\n            result = append(result, x)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(item.([]interface{}))...)\n        default:\n            new_list = append(new_list, item)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(val.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, val)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var ret_list []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            ret_list = append(ret_list, remove_nested(elem.([]interface{}))...)\n        default:\n            ret_list = append(ret_list, elem)\n        }\n    }\n    return ret_list\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var ret []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            ret = append(ret, remove_nested(item.([]interface{}))...)\n        default:\n            ret = append(ret, item)\n        }\n    }\n    return ret\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    return_list := make([]interface{}, 0)\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            return_list = append(return_list, remove_nested(item.([]interface{}))...)\n        default:\n            return_list = append(return_list, item)\n        }\n    }\n    return return_list\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var new_list []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_list = append(new_list, remove_nested(v.([]interface{}))...)\n        default:\n            new_list = append(new_list, v)\n        }\n    }\n    return new_list\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, element := range test_tup {\n        switch element.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(element.([]interface{}))...)\n        default:\n            result = append(result, element)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(elem.([]interface{}))...)\n        default:\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n"
  ]
}