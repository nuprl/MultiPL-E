{
  "name": "mbpp_143_find_lists",
  "language": "go_test.go",
  "prompt": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + sum(map_list(Input.([]interface{}), find_lists))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkobtzzz8_test.go:12:24: undefined: sum\n/tmp/tmpkobtzzz8_test.go:12:28: undefined: map_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp8nyrikhq_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case []int:\n            return 1 + find_lists(Input.([]int)[1:])\n        case []string:\n            return 1 + find_lists(Input.([]string)[1:])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092430, 0x453fe5)\n\t/tmp/tmpbcnuzk3c_test.go:12 +0x21d\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x58a67f)\n\t/tmp/tmpbcnuzk3c_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a67f)\n\t/tmp/tmpbcnuzk3c_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpbcnuzk3c_test.go:29 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case []int:\n        return 1 + find_lists(Input.([]int)[1:])\n    case []string:\n        return 1 + find_lists(Input.([]string)[1:])\n    case int:\n        return 0\n    case string:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092430, 0x453fe5)\n\t/tmp/tmpon2w8j3k_test.go:12 +0x288\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x58a67f)\n\t/tmp/tmpon2w8j3k_test.go:12 +0x1e5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a67f)\n\t/tmp/tmpon2w8j3k_test.go:12 +0x1e5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpon2w8j3k_test.go:33 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp8nyrikhq_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        count = 1\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpdzg9aexl_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpdzg9aexl_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpdzg9aexl_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        default:\n            return -1\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpa01ham_f_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpa01ham_f_test.go:35: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpa01ham_f_test.go:35: expected '%!s(int=1)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var result int\n    switch Input.(type) {\n    case []interface{}:\n        for _, value := range Input.([]interface{}) {\n            result += find_lists(value)\n        }\n        result += 1\n    }\n    return result\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp9vgyfdus_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp9vgyfdus_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp9vgyfdus_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return find_lists(Input.([]interface{})[1:])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092448, 0x452467)\n\t/tmp/tmpt1ranaxm_test.go:12 +0x18f\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x45475a)\n\t/tmp/tmpt1ranaxm_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a67f)\n\t/tmp/tmpt1ranaxm_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpt1ranaxm_test.go:27 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case interface{}:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c460, 0x0)\n\t/tmp/tmppb6_m7ny_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a65f)\n\t/tmp/tmppb6_m7ny_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a65f)\n\t/tmp/tmppb6_m7ny_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmppb6_m7ny_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[1:])\n        case int:\n            return 0\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092460, 0x0)\n\t/tmp/tmpxcqehlir_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x58a65f)\n\t/tmp/tmpxcqehlir_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a65f)\n\t/tmp/tmpxcqehlir_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpxcqehlir_test.go:27 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, element := range Input.([]interface{}) {\n            count += find_lists(element)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp7zwbj6kd_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp7zwbj6kd_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp7zwbj6kd_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092460, 0x0)\n\t/tmp/tmpi3bzhgv3_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000924a0, 0x58a65f)\n\t/tmp/tmpi3bzhgv3_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a65f)\n\t/tmp/tmpi3bzhgv3_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000001380)\n\t/tmp/tmpi3bzhgv3_test.go:27 +0x19c\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int = 0\n    switch Input.(type) {\n    case []interface{}:\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        count += 1\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpmdfx9_72_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpmdfx9_72_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpmdfx9_72_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, item := range Input.([]interface{}) {\n            count += find_lists(item)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp76cs50ia_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp76cs50ia_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp76cs50ia_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0]) + find_lists(Input.([]interface{})[1])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2y2ni_8w_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2y2ni_8w_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2y2ni_8w_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, item := range Input.([]interface{}) {\n            count += find_lists(item)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp30csknsg_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int = 0\n    switch Input.(type) {\n    case []interface{}:\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        count++\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp3r851am9_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp3r851am9_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp3r851am9_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpq5khgprp_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        panic(\"Invalid input\")\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: Invalid input [recovered]\n\tpanic: Invalid input\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51ca40, 0x56de18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001680)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca40, 0x56de18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a3a0, 0xc0000926a8, 0xc000092508)\n\t/tmp/tmpsh0f2d8n_test.go:16 +0xdb\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000092678, 0x58a65f)\n\t/tmp/tmpsh0f2d8n_test.go:12 +0x71\ncommand-line-arguments_test.TestFind_Lists(0xc000001680)\n\t/tmp/tmpsh0f2d8n_test.go:27 +0x19c\ntesting.tRunner(0xc000001680, 0x54f1f0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int\n    switch Input.(type) {\n    case []interface{}:\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        count += 1\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp1iuzqzvz_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp1iuzqzvz_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp1iuzqzvz_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        list := Input.([]interface{})\n        count := 0\n        for _, item := range list {\n            count += find_lists(item)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpct93z0dh_test.go:38: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpct93z0dh_test.go:38: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpct93z0dh_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000120300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c460, 0x0)\n\t/tmp/tmpwe2u5ynf_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a65f)\n\t/tmp/tmpwe2u5ynf_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a65f)\n\t/tmp/tmpwe2u5ynf_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000120300)\n\t/tmp/tmpwe2u5ynf_test.go:27 +0x19c\ntesting.tRunner(0xc000120300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp2xvz014x_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists_in_list(Input.([]interface{}))\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmm3huhwp_test.go:12:24: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0]) + find_lists(Input.([]interface{})[1])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    var count int = 0\n    switch Input.(type) {\n    case []interface{}:\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        count++\n    }\n    return count\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpgcmncdnd_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpgcmncdnd_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpgcmncdnd_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpol_8ewu8_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c460, 0x0)\n\t/tmp/tmprcdwgxfj_test.go:12 +0x105\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c4a0, 0x58a65f)\n\t/tmp/tmprcdwgxfj_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc00008c678, 0x58a65f)\n\t/tmp/tmprcdwgxfj_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc0001a2300)\n\t/tmp/tmprcdwgxfj_test.go:26 +0x19c\ntesting.tRunner(0xc0001a2300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var counter int = 0\n        for _, v := range Input.([]interface{}) {\n            counter += find_lists(v)\n        }\n        return counter + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp9bj5gkff_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp9bj5gkff_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp9bj5gkff_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        case int:\n            return 0\n        case string:\n            return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp5lpl8tg8_test.go:36: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp5lpl8tg8_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp5lpl8tg8_test.go:36: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, value := range Input.([]interface{}) {\n            count += find_lists(value)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp_dton7oz_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0]) + find_lists(Input.([]interface{})[1])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpke808dtj_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp8nyrikhq_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0]) + find_lists(Input.([]interface{})[1])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpji8pi740_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpcaziabg2_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\npanic: runtime error: slice bounds out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086460, 0x0)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xfc\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc0000864a0, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.find_lists(0x51a4e0, 0xc000086678, 0x58a65f)\n\t/tmp/tmp8nyrikhq_test.go:12 +0xa5\ncommand-line-arguments_test.TestFind_Lists(0xc000102600)\n\t/tmp/tmp8nyrikhq_test.go:26 +0x19c\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmp4_r73rxq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        lists := 0\n        for _, v := range Input.([]interface{}) {\n            lists += find_lists(v)\n        }\n        return lists + 1\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpbo5glomy_test.go:37: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpbo5glomy_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpbo5glomy_test.go:37: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122654,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmpppuar9po_test.go:35: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmprthye9ze_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509985,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfg8u11f_test.go:12:20: undefined: find_lists_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n\nfunc TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509986,
      "stdout": "--- FAIL: TestFind_Lists (0.00s)\n    --- FAIL: TestFind_Lists/test_num__0 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__1 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_Lists/test_num__2 (0.00s)\n        tmphjluflcq_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}