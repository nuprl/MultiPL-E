{
  "name": "mbpp_589_perfect_squares",
  "language": "go_test.go",
  "prompt": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "func TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j <= i / 2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, 1)\n        } else {\n            for j := 1; j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, 1)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        for j := 1; j <= i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpfpvk0ek1_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpfpvk0ek1_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.021s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcpgj9bb6_test.go:12:12: undefined: is_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var res []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebxzlha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            result = append(result, i * i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if i == j * j {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j < i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j*j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 2; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.021s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.021s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 || i == 4 || i == 9 || i == 16 || i == 25 || i == 36 || i == 49 || i == 64 || i == 81 || i == 100 {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123798,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpp8mxdzbk_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[%!s(int=100)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            var j int\n            for j = 1; j * j <= i; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123798,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else if i == 4 {\n            squares = append(squares, i)\n        } else if i == 9 {\n            squares = append(squares, i)\n        } else if i == 16 {\n            squares = append(squares, i)\n        } else if i == 25 {\n            squares = append(squares, i)\n        } else if i == 36 {\n            squares = append(squares, i)\n        } else if i == 49 {\n            squares = append(squares, i)\n        } else if i == 64 {\n            squares = append(squares, i)\n        } else if i == 81 {\n            squares = append(squares, i)\n        } else if i == 100 {\n            squares = append(squares, i)\n        } else if i == 121 {\n            squares = append(squares, i)\n        } else if i == 144 {\n            squares = append(squares, i)\n        } else if i == 169 {\n            squares = append(squares, i)\n        } else if i == 196 {\n            squares = append(squares, i)\n        } else if i == 225 {\n            squares = append(squares, i)\n        } else if i == 256 {\n            squares = append(squares, i)\n        } else if i == 289 {\n            squares = append(squares, i)\n        } else if i == 324 {\n            squares = append(squares, i)\n        } else if i == 361 {\n            squares = append(squares, i)\n        } else if i == 400 {\n            squares = append(squares, i)\n        } else if i == 441 {\n            squares = append(squares, i)\n        } else if i == 484 {\n            squares = append(squares, i)\n        } else if i == 529 {\n            squares = append(squares, i)\n        } else if i == 576 {\n            squares = append(squares, i)\n        } else if i == 625 {\n           \nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123798,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_1rhknh5_test.go:62:6: expected '(', found TestPerfect_Squares\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            var square int\n            for j := 1; j <= i; j++ {\n                square += j\n                if square == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__0 (0.00s)\n        tmpc8r4qpgy_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=10) %!s(int=15) %!s(int=21) %!s(int=28)]'\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpc8r4qpgy_test.go:43: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=55) %!s(int=66) %!s(int=78) %!s(int=91)]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpc8r4qpgy_test.go:43: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[%!s(int=105) %!s(int=120) %!s(int=136) %!s(int=153) %!s(int=171) %!s(int=190)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            var j int\n            for j = 1; j * j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            var j int\n            for j = 2; j < i; j++ {\n                if i == j * j {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var ps []int\n    for i := a; i <= b; i++ {\n        for j := 1; j <= i; j++ {\n            if j * j == i {\n                ps = append(ps, i)\n                break\n            }\n        }\n    }\n    return ps\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        if i == 4 {\n            result = append(result, i)\n            continue\n        }\n        if i == 9 {\n            result = append(result, i)\n            continue\n        }\n        if i == 16 {\n            result = append(result, i)\n            continue\n        }\n        if i == 25 {\n            result = append(result, i)\n            continue\n        }\n        if i == 36 {\n            result = append(result, i)\n            continue\n        }\n        if i == 49 {\n            result = append(result, i)\n            continue\n        }\n        if i == 64 {\n            result = append(result, i)\n            continue\n        }\n        if i == 81 {\n            result = append(result, i)\n            continue\n        }\n        if i == 100 {\n            result = append(result, i)\n            continue\n        }\n        if i == 121 {\n            result = append(result, i)\n            continue\n        }\n        if i == 144 {\n            result = append(result, i)\n            continue\n        }\n        if i == 169 {\n            result = append(result, i)\n            continue\n        }\n        if i == 196 {\n            result = append(result, i)\n            continue\n        }\n        if i == 225 {\n            result = append(result, i)\n            continue\n        }\n        if i == 256 {\n            result = append(result, i)\n            continue\n        }\n        if i == 289 {\n            result = append(result, i)\n            continue\n        }\n        if i == 324 {\n            result = append(result, i)\n            continue\n        }\n        if i == 361 {\n            result = append(result, i)\n            continue\n        }\n        if i == 400 {\n            result = append(result, i)\n            continue\n        }\n        if i == 441 {\n            result = append(result, i)\n            continue\n        }\n        if i == 484 {\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123798,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpm7iqfzzs_test.go:97:6: expected '(', found TestPerfect_Squares\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.013s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        var j int = 1\n        for j * j < i {\n            j++\n        }\n        if j * j == i {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if i == j * j {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.014s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var res []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            res = append(res, i)\n        }\n    }\n    return res\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoebxzlha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 0 || i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if j * j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if i == j*j {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            result = append(result, i * i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            var j int\n            for j = 1; j < i; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 2; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            result = append(result, i * i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            result = append(result, i * i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else if i == 4 {\n            squares = append(squares, i)\n        } else if i == 9 {\n            squares = append(squares, i)\n        } else if i == 16 {\n            squares = append(squares, i)\n        } else if i == 25 {\n            squares = append(squares, i)\n        } else if i == 36 {\n            squares = append(squares, i)\n        } else if i == 49 {\n            squares = append(squares, i)\n        } else if i == 64 {\n            squares = append(squares, i)\n        } else if i == 81 {\n            squares = append(squares, i)\n        } else if i == 100 {\n            squares = append(squares, i)\n        } else if i == 121 {\n            squares = append(squares, i)\n        } else if i == 144 {\n            squares = append(squares, i)\n        } else if i == 169 {\n            squares = append(squares, i)\n        } else if i == 196 {\n            squares = append(squares, i)\n        } else if i == 225 {\n            squares = append(squares, i)\n        } else if i == 256 {\n            squares = append(squares, i)\n        } else if i == 289 {\n            squares = append(squares, i)\n        } else if i == 324 {\n            squares = append(squares, i)\n        } else if i == 361 {\n            squares = append(squares, i)\n        } else if i == 400 {\n            squares = append(squares, i)\n        } else if i == 441 {\n            squares = append(squares, i)\n        } else if i == 484 {\n            squares = append(squares, i)\n        } else if i == 529 {\n            squares = append(squares, i)\n        } else if i == 576 {\n            squares = append(squares, i)\n        } else if i == 625 {\n           \nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123798,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_1rhknh5_test.go:62:6: expected '(', found TestPerfect_Squares\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        j := 1\n        for j * j <= i {\n            if j * j == i {\n                squares = append(squares, i)\n            }\n            j++\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i / 2; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 2; j < i; j++ {\n            if i == j * j {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            var j int = 1\n            for j * j < i {\n                j++\n            }\n            if j * j == i {\n                result = append(result, i)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123799,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            squares = append(squares, i * i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpwe81_jg3_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j*j == i {\n                squares = append(squares, i)\n                break\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i / 2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i / 2; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        for j := 1; j <= i/2; j++ {\n            if j * j == i {\n                result = append(result, i)\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j*j == i {\n                    result = append(result, i)\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    result = append(result, i)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i / 2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, 1)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            squares = append(squares, i)\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqu7xo3gt_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 1; j <= i/2; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                    break\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, i)\n            continue\n        }\n        var flag bool = true\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__0 (0.00s)\n        tmpenvx1avr_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=9) %!s(int=16) %!s(int=25)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=11) %!s(int=13) %!s(int=17) %!s(int=19) %!s(int=23) %!s(int=29)]'\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpenvx1avr_test.go:45: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[%!s(int=53) %!s(int=59) %!s(int=61) %!s(int=67) %!s(int=71) %!s(int=73) %!s(int=79) %!s(int=83) %!s(int=89) %!s(int=97)]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpenvx1avr_test.go:45: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[%!s(int=101) %!s(int=103) %!s(int=107) %!s(int=109) %!s(int=113) %!s(int=127) %!s(int=131) %!s(int=137) %!s(int=139) %!s(int=149) %!s(int=151) %!s(int=157) %!s(int=163) %!s(int=167) %!s(int=173) %!s(int=179) %!s(int=181) %!s(int=191) %!s(int=193) %!s(int=197) %!s(int=199)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if is_perfect_square(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510507,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqnciq3ha_test.go:12:12: undefined: is_perfect_square\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var squares []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            squares = append(squares, i)\n        } else {\n            for j := 2; j < i; j++ {\n                if j * j == i {\n                    squares = append(squares, i)\n                }\n            }\n        }\n    }\n    return squares\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "ok  \tcommand-line-arguments\t0.021s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i * i >= a && i * i <= b {\n            result = append(result, i * i)\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123796,
      "stdout": "--- FAIL: TestPerfect_Squares (0.00s)\n    --- FAIL: TestPerfect_Squares/test_num__1 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=64) %!s(int=81) %!s(int=100)]', got '[]'\n    --- FAIL: TestPerfect_Squares/test_num__2 (0.00s)\n        tmpox1w0ia2_test.go:34: expected '[%!s(int=100) %!s(int=121) %!s(int=144) %!s(int=169) %!s(int=196)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package perfect_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find perfect squares between two given numbers.\nfunc perfect_squares(a int, b int) []int {\n    var result []int\n    for i := a; i <= b; i++ {\n        if i == 1 {\n            result = append(result, 1)\n        } else {\n            for j := 2; j < i; j++ {\n                if i == j * j {\n                    result = append(result, i)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestPerfect_Squares(t *testing.T) {\n  candidate := perfect_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 30), expected: []int{1, 4, 9, 16, 25} },\n     { actual: candidate(50, 100), expected: []int{64, 81, 100} },\n     { actual: candidate(100, 200), expected: []int{100, 121, 144, 169, 196} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}