{
  "name": "mbpp_307_colon_tuplex",
  "language": "go_test.go",
  "prompt": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_307_colon_tuplex.py",
  "prompt_terminology": "reworded",
  "tests": "func TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return []interface{}{}\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu_a4e6c9_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpu_a4e6c9_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return []interface{}{}\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu_a4e6c9_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpu_a4e6c9_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i <= n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpvslj8wkv_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpvslj8wkv_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n || m < 0 || n < 0 {\n        panic(\"m or n is out of range\")\n    }\n    var result []interface{}\n    for i := m; i < n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000142000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000106300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000142000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2vku6jyl_test.go:15\ncommand-line-arguments_test.TestColon_Tuplex(0xc000106300)\n\t/tmp/tmp2vku6jyl_test.go:27 +0xbbf\ntesting.tRunner(0xc000106300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return tuplex[m:]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprj_d4d1k_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmprj_d4d1k_test.go:24 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpn4dp4nei_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpn4dp4nei_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmp37n3m0at_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp37n3m0at_test.go:23 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpepl9c_ay_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpepl9c_ay_test.go:29 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpq4tznfcb_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpq4tznfcb_test.go:24 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        panic(\"Index out of range.\")\n    }\n    if m > n {\n        panic(\"m > n.\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: Index out of range. [recovered]\n\tpanic: Index out of range.\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpautnibjz_test.go:11\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpautnibjz_test.go:26 +0xf9\ntesting.tRunner(0xc000102600, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    if m > n {\n        m = n\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpzjcaid5g_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpzjcaid5g_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpzjcaid5g_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return tuplex[m:]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprj_d4d1k_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmprj_d4d1k_test.go:24 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp_utqyj2o_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp_utqyj2o_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp_utqyj2o_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i <= n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpvslj8wkv_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpvslj8wkv_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return tuplex[n:m]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp6929llwa_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp6929llwa_test.go:24 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpn4dp4nei_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpn4dp4nei_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    // Check the validity of m and n.\n    if m > n {\n        panic(\"m is larger than n\")\n    }\n    if m < 0 {\n        panic(\"m is smaller than 0\")\n    }\n    if n > len(tuplex) - 1 {\n        panic(\"n is larger than the length of tuplex\")\n    }\n    // Get the colon of the list.\n    colon := make([]interface{}, n - m + 1)\n    for i := 0; i < n - m + 1; i++ {\n        colon[i] = tuplex[m + i]\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n is larger than the length of tuplex [recovered]\n\tpanic: n is larger than the length of tuplex\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprxrqqd9y_test.go:18\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmprxrqqd9y_test.go:35 +0x51\ntesting.tRunner(0xc000001380, 0x54df20)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    if m > n {\n        return result\n    }\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprz2hz0t2_test.go:15\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmprz2hz0t2_test.go:27 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2svzkmwi_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp2svzkmwi_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpepl9c_ay_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpepl9c_ay_test.go:29 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpn4dp4nei_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpn4dp4nei_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpn4dp4nei_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpn4dp4nei_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == 0 {\n        return tuplex[n:]\n    }\n    return tuplex[m-1:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpobtliggf_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpobtliggf_test.go:23 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n || m < 0 || n < 0 {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpnafdxpiv_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpnafdxpiv_test.go:23 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i <= n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpvslj8wkv_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpvslj8wkv_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        return nil\n    }\n    if n > len(tuplex) {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == 0 && n == 0 {\n        return tuplex\n    }\n    if m > 0 {\n        return colon_tuplex(tuplex[1:], m-1, n)\n    }\n    if n > 0 {\n        return colon_tuplex(tuplex[:len(tuplex)-1], m, n-1)\n    }\n    return tuplex\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:-1] [recovered]\n\tpanic: runtime error: slice bounds out of range [:-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8660, 0x0, 0x2, 0x0, 0x30, 0x452b19, 0x5fa1a0, 0x203000)\n\t/tmp/tmpkj0plg_1_test.go:17 +0x1aa\ncommand-line-arguments_test.colon_tuplex(0xc0000c8660, 0x1, 0x2, 0x0, 0x31, 0xc0000925e8, 0x40d8fb, 0xc00000c048)\n\t/tmp/tmpkj0plg_1_test.go:17 +0x10f\ncommand-line-arguments_test.colon_tuplex(0xc0000c8660, 0x2, 0x2, 0x0, 0x32, 0x18, 0x2b0612a00108, 0x18)\n\t/tmp/tmpkj0plg_1_test.go:17 +0x10f\ncommand-line-arguments_test.colon_tuplex(0xc0000c8650, 0x3, 0x3, 0x1, 0x32, 0x5202a0, 0x5fa101, 0xc00000c048)\n\t/tmp/tmpkj0plg_1_test.go:14 +0x9b\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpkj0plg_1_test.go:14 +0x9b\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpkj0plg_1_test.go:29 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpjxtz7nrm_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return tuplex[m:]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprj_d4d1k_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmprj_d4d1k_test.go:24 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp8cxvhy8n_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmp8cxvhy8n_test.go:29 +0xf9\ntesting.tRunner(0xc000186300, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        return nil\n    }\n    if n > len(tuplex) {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpepl9c_ay_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpepl9c_ay_test.go:29 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpe3ixaz02_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102480)\n\t/tmp/tmpe3ixaz02_test.go:32 +0xf9\ntesting.tRunner(0xc000102480, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n > len(tuplex) {\n        panic(\"Index out of range.\")\n    }\n    if m > n {\n        panic(\"m > n.\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: Index out of range. [recovered]\n\tpanic: Index out of range.\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp0q1n1tq0_test.go:11\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp0q1n1tq0_test.go:26 +0xf9\ntesting.tRunner(0xc000001380, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m >= n {\n        return tuplex[m:]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpumh9884l_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpumh9884l_test.go:24 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2svzkmwi_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp2svzkmwi_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n || m < 0 || n < 0 {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpnafdxpiv_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpnafdxpiv_test.go:23 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpepl9c_ay_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpepl9c_ay_test.go:29 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return []interface{}{}\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu_a4e6c9_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpu_a4e6c9_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2svzkmwi_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp2svzkmwi_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m >= n {\n        return tuplex[m:]\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpklfwpyej_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpklfwpyej_test.go:23 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return []interface{}{}\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu_a4e6c9_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpu_a4e6c9_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmp37n3m0at_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp37n3m0at_test.go:23 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m >= len(tuplex) || n >= len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpwk0_nsn__test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpwk0_nsn__test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpwk0_nsn__test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpjdn_9irl_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpjdn_9irl_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpq6qek32b_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpq6qek32b_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmphziaty7q_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmphziaty7q_test.go:23 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp8cxvhy8n_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmp8cxvhy8n_test.go:29 +0xf9\ntesting.tRunner(0xc000186300, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        return nil\n    }\n    if n > len(tuplex) {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpii9m6ks4_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp8cxvhy8n_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmp8cxvhy8n_test.go:29 +0xf9\ntesting.tRunner(0xc000186300, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu0ym8smj_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu0ym8smj_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpxq7g8zn9_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510637,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpq8cuz9k3_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2svzkmwi_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp2svzkmwi_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a list.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == 0 {\n        return tuplex[n:]\n    }\n    return tuplex[m-1:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124071,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpobtliggf_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpobtliggf_test.go:23 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}