{
  "name": "mbpp_84_sequence",
  "language": "go_test.go",
  "prompt": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmp4ox101xw_test.go:34: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmp4ox101xw_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmp4ox101xw_test.go:34: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmp9d5ufij2_test.go:34: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmp9d5ufij2_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmp9d5ufij2_test.go:34: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmpeyifpv06_test.go:34: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 3 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "--- FAIL: TestSequence (0.00s)\n    --- FAIL: TestSequence/test_num__0 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSequence/test_num__1 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSequence/test_num__2 (0.00s)\n        tmpifkmam0m_test.go:31: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n < 1 {\n        return 0\n    }\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122695,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n-1)) + sequence(n-sequence(n-1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the nth number in the newman conway sequence.\nfunc sequence(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n    }\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n}\n\nfunc TestSequence(t *testing.T) {\n  candidate := sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: 6 },\n     { actual: candidate(2), expected: 1 },\n     { actual: candidate(3), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510179,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}