{
  "name": "mbpp_587_list_tuple",
  "language": "go_test.go",
  "prompt": "package list_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a list to a list.\nfunc list_tuple(listx []int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestList_Tuple(t *testing.T) {\n  candidate := list_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 10, 7, 4, 15, 3}), expected: []interface{}{5, 10, 7, 4, 15, 3} },\n     { actual: candidate([]int{2, 4, 5, 6, 2, 3, 4, 4, 7}), expected: []interface{}{2, 4, 5, 6, 2, 3, 4, 4, 7} },\n     { actual: candidate([]int{58, 44, 56}), expected: []interface{}{58, 44, 56} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    tuple := make([]interface{}, len(listx))\n    for i, v := range listx {\n        tuple[i] = v\n    }\n    return tuple\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, value := range listx {\n        listy = append(listy, value)\n    }\n    return listy\n}\n",
    "    var tuple []interface{}\n    for _, v := range listx {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var tuplex []interface{}\n    for _, v := range listx {\n        tuplex = append(tuplex, v)\n    }\n    return tuplex\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var tuplex []interface{}\n    for _, v := range listx {\n        tuplex = append(tuplex, v)\n    }\n    return tuplex\n}\n",
    "    var tuple []interface{}\n    for _, v := range listx {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n",
    "    var tuple []interface{}\n    for _, v := range listx {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n",
    "    listy := make([]interface{}, len(listx))\n    for i, v := range listx {\n        listy[i] = v\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, value := range listx {\n        listy = append(listy, value)\n    }\n    return listy\n}\n",
    "    listy := make([]interface{}, len(listx))\n    for i, v := range listx {\n        listy[i] = v\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    listy := make([]interface{}, len(listx))\n    for i, v := range listx {\n        listy[i] = v\n    }\n    return listy\n}\n",
    "    var listy []interface{}\n    for _, v := range listx {\n        listy = append(listy, v)\n    }\n    return listy\n}\n",
    "    var tuple []interface{}\n    for _, v := range listx {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n"
  ]
}