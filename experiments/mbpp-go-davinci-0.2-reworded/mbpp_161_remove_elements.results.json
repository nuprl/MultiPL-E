{
  "name": "mbpp_161_remove_elements",
  "language": "go_test.go",
  "prompt": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool = false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkjk9kdbc_test.go:15:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, e := range list2 {\n        for i, e1 := range list1 {\n            if e == e1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v1 == v {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        is_in := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                is_in = true\n                break\n            }\n        }\n        if !is_in {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, vv := range list1 {\n            if v == vv {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool = false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool = false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range list2 {\n        m[v] = true\n    }\n\n    var result []int\n    for _, v := range list1 {\n        if _, ok := m[v]; !ok {\n            result = append(result, v)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var list []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            list = append(list, v1)\n        }\n    }\n    return list\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    result := []int{}\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                list1 = append(list1[:i], list1[i+1:]...)\n                i--\n                break\n            }\n        }\n    }\n\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt1kv7a63_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool = false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n                j--\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        is_exist := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                is_exist = true\n                break\n            }\n        }\n        if !is_exist {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, i := range list2 {\n        for j, v := range list1 {\n            if i == v {\n                list1 = append(list1[:j], list1[j+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, val1 := range list1 {\n        found := false\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v2 := range list2 {\n        for i, v1 := range list1 {\n            if v1 == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    list := make([]int, 0)\n    for _, v1 := range list1 {\n        exist := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                exist = true\n                break\n            }\n        }\n        if !exist {\n            list = append(list, v1)\n        }\n    }\n    return list\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list2[i] == list1[j] {\n                list1 = append(list1[:j], list1[j+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v1 == v {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, vv := range list1 {\n            if v == vv {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        var found bool = false\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, list1[i])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list2[i] == list1[j] {\n                list1 = append(list1[:j], list1[j+1:]...)\n                j--\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        is_in := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                is_in = true\n                break\n            }\n        }\n        if !is_in {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n                j--\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                continue\n            }\n        }\n        result = append(result, v1)\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "--- FAIL: TestRemove_Elements (0.00s)\n    --- FAIL: TestRemove_Elements/test_num__0 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__1 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__2 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !in_list(v, list2) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg1v09ek6_test.go:12:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n                j--\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                list1 = append(list1[:i], list1[i+1:]...)\n                i--\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    m := make(map[int]bool)\n    for _, v := range list2 {\n        m[v] = true\n    }\n    var result []int\n    for _, v := range list1 {\n        if !m[v] {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                continue\n            }\n        }\n        result = append(result, v1)\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "--- FAIL: TestRemove_Elements (0.00s)\n    --- FAIL: TestRemove_Elements/test_num__0 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__1 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__2 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                continue\n            }\n        }\n        result = append(result, v1)\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "--- FAIL: TestRemove_Elements (0.00s)\n    --- FAIL: TestRemove_Elements/test_num__0 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__1 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=2) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestRemove_Elements/test_num__2 (0.00s)\n        tmpoomi6w_u_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=8) %!s(int=9) %!s(int=10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                list1 = append(list1[:i], list1[i+1:]...)\n                i--\n                break\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        var found bool\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for i := 0; i < len(list2); i++ {\n        for j := 0; j < len(list1); j++ {\n            if list1[j] == list2[i] {\n                list1 = append(list1[:j], list1[j+1:]...)\n                j--\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v := range list1 {\n        if !contains(list2, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpao6o1qof_test.go:12:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v2 := range list1 {\n            if v == v2 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    if len(list1) == 0 || len(list2) == 0 {\n        return list1\n    }\n\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    var result []int\n    for _, v1 := range list1 {\n        found := false\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517168,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all elements from a given list present in another list.\nfunc remove_elements(list1 []int, list2 []int) []int {\n    for _, v := range list2 {\n        for i, v1 := range list1 {\n            if v == v1 {\n                list1 = append(list1[:i], list1[i+1:]...)\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestRemove_Elements(t *testing.T) {\n  candidate := remove_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{1, 3, 5, 7}), expected: []int{2, 4, 6, 8, 9, 10} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, []int{5, 7}), expected: []int{1, 2, 3, 4, 6, 8, 9, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}