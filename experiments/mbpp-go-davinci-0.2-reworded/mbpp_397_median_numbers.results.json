{
  "name": "mbpp_397_median_numbers",
  "language": "go_test.go",
  "prompt": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max, min int\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n    if c > max {\n        max = c\n    } else if c < min {\n        min = c\n    }\n    return float64(a + b + c - max - min)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a < b {\n        if b < c {\n            return float64(b)\n        } else if a < c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a < c {\n            return float64(a)\n        } else if b < c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n\n    if c > max {\n        mid = max\n        max = c\n    } else if c < min {\n        mid = min\n        min = c\n    } else {\n        mid = c\n    }\n\n    return float64(min + mid) / 2\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "--- FAIL: TestMedian_Numbers (0.00s)\n    --- FAIL: TestMedian_Numbers/test_num__0 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=55)', got '%!s(float64=40)'\n    --- FAIL: TestMedian_Numbers/test_num__1 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=20)', got '%!s(float64=15)'\n    --- FAIL: TestMedian_Numbers/test_num__2 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=45)', got '%!s(float64=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n\n    if a > b {\n        if a > c {\n            max = a\n        } else {\n            max = c\n        }\n    } else {\n        if b > c {\n            max = b\n        } else {\n            max = c\n        }\n    }\n\n    if a < b {\n        if a < c {\n            min = a\n        } else {\n            min = c\n        }\n    } else {\n        if b < c {\n            min = b\n        } else {\n            min = c\n        }\n    }\n\n    if a != max && a != min {\n        mid = a\n    } else if b != max && b != min {\n        mid = b\n    } else if c != max && c != min {\n        mid = c\n    }\n\n    return float64(mid)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if a < c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b < c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if (a > b && a < c) || (a > c && a < b) {\n        return float64(a)\n    } else if (b > a && b < c) || (b > c && b < a) {\n        return float64(b)\n    } else {\n        return float64(c)\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if c > a {\n            return float64(a)\n        } else if c > b {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    } else {\n        if c > b {\n            return float64(b)\n        } else if c > a {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if a < c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b < c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max, min int\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n    if c > max {\n        max = c\n    }\n    if c < min {\n        min = c\n    }\n    return float64(a + b + c - max - min)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n\n    if c > max {\n        mid = max\n        max = c\n    } else if c < min {\n        mid = min\n        min = c\n    } else {\n        mid = c\n    }\n\n    return float64(min + mid) / 2\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "--- FAIL: TestMedian_Numbers (0.00s)\n    --- FAIL: TestMedian_Numbers/test_num__0 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=55)', got '%!s(float64=40)'\n    --- FAIL: TestMedian_Numbers/test_num__1 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=20)', got '%!s(float64=15)'\n    --- FAIL: TestMedian_Numbers/test_num__2 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=45)', got '%!s(float64=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if a < c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b < c {\n            m = float64(b)\n        } else {\n            m = float64(c)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a == b {\n        return float64(a)\n    }\n    if b == c {\n        return float64(b)\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else if a > c {\n        return float64(a)\n    } else if b > c {\n        return float64(c)\n    } else {\n        return float64(b)\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if a > c {\n        a, c = c, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if (a > b && a < c) || (a < b && a > c) {\n        return float64(a)\n    } else if (b > a && b < c) || (b < a && b > c) {\n        return float64(b)\n    } else {\n        return float64(c)\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if c > a {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if c > b {\n            return float64(b)\n        } else if a > c {\n            return float64(a)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if c > a {\n            return float64(a)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if c > b {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n    if a > b {\n        if a > c {\n            max = a\n            if b > c {\n                mid = b\n                min = c\n            } else {\n                mid = c\n                min = b\n            }\n        } else {\n            max = c\n            mid = a\n            min = b\n        }\n    } else {\n        if b > c {\n            max = b\n            if a > c {\n                mid = a\n                min = c\n            } else {\n                mid = c\n                min = a\n            }\n        } else {\n            max = c\n            mid = b\n            min = a\n        }\n    }\n    return float64(min + mid) / 2\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123917,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6u6u2c4g_test.go:10:9: max declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var m float64\n    if a > b {\n        if b > c {\n            m = float64(b)\n        } else if a > c {\n            m = float64(c)\n        } else {\n            m = float64(a)\n        }\n    } else {\n        if a > c {\n            m = float64(a)\n        } else if b > c {\n            m = float64(c)\n        } else {\n            m = float64(b)\n        }\n    }\n    return m\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max, min int\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n    if c > max {\n        max = c\n    }\n    if c < min {\n        min = c\n    }\n    return float64(a + b + c - max - min)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max, min int\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n    if c > max {\n        max = c\n    } else if c < min {\n        min = c\n    }\n    return float64(a + b + c - max - min)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a > c {\n            if b > c {\n                return float64(b)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(a)\n        }\n    } else {\n        if b > c {\n            if a > c {\n                return float64(a)\n            } else {\n                return float64(c)\n            }\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if a < c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b < c {\n            median = float64(b)\n        } else {\n            median = float64(c)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else {\n            if a > c {\n                median = float64(c)\n            } else {\n                median = float64(a)\n            }\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else {\n            if b > c {\n                median = float64(c)\n            } else {\n                median = float64(b)\n            }\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n\n    if a > b {\n        if a > c {\n            max = a\n            if b > c {\n                mid = b\n                min = c\n            } else {\n                mid = c\n                min = b\n            }\n        } else {\n            max = c\n            mid = a\n            min = b\n        }\n    } else {\n        if b > c {\n            max = b\n            if a > c {\n                mid = a\n                min = c\n            } else {\n                mid = c\n                min = a\n            }\n        } else {\n            max = c\n            mid = b\n            min = a\n        }\n    }\n\n    return float64(min + mid) / 2\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123917,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj_g2vkrf_test.go:10:9: max declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var median float64\n    if a > b {\n        if b > c {\n            median = float64(b)\n        } else if a > c {\n            median = float64(c)\n        } else {\n            median = float64(a)\n        }\n    } else {\n        if a > c {\n            median = float64(a)\n        } else if b > c {\n            median = float64(c)\n        } else {\n            median = float64(b)\n        }\n    }\n    return median\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123918,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    var max int\n    var min int\n    var mid int\n\n    if a > b {\n        max = a\n        min = b\n    } else {\n        max = b\n        min = a\n    }\n\n    if c > max {\n        mid = max\n        max = c\n    } else if c < min {\n        mid = min\n        min = c\n    } else {\n        mid = c\n    }\n\n    return float64(min + mid) / 2\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "--- FAIL: TestMedian_Numbers (0.00s)\n    --- FAIL: TestMedian_Numbers/test_num__0 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=55)', got '%!s(float64=40)'\n    --- FAIL: TestMedian_Numbers/test_num__1 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=20)', got '%!s(float64=15)'\n    --- FAIL: TestMedian_Numbers/test_num__2 (0.00s)\n        tmpke_4gkud_test.go:50: expected '%!s(float64=45)', got '%!s(float64=30)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if b > c {\n            return float64(b)\n        } else if a > c {\n            return float64(c)\n        } else {\n            return float64(a)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b > c {\n            return float64(c)\n        } else {\n            return float64(b)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        a, b = b, a\n    }\n    if b > c {\n        b, c = c, b\n    }\n    if a > b {\n        a, b = b, a\n    }\n    return float64(b)\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package median_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the median of three numbers.\nfunc median_numbers(a int, b int, c int) float64 {\n    if a > b {\n        if a < c {\n            return float64(a)\n        } else if b > c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    } else {\n        if a > c {\n            return float64(a)\n        } else if b < c {\n            return float64(b)\n        } else {\n            return float64(c)\n        }\n    }\n}\n\nfunc TestMedian_Numbers(t *testing.T) {\n  candidate := median_numbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(25, 55, 65), expected: 55.0 },\n     { actual: candidate(20, 10, 30), expected: 20.0 },\n     { actual: candidate(15, 45, 75), expected: 45.0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509795,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}