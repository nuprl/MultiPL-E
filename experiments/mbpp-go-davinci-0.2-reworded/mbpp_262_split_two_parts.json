{
  "name": "mbpp_262_split_two_parts",
  "language": "go_test.go",
  "prompt": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    if L <= 0 {\n        return nil\n    }\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        if s.Len() < L {\n            return nil\n        }\n        list2 := reflect.MakeSlice(reflect.TypeOf(list1), s.Len()-L, s.Len()-L)\n        for i := 0; i < s.Len()-L; i++ {\n            list2.Index(i).Set(s.Index(i+L))\n        }\n        s = s.Slice(0, L)\n        return []interface{}{s.Interface(), list2.Interface()}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    list := list1.([]int)\n    list2 := make([]int, L)\n    copy(list2, list)\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []string:\n        list := list1.([]string)\n        return [][]string{list[:L], list[L:]}\n    case []int:\n        list := list1.([]int)\n        return [][]int{list[:L], list[L:]}\n    case []float64:\n        list := list1.([]float64)\n        return [][]float64{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n"
  ]
}