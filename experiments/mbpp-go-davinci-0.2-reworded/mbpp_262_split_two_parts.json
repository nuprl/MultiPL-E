{
  "name": "mbpp_262_split_two_parts",
  "language": "go_test.go",
  "prompt": "package split_two_parts_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a list.\nfunc split_two_parts(list1 interface{}, L int) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSplit_Two_Parts(t *testing.T) {\n  candidate := split_two_parts\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []interface{}{[]int{1, 1, 2}, []int{3, 4, 4, 5, 1}} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, 2), expected: []interface{}{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}} },\n     { actual: candidate([]string{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"}, 4), expected: []interface{}{[]string{\"p\", \"y\", \"t\", \"h\"}, []string{\"o\", \"n\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    if L <= 0 {\n        return nil\n    }\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        if s.Len() < L {\n            return nil\n        }\n        list2 := reflect.MakeSlice(reflect.TypeOf(list1), s.Len()-L, s.Len()-L)\n        for i := 0; i < s.Len()-L; i++ {\n            list2.Index(i).Set(s.Index(i+L))\n        }\n        s = s.Slice(0, L)\n        return []interface{}{s.Interface(), list2.Interface()}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    list := list1.([]int)\n    list2 := make([]int, L)\n    copy(list2, list)\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []string:\n        list := list1.([]string)\n        return [][]string{list[:L], list[L:]}\n    case []int:\n        list := list1.([]int)\n        return [][]int{list[:L], list[L:]}\n    case []float64:\n        list := list1.([]float64)\n        return [][]float64{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    case []float64:\n        list2 = list1.([]float64)[:L]\n        list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for _, v := range list1.([]interface{}) {\n        if len(list2) < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n        list3 = list2[L:]\n        list2 = list2[:L]\n    case []string:\n        list2 = list1.([]string)\n        list3 = list2[L:]\n        list2 = list2[:L]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n        list3 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n        list3 = list1.([]string)\n    }\n    list2 = list2[:L]\n    list3 = list3[L:]\n    list4 := []interface{}{list2, list3}\n    return list4\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list2 := []int{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n    }\n    return list2[:L], list2[L:]\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return [2][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return [2][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if len(list) < L {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if len(list) < L {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    if L <= 0 {\n        return nil\n    }\n    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, 0)\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2.([]int), v)\n            }\n        }\n    case []string:\n        list2 = make([]string, 0)\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2.([]string), v)\n            }\n        }\n    case []float64:\n        list2 = make([]float64, 0)\n        for i, v := range list1.([]float64) {\n            if i < L {\n                list2 = append(list2.([]float64), v)\n            }\n        }\n    case []bool:\n        list2 = make([]bool, 0)\n        for i, v := range list1.([]bool) {\n            if i < L {\n                list2 = append(list2.([]bool), v)\n            }\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[0:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[0:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return []interface{}{list, []int{}}\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return []interface{}{list, []string{}}\n        }\n        return []interface{}{list[:L], list[L:]}\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for i, v := range list1.([]interface{}) {\n        if i < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        case []float64:\n            list := list1.([]float64)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    list4 := make([]interface{}, 0)\n    list5 := make([]interface{}, 0)\n    list6 := make([]interface{}, 0)\n    list7 := make([]interface{}, 0)\n    list8 := make([]interface{}, 0)\n    list9 := make([]interface{}, 0)\n    list10 := make([]interface{}, 0)\n    list11 := make([]interface{}, 0)\n    list12 := make([]interface{}, 0)\n    list13 := make([]interface{}, 0)\n    list14 := make([]interface{}, 0)\n    list15 := make([]interface{}, 0)\n    list16 := make([]interface{}, 0)\n    list17 := make([]interface{}, 0)\n    list18 := make([]interface{}, 0)\n    list19 := make([]interface{}, 0)\n    list20 := make([]interface{}, 0)\n    list21 := make([]interface{}, 0)\n    list22 := make([]interface{}, 0)\n    list23 := make([]interface{}, 0)\n    list24 := make([]interface{}, 0)\n    list25 := make([]interface{}, 0)\n    list26 := make([]interface{}, 0)\n    list27 := make([]interface{}, 0)\n    list28 := make([]interface{}, 0)\n    list29 := make([]interface{}, 0)\n    list30 := make([]interface{}, 0)\n    list31 := make([]interface{}, 0)\n    list32 := make([]interface{}, 0)\n    list33 := make([]interface{}, 0)\n    list34 := make([]interface{}, 0)\n    list35 := make([]interface{}, 0)\n    list36 := make([]interface{}, 0)\n    list37 := make([]interface{}, 0)\n    list38 := make([]interface{}, 0)\n    list39 := make([]interface{}, 0)\n    list40 := make([]interface{}, 0)\n    list41 :=",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    case []float64:\n        list2 = list1.([]float64)[:L]\n        list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        case []float64:\n            list := list1.([]float64)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return list\n            }\n            return []interface{}{list[:L], list[L:]}\n        default:\n            return list1\n    }\n}\n",
    "    var list2 []int\n    list2 = list1.([]int)\n    return list2[:L], list2[L:]\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int))-L)\n        for i := 0; i < len(list1.([]int)); i++ {\n            if i < L {\n                list2[i] = list1.([]int)[i]\n            } else {\n                list2[i-L] = list1.([]int)[i]\n            }\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string))-L)\n        for i := 0; i < len(list1.([]string)); i++ {\n            if i < L {\n                list2[i] = list1.([]string)[i]\n            } else {\n                list2[i-L] = list1.([]string)[i]\n            }\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []string:\n        list2 = list1.([]string)\n    }\n    for i := 0; i < L; i++ {\n        list3 = append(list3, list2[i])\n    }\n    return list3\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, L)\n        copy(list2, list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]interface{}, L)\n        copy(list2, list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 []interface{}\n    for i := 0; i < L; i++ {\n        list2 = append(list2, list1.([]interface{})[i])\n    }\n    return list2\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)[:L]\n            list3 = list1.([]int)[L:]\n        case []string:\n            list2 = list1.([]string)[:L]\n            list3 = list1.([]string)[L:]\n        case []float64:\n            list2 = list1.([]float64)[:L]\n            list3 = list1.([]float64)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list := list1.([]int)\n    list_len := len(list)\n    if list_len < L {\n        return list\n    }\n    return [][]int{list[:L], list[L:]}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[0:L], list[L:len(list)])\n    case []string:\n        list := list1.([]string)\n        return append(list[0:L], list[L:len(list)])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return list[:L], list[L:]\n        case []string:\n            list := list1.([]string)\n            return list[:L], list[L:]\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    default:\n        list2 = list1\n        list1 = list1\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return list1\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        return [][]string{list[:L], list[L:]}\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    list2 = append(list2, list1)\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n        case []int:\n            list2 = make([]int, len(list1.([]int)) - L)\n            copy(list2.([]int), list1.([]int)[L:])\n        case []string:\n            list2 = make([]string, len(list1.([]string)) - L)\n            copy(list2.([]string), list1.([]string)[L:])\n        case []float64:\n            list2 = make([]float64, len(list1.([]float64)) - L)\n            copy(list2.([]float64), list1.([]float64)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case string:\n        list := list1.(string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    list2 := list1.([]int)\n    return list2[:L], list2[L:]\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)[L:]\n            list1 = list1.([]int)[:L]\n        case []string:\n            list2 = list1.([]string)[L:]\n            list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int))-L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i-L] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string))-L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i-L] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return list[:L], list[L:]\n        case []string:\n            list := list1.([]string)\n            return list[:L], list[L:]\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    case []string:\n        list := list1.([]string)\n        list2 := list[L:]\n        list = list[:L]\n        return []interface{}{list, list2}\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []float64:\n        list2 = make([]interface{}, len(list1.([]float64)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]float64)[i]\n        }\n        for i := L; i < len(list1.([]float64)); i++ {\n            list2[i] = list1.([]float64)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    var list2 []interface{}\n    for i := 0; i < L; i++ {\n        list2 = append(list2, list1.([]interface{})[i])\n    }\n    return list2\n}\n",
    "    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list2 := list1.([]int)\n            return append(list2[:L], list2[L:]...)\n        case []string:\n            list2 := list1.([]string)\n            return append(list2[:L], list2[L:]...)\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for _, v := range list1.([]interface{}) {\n        if len(list2) < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, L)\n        copy(list2.([]int), list1.([]int)[:L])\n        list1 = list1.([]int)[L:]\n    case []string:\n        list2 = make([]string, L)\n        copy(list2.([]string), list1.([]string)[:L])\n        list1 = list1.([]string)[L:]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list2 := []interface{}{}\n    switch list1.(type) {\n        case []int:\n            list2 = make([]interface{}, len(list1.([]int)))\n            copy(list2.([]interface{}), list1.([]int))\n        case []string:\n            list2 = make([]interface{}, len(list1.([]string)))\n            copy(list2.([]interface{}), list1.([]string))\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i - L] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i - L] = list1.([]string)[i]\n        }\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return list1\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[0:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[0:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list1_len := len(list1.([]int))\n    if L > list1_len {\n        return nil\n    }\n    list2 := list1.([]int)[L:]\n    list1 = list1.([]int)[:L]\n    return []interface{}{list1, list2}\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]int)[i]\n        }\n        for i := L; i < len(list1.([]int)); i++ {\n            list2[i] = list1.([]int)[i]\n        }\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)) - L)\n        for i := 0; i < L; i++ {\n            list2[i] = list1.([]string)[i]\n        }\n        for i := L; i < len(list1.([]string)); i++ {\n            list2[i] = list1.([]string)[i]\n        }\n    }\n    return list2\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]int, len(list1.([]int)) - L)\n        copy(list2.([]int), list1.([]int)[L:])\n    case []string:\n        list2 = make([]string, len(list1.([]string)) - L)\n        copy(list2.([]string), list1.([]string)[L:])\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    list2 := []interface{}{}\n    list3 := []interface{}{}\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[:L]\n        list3 = list1.([]int)[L:]\n    case []string:\n        list2 = list1.([]string)[:L]\n        list3 = list1.([]string)[L:]\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    if L == 0 {\n        return list1\n    }\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return list\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            if L < 0 {\n                return nil\n            }\n            if L > len(list) {\n                return nil\n            }\n            return [][]int{list[:L], list[L:]}\n        case []string:\n            list := list1.([]string)\n            if L < 0 {\n                return nil\n            }\n            if L > len(list) {\n                return nil\n            }\n            return [][]string{list[:L], list[L:]}\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    for i, v := range list1.([]interface{}) {\n        if i < L {\n            list2 = append(list2, v)\n        } else {\n            list3 = append(list3, v)\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return [][]int{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return [][]string{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    case []string:\n        list := list1.([]string)\n        if L > len(list) {\n            return nil\n        }\n        return []interface{}{list[:L], list[L:]}\n    default:\n        return nil\n    }\n}\n",
    "    var list2 []interface{}\n    var list3 []interface{}\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if i < L {\n                list2 = append(list2, s.Index(i).Interface())\n            } else {\n                list3 = append(list3, s.Index(i).Interface())\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    // convert list1 to slice\n    list2 := list1.([]interface{})\n    // split list2 into two parts\n    list3 := list2[:L]\n    list4 := list2[L:]\n    // return list3 and list4\n    return []interface{}{list3, list4}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    case []float64:\n        list := list1.([]float64)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    var list2 []interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = make([]interface{}, len(list1.([]int)))\n        copy(list2, list1.([]int))\n    case []string:\n        list2 = make([]interface{}, len(list1.([]string)))\n        copy(list2, list1.([]string))\n    default:\n        return nil\n    }\n    return []interface{}{list1, list2[L:]}\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    case []float64:\n        list2 = list1.([]float64)[L:]\n        list1 = list1.([]float64)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    default:\n        return nil\n    }\n}\n",
    "    var list2 interface{}\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)[L:]\n        list1 = list1.([]int)[:L]\n    case []string:\n        list2 = list1.([]string)[L:]\n        list1 = list1.([]string)[:L]\n    }\n    return []interface{}{list1, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n",
    "    list := list1.([]int)\n    list2 := list[L:]\n    list = list[:L]\n    return []interface{}{list, list2}\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return append(list[:L], list[L:])\n    case []string:\n        list := list1.([]string)\n        return append(list[:L], list[L:])\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            return append(list[:L], list[L:])\n        case []string:\n            list := list1.([]string)\n            return append(list[:L], list[L:])\n        default:\n            return nil\n    }\n}\n",
    "    list2 := make([]interface{}, 0)\n    list3 := make([]interface{}, 0)\n    switch list1.(type) {\n    case []int:\n        for i, v := range list1.([]int) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    case []string:\n        for i, v := range list1.([]string) {\n            if i < L {\n                list2 = append(list2, v)\n            } else {\n                list3 = append(list3, v)\n            }\n        }\n    }\n    return []interface{}{list2, list3}\n}\n"
  ]
}