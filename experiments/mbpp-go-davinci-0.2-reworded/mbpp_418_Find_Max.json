{
  "name": "mbpp_418_Find_Max",
  "language": "go_test.go",
  "prompt": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []interface{}:\n        max := lst[0]\n        for _, v := range lst {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max_len := 0\n        max_elem := lst.([]interface{})[0]\n        for _, elem := range lst.([]interface{}) {\n            if len(elem.([]interface{})) > max_len {\n                max_len = len(elem.([]interface{}))\n                max_elem = elem\n            }\n        }\n        return max_elem\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    }\n    return nil\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if max == nil || len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(Find_Max(v).(string)) > len(Find_Max(max).(string)) {\n                max = v\n            }\n        }\n        return max\n    case string:\n        return lst.(string)\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max_int := lst_int[0]\n        for _, v := range lst_int {\n            if v > max_int {\n                max_int = v\n            }\n        }\n        return max_int\n    case []string:\n        lst_string := lst.([]string)\n        max_string := lst_string[0]\n        for _, v := range lst_string {\n            if len(v) > len(max_string) {\n                max_string = v\n            }\n        }\n        return max_string\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _,v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _,v := range lst.([]int) {\n            if len(v.([]int)) > len(max.([]int)) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _,v := range lst.([]string) {\n            if len(v.([]string)) > len(max.([]string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, item := range lst.([]interface{}) {\n            if len(item.([]interface{})) > len(max.([]interface{})) {\n                max = item\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, item := range lst.([]string) {\n            if len(item) > len(max) {\n                max = item\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, item := range lst.([]int) {\n            if item > max {\n                max = item\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return find_max_int(lst.([]int))\n    case []string:\n        return find_max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []string:\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return find_max_int(lst.([]int))\n    case []string:\n        return find_max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(Find_Max(v).([]interface{})) > len(Find_Max(max).([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return lst\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        lst_ := lst.([]interface{})\n        if len(lst_) == 0 {\n            return nil\n        }\n        max := lst_[0]\n        for _, e := range lst_ {\n            if len(e.([]interface{})) > len(max.([]interface{})) {\n                max = e\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, s := range lst.([]string) {\n            if len(s) > len(max) {\n                max = s\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, i := range lst.([]int) {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max_int := lst_int[0]\n        for _, v := range lst_int {\n            if v > max_int {\n                max_int = v\n            }\n        }\n        return max_int\n    case []string:\n        lst_str := lst.([]string)\n        max_str := lst_str[0]\n        for _, v := range lst_str {\n            if len(v) > len(max_str) {\n                max_str = v\n            }\n        }\n        return max_str\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return \"Invalid input\"\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if max == nil {\n                max = v\n            } else {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, s := range lst.([]string) {\n            if len(s) > len(max) {\n                max = s\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, i := range lst.([]int) {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, elem := range lst.([]string) {\n            if len(elem) > len(max) {\n                max = elem\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, elem := range lst.([]int) {\n            if elem > max {\n                max = elem\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, e := range lst.([]int) {\n            if e > max {\n                max = e\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, e := range lst.([]string) {\n            if len(e) > len(max) {\n                max = e\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max := lst_int[0]\n        for _, v := range lst_int {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst_str := lst.([]string)\n        max := lst_str[0]\n        for _, v := range lst_str {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, elem := range lst.([]interface{}) {\n            if max == nil {\n                max = elem\n            } else if len(fmt.Sprintf(\"%v\", elem)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = elem\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, s := range lst.([]string) {\n            if len(s) > len(max) {\n                max = s\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, i := range lst.([]int) {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(Find_Max(v).(string)) > len(Find_Max(max).(string)) {\n                max = v\n            }\n        }\n        return max\n    case string:\n        return lst.(string)\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []interface{}:\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    case []int:\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []float64:\n        for _, v := range lst.([]float64) {\n            if v > max.(float64) {\n                max = v\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []int:\n            return find_max_int(lst.([]int))\n        case []float64:\n            return find_max_float64(lst.([]float64))\n        case []string:\n            return find_max_string(lst.([]string))\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max := lst_int[0]\n        for _, i := range lst_int {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    case []string:\n        lst_str := lst.([]string)\n        max := lst_str[0]\n        for _, i := range lst_str {\n            if len(i) > len(max) {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    case []float64:\n        max = lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []string:\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    case []int:\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return max\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []string:\n        max = \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    case []int:\n        max = 0\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max_int := lst_int[0]\n        for _, v := range lst_int {\n            if v > max_int {\n                max_int = v\n            }\n        }\n        return max_int\n    case []string:\n        lst_str := lst.([]string)\n        max_str := lst_str[0]\n        for _, v := range lst_str {\n            if len(v) > len(max_str) {\n                max_str = v\n            }\n        }\n        return max_str\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int = 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string = \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []interface{}:\n        if len(lst) == 0 {\n            return nil\n        }\n        max := lst[0]\n        for _, v := range lst {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max_len int = 0\n        var max_elm interface{}\n        for _, elm := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", elm)) > max_len {\n                max_len = len(fmt.Sprintf(\"%v\", elm))\n                max_elm = elm\n            }\n        }\n        return max_elm\n    case []string:\n        var max_len int = 0\n        var max_elm interface{}\n        for _, elm := range lst.([]string) {\n            if len(elm) > max_len {\n                max_len = len(elm)\n                max_elm = elm\n            }\n        }\n        return max_elm\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    case []float64:\n        return Find_Max_float64(lst.([]float64))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return lst\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []interface{}:\n        max := lst[0]\n        for _, v := range lst {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    max := 0\n    var max_elem interface{}\n    switch lst.(type) {\n    case []int:\n        for _, elem := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", elem)) > max {\n                max = len(fmt.Sprintf(\"%d\", elem))\n                max_elem = elem\n            }\n        }\n    case []string:\n        for _, elem := range lst.([]string) {\n            if len(elem) > max {\n                max = len(elem)\n                max_elem = elem\n            }\n        }\n    case []float64:\n        for _, elem := range lst.([]float64) {\n            if len(fmt.Sprintf(\"%f\", elem)) > max {\n                max = len(fmt.Sprintf(\"%f\", elem))\n                max_elem = elem\n            }\n        }\n    }\n    return max_elem\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, i := range lst.([]int) {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, s := range lst.([]string) {\n            if len(s) > len(max) {\n                max = s\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, s := range lst.([]string) {\n            if len(s) > len(max) {\n                max = s\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, i := range lst.([]int) {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if max == nil {\n                max = v\n            } else if len(max.([]interface{})) < len(v.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int = 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string = \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n"
  ]
}