{
  "name": "mbpp_418_Find_Max",
  "language": "go_test.go",
  "prompt": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst := lst.(type) {\n    case []interface{}:\n        max := lst[0]\n        for _, v := range lst {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max.(int) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n",
    "    switch lst.(type) {\n    case []int:\n        lst := lst.([]int)\n        max := lst[0]\n        for _, v := range lst {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        lst := lst.([]string)\n        max := lst[0]\n        for _, v := range lst {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max_len := 0\n        max_elem := lst.([]interface{})[0]\n        for _, elem := range lst.([]interface{}) {\n            if len(elem.([]interface{})) > max_len {\n                max_len = len(elem.([]interface{}))\n                max_elem = elem\n            }\n        }\n        return max_elem\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    }\n    return nil\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if max == nil || len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n"
  ]
}