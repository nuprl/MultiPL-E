{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "go_test.go",
  "prompt": "package consecutive_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove consecutive duplicates of a given list.\nfunc consecutive_duplicates(nums interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "func TestConsecutive_Duplicates(t *testing.T) {\n  candidate := consecutive_duplicates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}), expected: []int{10, 15, 19, 18, 17, 26, 17, 18, 10} },\n     { actual: candidate([]string{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"}), expected: []string{\"a\", \"b\", \"c\", \"d\"} },\n     { actual: candidate([]string{\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"}), expected: []string{\"a\", \"b\", \"c\", \"d\", \"a\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != result[len(result) - 1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != result[len(result) - 1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, num := range nums.([]int) {\n            if i == 0 || num != nums.([]int)[i-1] {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, num := range nums.([]string) {\n            if i == 0 || num != nums.([]string)[i-1] {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []int{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != result[len(result)-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []string{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != result[len(result)-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i - 1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i - 1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums := nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums); i++ {\n                if i == 0 || nums[i] != nums[i-1] {\n                    result = append(result, nums[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums); i++ {\n                if i == 0 || nums[i] != nums[i-1] {\n                    result = append(result, nums[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, n := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != n {\n                result = append(result, n)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, n := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != n {\n                result = append(result, n)\n            }\n        }\n        return result\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_int := nums.([]int)\n        if len(nums_int) == 0 {\n            return nums_int\n        }\n        result := []int{nums_int[0]}\n        for i := 1; i < len(nums_int); i++ {\n            if nums_int[i] != nums_int[i-1] {\n                result = append(result, nums_int[i])\n            }\n        }\n        return result\n    case []string:\n        nums_str := nums.([]string)\n        if len(nums_str) == 0 {\n            return nums_str\n        }\n        result := []string{nums_str[0]}\n        for i := 1; i < len(nums_str); i++ {\n            if nums_str[i] != nums_str[i-1] {\n                result = append(result, nums_str[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result) - 1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result) - 1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for _, num := range nums.([]int) {\n                if len(result) == 0 || result[len(result)-1] != num {\n                    result = append(result, num)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for _, num := range nums.([]string) {\n                if len(result) == 0 || result[len(result)-1] != num {\n                    result = append(result, num)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums := nums.(type) {\n    case []int:\n        var result []int\n        for i, n := range nums {\n            if i == 0 || n != nums[i-1] {\n                result = append(result, n)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, n := range nums {\n            if i == 0 || n != nums[i-1] {\n                result = append(result, n)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i - 1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i - 1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 {\n                    result = append(result, nums.([]int)[i])\n                } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case string:\n            var result string\n            for i := 0; i < len(nums.(string)); i++ {\n                if i == 0 {\n                    result += string(nums.(string)[i])\n                } else if nums.(string)[i] != nums.(string)[i-1] {\n                    result += string(nums.(string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || num != result[len(result)-1] {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || num != result[len(result)-1] {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_arr := nums.([]int)\n        if len(nums_arr) == 0 {\n            return nums_arr\n        }\n        var result []int\n        result = append(result, nums_arr[0])\n        for i := 1; i < len(nums_arr); i++ {\n            if nums_arr[i] != nums_arr[i-1] {\n                result = append(result, nums_arr[i])\n            }\n        }\n        return result\n    case []string:\n        nums_arr := nums.([]string)\n        if len(nums_arr) == 0 {\n            return nums_arr\n        }\n        var result []string\n        result = append(result, nums_arr[0])\n        for i := 1; i < len(nums_arr); i++ {\n            if nums_arr[i] != nums_arr[i-1] {\n                result = append(result, nums_arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for _, v := range nums.([]int) {\n                if len(result) == 0 || result[len(result)-1] != v {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for _, v := range nums.([]string) {\n                if len(result) == 0 || result[len(result)-1] != v {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for _, v := range nums.([]int) {\n                if len(result) == 0 || result[len(result) - 1] != v {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for _, v := range nums.([]string) {\n                if len(result) == 0 || result[len(result) - 1] != v {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 {\n                    result = append(result, nums.([]int)[i])\n                } else {\n                    if nums.([]int)[i] != nums.([]int)[i-1] {\n                        result = append(result, nums.([]int)[i])\n                    }\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 {\n                    result = append(result, nums.([]string)[i])\n                } else {\n                    if nums.([]string)[i] != nums.([]string)[i-1] {\n                        result = append(result, nums.([]string)[i])\n                    }\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums := nums.(type) {\n    case []int:\n        if len(nums) == 0 {\n            return nums\n        }\n        var result []int\n        for i := 0; i < len(nums); i++ {\n            if i == 0 || nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n        return result\n    case []string:\n        if len(nums) == 0 {\n            return nums\n        }\n        var result []string\n        for i := 0; i < len(nums); i++ {\n            if i == 0 || nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        res := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                res = append(res, arr[i])\n            }\n        }\n        return res\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        res := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                res = append(res, arr[i])\n            }\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i - 1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i - 1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, str := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != str {\n                result = append(result, str)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 {\n                result = append(result, v)\n            } else {\n                if result[len(result)-1] != v {\n                    result = append(result, v)\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 {\n                result = append(result, v)\n            } else {\n                if result[len(result)-1] != v {\n                    result = append(result, v)\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        res := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                res = append(res, arr[i])\n            }\n        }\n        return res\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        res := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                res = append(res, arr[i])\n            }\n        }\n        return res\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 {\n                result = append(result, v)\n            } else {\n                if v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 {\n                result = append(result, v)\n            } else {\n                if v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_list := nums.([]int)\n        if len(nums_list) == 0 {\n            return nums_list\n        }\n        var result []int\n        result = append(result, nums_list[0])\n        for i := 1; i < len(nums_list); i++ {\n            if nums_list[i] != nums_list[i-1] {\n                result = append(result, nums_list[i])\n            }\n        }\n        return result\n    case []string:\n        nums_list := nums.([]string)\n        if len(nums_list) == 0 {\n            return nums_list\n        }\n        var result []string\n        result = append(result, nums_list[0])\n        for i := 1; i < len(nums_list); i++ {\n            if nums_list[i] != nums_list[i-1] {\n                result = append(result, nums_list[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums := nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums {\n            if i == 0 || v != nums[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums {\n            if i == 0 || v != nums[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch v := nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(v); i++ {\n            if i == 0 || v[i] != v[i-1] {\n                result = append(result, v[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(v); i++ {\n            if i == 0 || v[i] != v[i-1] {\n                result = append(result, v[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []int{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []string{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        list := nums.([]int)\n        if len(list) == 0 {\n            return list\n        }\n        if len(list) == 1 {\n            return list[0]\n        }\n        result := make([]int, 0)\n        result = append(result, list[0])\n        for i := 1; i < len(list); i++ {\n            if list[i] != list[i - 1] {\n                result = append(result, list[i])\n            }\n        }\n        return result\n    case []string:\n        list := nums.([]string)\n        if len(list) == 0 {\n            return list\n        }\n        if len(list) == 1 {\n            return list[0]\n        }\n        result := make([]string, 0)\n        result = append(result, list[0])\n        for i := 1; i < len(list); i++ {\n            if list[i] != list[i - 1] {\n                result = append(result, list[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            arr := nums.([]int)\n            if len(arr) == 0 {\n                return arr\n            }\n            result := []int{arr[0]}\n            for i := 1; i < len(arr); i++ {\n                if arr[i] != arr[i-1] {\n                    result = append(result, arr[i])\n                }\n            }\n            return result\n        case []string:\n            arr := nums.([]string)\n            if len(arr) == 0 {\n                return arr\n            }\n            result := []string{arr[0]}\n            for i := 1; i < len(arr); i++ {\n                if arr[i] != arr[i-1] {\n                    result = append(result, arr[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_int := nums.([]int)\n        if len(nums_int) == 0 {\n            return nums_int\n        }\n        result := []int{nums_int[0]}\n        for i := 1; i < len(nums_int); i++ {\n            if nums_int[i] != nums_int[i-1] {\n                result = append(result, nums_int[i])\n            }\n        }\n        return result\n    case []string:\n        nums_string := nums.([]string)\n        if len(nums_string) == 0 {\n            return nums_string\n        }\n        result := []string{nums_string[0]}\n        for i := 1; i < len(nums_string); i++ {\n            if nums_string[i] != nums_string[i-1] {\n                result = append(result, nums_string[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 {\n                    result = append(result, nums.([]int)[i])\n                } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 {\n                    result = append(result, nums.([]string)[i])\n                } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums := nums.([]int)\n        if len(nums) == 0 {\n            return nums\n        }\n        result := []int{nums[0]}\n        for i := 1; i < len(nums); i++ {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n        return result\n    case []string:\n        nums := nums.([]string)\n        if len(nums) == 0 {\n            return nums\n        }\n        result := []string{nums[0]}\n        for i := 1; i < len(nums); i++ {\n            if nums[i] != nums[i-1] {\n                result = append(result, nums[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []int{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != result[len(result)-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := []string{nums_[0]}\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != result[len(result)-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result) - 1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result) - 1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, n := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != n {\n                result = append(result, n)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, n := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != n {\n                result = append(result, n)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_arr := nums.([]int)\n        if len(nums_arr) == 0 {\n            return nums_arr\n        }\n        var result []int\n        result = append(result, nums_arr[0])\n        for i := 1; i < len(nums_arr); i++ {\n            if nums_arr[i] != nums_arr[i-1] {\n                result = append(result, nums_arr[i])\n            }\n        }\n        return result\n    case []string:\n        nums_arr := nums.([]string)\n        if len(nums_arr) == 0 {\n            return nums_arr\n        }\n        var result []string\n        result = append(result, nums_arr[0])\n        for i := 1; i < len(nums_arr); i++ {\n            if nums_arr[i] != nums_arr[i-1] {\n                result = append(result, nums_arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums := nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums {\n            if i == 0 || v != nums[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums {\n            if i == 0 || v != nums[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        ints := nums.([]int)\n        if len(ints) == 0 {\n            return ints\n        }\n        result := []int{ints[0]}\n        for i := 1; i < len(ints); i++ {\n            if ints[i] != ints[i-1] {\n                result = append(result, ints[i])\n            }\n        }\n        return result\n    case []string:\n        strings := nums.([]string)\n        if len(strings) == 0 {\n            return strings\n        }\n        result := []string{strings[0]}\n        for i := 1; i < len(strings); i++ {\n            if strings[i] != strings[i-1] {\n                result = append(result, strings[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        var result []int\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        var result []string\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != arr[i-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i - 1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i - 1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, num := range nums.([]int) {\n            if len(result) == 0 || result[len(result) - 1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, num := range nums.([]string) {\n            if len(result) == 0 || result[len(result) - 1] != num {\n                result = append(result, num)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i - 1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i - 1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else {\n                if nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else {\n                if nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        panic(\"Unsupported type\")\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 {\n                result = append(result, v)\n            } else if v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 {\n                result = append(result, v)\n            } else if v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i, v := range nums.([]int) {\n                if i == 0 || v != nums.([]int)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i, v := range nums.([]string) {\n                if i == 0 || v != nums.([]string)[i-1] {\n                    result = append(result, v)\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]int)[i])\n            } else if nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 {\n                result = append(result, nums.([]string)[i])\n            } else if nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i, v := range nums.([]int) {\n            if i == 0 || v != nums.([]int)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i, v := range nums.([]string) {\n            if i == 0 || v != nums.([]string)[i-1] {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := make([]int, 0)\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        result := make([]string, 0)\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for _, v := range nums.([]int) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for _, v := range nums.([]string) {\n            if len(result) == 0 || result[len(result)-1] != v {\n                result = append(result, v)\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_list := nums.([]int)\n        if len(nums_list) == 0 {\n            return nums_list\n        }\n        var result []int\n        result = append(result, nums_list[0])\n        for i := 1; i < len(nums_list); i++ {\n            if nums_list[i] != nums_list[i - 1] {\n                result = append(result, nums_list[i])\n            }\n        }\n        return result\n    case []string:\n        nums_list := nums.([]string)\n        if len(nums_list) == 0 {\n            return nums_list\n        }\n        var result []string\n        result = append(result, nums_list[0])\n        for i := 1; i < len(nums_list); i++ {\n            if nums_list[i] != nums_list[i - 1] {\n                result = append(result, nums_list[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        return consecutive_duplicates_int(nums.([]int))\n    case []string:\n        return consecutive_duplicates_string(nums.([]string))\n    }\n    return nil\n}\n",
    "    switch nums.(type) {\n        case []int:\n            return consecutive_duplicates_int(nums.([]int))\n        case []string:\n            return consecutive_duplicates_string(nums.([]string))\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        arr := nums.([]int)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []int{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != result[len(result)-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    case []string:\n        arr := nums.([]string)\n        if len(arr) == 0 {\n            return arr\n        }\n        result := []string{arr[0]}\n        for i := 1; i < len(arr); i++ {\n            if arr[i] != result[len(result)-1] {\n                result = append(result, arr[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        var result []int\n        for i := 0; i < len(nums.([]int)); i++ {\n            if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                result = append(result, nums.([]int)[i])\n            }\n        }\n        return result\n    case []string:\n        var result []string\n        for i := 0; i < len(nums.([]string)); i++ {\n            if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                result = append(result, nums.([]string)[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n",
    "    switch nums.(type) {\n        case []int:\n            var result []int\n            for i := 0; i < len(nums.([]int)); i++ {\n                if i == 0 || nums.([]int)[i] != nums.([]int)[i-1] {\n                    result = append(result, nums.([]int)[i])\n                }\n            }\n            return result\n        case []string:\n            var result []string\n            for i := 0; i < len(nums.([]string)); i++ {\n                if i == 0 || nums.([]string)[i] != nums.([]string)[i-1] {\n                    result = append(result, nums.([]string)[i])\n                }\n            }\n            return result\n        default:\n            return nil\n    }\n}\n",
    "    switch nums.(type) {\n    case []int:\n        nums_ := nums.([]int)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        var result []int\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    case []string:\n        nums_ := nums.([]string)\n        if len(nums_) == 0 {\n            return nums_\n        }\n        var result []string\n        result = append(result, nums_[0])\n        for i := 1; i < len(nums_); i++ {\n            if nums_[i] != nums_[i-1] {\n                result = append(result, nums_[i])\n            }\n        }\n        return result\n    default:\n        return nil\n    }\n}\n"
  ]
}