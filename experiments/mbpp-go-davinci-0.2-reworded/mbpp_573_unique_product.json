{
  "name": "mbpp_573_unique_product",
  "language": "go_test.go",
  "prompt": "package unique_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to calculate the product of the unique numbers in a given list.\nfunc unique_product(list_data []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUnique_Product(t *testing.T) {\n  candidate := unique_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 20, 30, 40, 20, 50, 60, 40}), expected: 720000000 },\n     { actual: candidate([]int{1, 2, 3, 1}), expected: 6 },\n     { actual: candidate([]int{7, 8, 9, 0, 1, 1}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var unique_list []int\n    var product int = 1\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n            product *= value\n        }\n    }\n    return product\n}\n",
    "    var product int = 1\n    var unique_list []int\n    var unique_list_map map[int]int = make(map[int]int)\n    for _, value := range list_data {\n        if _, ok := unique_list_map[value]; !ok {\n            unique_list_map[value] = value\n            unique_list = append(unique_list, value)\n        }\n    }\n    for _, value := range unique_list {\n        product *= value\n    }\n    return product\n}\n",
    "    var unique_list []int\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n    var product int = 1\n    for _, value := range unique_list {\n        product *= value\n    }\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n    for _, value := range unique_list {\n        product *= value\n    }\n    return product\n}\n",
    "    var result int\n    var unique_list []int\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        result *= value\n    }\n\n    return result\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product *= value\n    }\n\n    return product\n}\n",
    "    var product int = 1\n    var unique_list []int\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n    for _, value := range unique_list {\n        product = product * value\n    }\n    return product\n}\n",
    "    // Create a map to store the unique numbers\n    unique_numbers := make(map[int]int)\n    // Loop through the list and add the unique numbers to the map\n    for _, v := range list_data {\n        unique_numbers[v] = v\n    }\n    // Initialize the product variable\n    product := 1\n    // Loop through the map and multiply the product by the value\n    for _, v := range unique_numbers {\n        product *= v\n    }\n    // Return the product\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product *= value\n    }\n\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product *= value\n    }\n\n    return product\n}\n",
    "    var unique_list []int\n    for _, num := range list_data {\n        if !contains(unique_list, num) {\n            unique_list = append(unique_list, num)\n        }\n    }\n    var product int = 1\n    for _, num := range unique_list {\n        product *= num\n    }\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product = product * value\n    }\n\n    return product\n}\n",
    "    unique_numbers := make(map[int]int)\n    for _, value := range list_data {\n        unique_numbers[value] = value\n    }\n    product := 1\n    for _, value := range unique_numbers {\n        product *= value\n    }\n    return product\n}\n",
    "    unique_numbers := make(map[int]int)\n    for _, value := range list_data {\n        unique_numbers[value] = value\n    }\n\n    product := 1\n    for _, value := range unique_numbers {\n        product *= value\n    }\n    return product\n}\n",
    "    // Create a map to store the unique numbers\n    unique_numbers := make(map[int]int)\n    // Iterate over the list\n    for _, number := range list_data {\n        // Check if the number is in the map\n        if _, ok := unique_numbers[number]; ok {\n            // If it is, delete it\n            delete(unique_numbers, number)\n        } else {\n            // If it isn't, add it\n            unique_numbers[number] = number\n        }\n    }\n    // Create a variable to store the product\n    product := 1\n    // Iterate over the unique numbers\n    for _, number := range unique_numbers {\n        // Multiply the product by the number\n        product *= number\n    }\n    // Return the product\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product *= value\n    }\n\n    return product\n}\n",
    "    var unique_list []int\n    var product int = 1\n\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n\n    for _, value := range unique_list {\n        product *= value\n    }\n\n    return product\n}\n",
    "    var product int = 1\n    var unique_list []int\n    for _, num := range list_data {\n        if !contains(unique_list, num) {\n            unique_list = append(unique_list, num)\n        }\n    }\n    for _, num := range unique_list {\n        product *= num\n    }\n    return product\n}\n",
    "    var product int = 1\n    var unique_list []int\n    for _, value := range list_data {\n        if !contains(unique_list, value) {\n            unique_list = append(unique_list, value)\n        }\n    }\n    for _, value := range unique_list {\n        product *= value\n    }\n    return product\n}\n",
    "    var product int = 1\n    var unique_numbers []int\n    for _, number := range list_data {\n        if !contains(unique_numbers, number) {\n            unique_numbers = append(unique_numbers, number)\n        }\n    }\n    for _, number := range unique_numbers {\n        product *= number\n    }\n    return product\n}\n"
  ]
}