{
  "name": "mbpp_445_index_multiplication",
  "language": "go_test.go",
  "prompt": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_4y28mhj_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp_4y28mhj_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpum_qgin5_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpum_qgin5_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpl7juy5pw_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpl7juy5pw_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result[i] = test_tup1[i].(int) * test_tup2[i].(int)\n        case float64:\n            result[i] = test_tup1[i].(float64) * test_tup2[i].(float64)\n        case string:\n            result[i] = test_tup1[i].(string) + test_tup2[i].(string)\n        default:\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpujfxlsvb_test.go:44: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpujfxlsvb_test.go:44: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpujfxlsvb_test.go:44: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_list = append(result_list, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_list\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp3zdqhb97_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmp3zdqhb97_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "Invalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\nInvalid type\n--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpai6tcn_u_test.go:41: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpai6tcn_u_test.go:41: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpai6tcn_u_test.go:41: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    result := make([]interface{}, len(test_tup1))\n    for i, _ := range test_tup1 {\n        result[i] = test_tup1[i].(int) * test_tup2[i].(int)\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpgmz9vk3n_test.go:12 +0x18f\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpgmz9vk3n_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb0irfakq_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i, _ := range test_tup1 {\n        ret_tup = append(ret_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return ret_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001922a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp9fi3k0m__test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc0001a0300)\n\t/tmp/tmp9fi3k0m__test.go:24 +0x4c2\ntesting.tRunner(0xc0001a0300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_list = append(result_list, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_list\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp80bzzxx9_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp80bzzxx9_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpztmkid9g_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpztmkid9g_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp_4y28mhj_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp_4y28mhj_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, float64(test_tup1[i].(int)) * test_tup2[i].(float64))\n            default:\n                return nil\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(float64) * float64(test_tup2[i].(int)))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            default:\n                return nil\n            }\n        default:\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmpxzysr59q_test.go:56: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmpxzysr59q_test.go:56: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmpxzysr59q_test.go:56: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result[i] = test_tup1[i].(int) * test_tup2[i].(int)\n        case float64:\n            result[i] = test_tup1[i].(float64) * test_tup2[i].(float64)\n        }\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\n    --- FAIL: TestIndex_Multiplication/test_num__0 (0.00s)\n        tmp8xoj3gg3_test.go:40: expected '[[%!s(int=6) %!s(int=21)] [%!s(int=12) %!s(int=45)] [%!s(int=2) %!s(int=9)] [%!s(int=7) %!s(int=30)]]', got '[<nil> <nil> <nil> <nil>]'\n    --- FAIL: TestIndex_Multiplication/test_num__1 (0.00s)\n        tmp8xoj3gg3_test.go:40: expected '[[%!s(int=14) %!s(int=32)] [%!s(int=20) %!s(int=60)] [%!s(int=6) %!s(int=20)] [%!s(int=16) %!s(int=44)]]', got '[<nil> <nil> <nil> <nil>]'\n    --- FAIL: TestIndex_Multiplication/test_num__2 (0.00s)\n        tmp8xoj3gg3_test.go:40: expected '[[%!s(int=24) %!s(int=45)] [%!s(int=30) %!s(int=77)] [%!s(int=12) %!s(int=33)] [%!s(int=27) %!s(int=60)]]', got '[<nil> <nil> <nil> <nil>]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpl7juy5pw_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpl7juy5pw_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpum_qgin5_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpum_qgin5_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpum_qgin5_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpum_qgin5_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        ret_list = append(ret_list, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return ret_list\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp4ayqwxjv_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmp4ayqwxjv_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i, _ := range test_tup1 {\n        result[i] = test_tup1[i].(int) * test_tup2[i].(int)\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00019e2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00019e2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc0001d3ed0, 0x4, 0x4, 0xc0001d3e90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpd45l5h15_test.go:15 +0x196\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000182600)\n\t/tmp/tmpd45l5h15_test.go:27 +0x4c2\ntesting.tRunner(0xc000182600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpba_u84_v_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpba_u84_v_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb0irfakq_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpztmkid9g_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpztmkid9g_test.go:24 +0x4c2\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpum_qgin5_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmpum_qgin5_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpl7juy5pw_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpl7juy5pw_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_list []interface{}\n    for i, _ := range test_tup1 {\n        ret_list = append(ret_list, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return ret_list\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010ded0, 0x4, 0x4, 0xc00010de90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmp5y45bf_o_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmp5y45bf_o_test.go:24 +0x4c2\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists are not of the same length\")\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i := 0; i < len(test_tup1); i++ {\n        result[i] = test_tup1[i].(int) * test_tup2[i].(int)\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc000010270)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmp08k6h_1__test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001200)\n\t/tmp/tmp08k6h_1__test.go:27 +0x1a79\ntesting.tRunner(0xc000001200, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuhnbfdie_test.go:12:46: invalid operation: test_tup1[i] * test_tup2[i] (operator * not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmpl7juy5pw_test.go:15\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmpl7juy5pw_test.go:27 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        res = append(res, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return res\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123420,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmphtl_8cc6_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000102600)\n\t/tmp/tmphtl_8cc6_test.go:24 +0x1bb3\ntesting.tRunner(0xc000102600, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(...)\n\t/tmp/tmprr5dw1z2_test.go:12\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000001380)\n\t/tmp/tmprr5dw1z2_test.go:24 +0x1bb3\ntesting.tRunner(0xc000001380, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of list elements in the given two lists.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "--- FAIL: TestIndex_Multiplication (0.00s)\npanic: interface conversion: interface {} is []interface {}, not int [recovered]\n\tpanic: interface conversion: interface {} is []interface {}, not int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x524740, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.index_multiplication(0xc00010fed0, 0x4, 0x4, 0xc00010fe90, 0x4, 0x4, 0x0, 0x0, 0x0)\n\t/tmp/tmpvy5kwj6s_test.go:12 +0x1f6\ncommand-line-arguments_test.TestIndex_Multiplication(0xc000186300)\n\t/tmp/tmpvy5kwj6s_test.go:24 +0x4c2\ntesting.tRunner(0xc000186300, 0x550208)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}