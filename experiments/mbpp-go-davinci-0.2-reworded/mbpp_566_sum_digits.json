{
  "name": "mbpp_566_sum_digits",
  "language": "go_test.go",
  "prompt": "package sum_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get the sum of the digits of a non-negative integer.\nfunc sum_digits(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSum_Digits(t *testing.T) {\n  candidate := sum_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(345), expected: 12 },\n     { actual: candidate(12), expected: 3 },\n     { actual: candidate(97), expected: 16 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    if n < 10 {\n        return n\n    }\n    return n % 10 + sum_digits(n / 10)\n}\n",
    "    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"
  ]
}