{
  "name": "mbpp_117_list_to_float",
  "language": "go_test.go",
  "prompt": "package list_to_float_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert all possible convertible elements in a list of lists to floats.\nfunc list_to_float(test_list [][]interface{}) [][]interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "reworded",
  "tests": "func TestList_To_Float(t *testing.T) {\n  candidate := list_to_float\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"3\", \"4\"}, []interface{}{\"1\", \"26.45\"}, []interface{}{\"7.32\", \"8\"}, []interface{}{\"4\", \"8\"}}), expected: [][]int{[]interface{}{3.0, 4.0}, []interface{}{1.0, 26.45}, []interface{}{7.32, 8.0}, []interface{}{4.0, 8.0}} },\n     { actual: candidate([][]int{[]interface{}{\"4\", \"4\"}, []interface{}{\"2\", \"27\"}, []interface{}{\"4.12\", \"9\"}, []interface{}{\"7\", \"11\"}}), expected: [][]int{[]interface{}{4.0, 4.0}, []interface{}{2.0, 27.0}, []interface{}{4.12, 9.0}, []interface{}{7.0, 11.0}} },\n     { actual: candidate([][]int{[]interface{}{\"6\", \"78\"}, []interface{}{\"5\", \"26.45\"}, []interface{}{\"1.33\", \"4\"}, []interface{}{\"82\", \"13\"}}), expected: [][]int{[]interface{}{6.0, 78.0}, []interface{}{5.0, 26.45}, []interface{}{1.33, 4.0}, []interface{}{82.0, 13.0}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := range test_list {\n        for j := range test_list[i] {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for _, inner_list := range test_list {\n        for i, element := range inner_list {\n            if value, ok := element.(int); ok {\n                inner_list[i] = float64(value)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, sublist := range test_list {\n        var new_sublist []interface{}\n        for _, item := range sublist {\n            switch item.(type) {\n            case int:\n                new_sublist = append(new_sublist, float64(item.(int)))\n            case string:\n                new_sublist = append(new_sublist, item.(string))\n            case float64:\n                new_sublist = append(new_sublist, item.(float64))\n            }\n        }\n        new_list = append(new_list, new_sublist)\n    }\n    return new_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, list := range test_list {\n        var new_list_item []interface{}\n        for _, item := range list {\n            switch item.(type) {\n            case int:\n                new_list_item = append(new_list_item, float64(item.(int)))\n            case float64:\n                new_list_item = append(new_list_item, item.(float64))\n            case string:\n                new_list_item = append(new_list_item, item.(string))\n            }\n        }\n        new_list = append(new_list, new_list_item)\n    }\n    return new_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\", test_list[i][j])\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sub_list := range test_list {\n        var new_sub_list []interface{}\n        for _, item := range sub_list {\n            switch item.(type) {\n            case int:\n                new_sub_list = append(new_sub_list, float64(item.(int)))\n            case float64:\n                new_sub_list = append(new_sub_list, item.(float64))\n            case string:\n                new_sub_list = append(new_sub_list, item.(string))\n            }\n        }\n        result = append(result, new_sub_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = float64(test_list[i][j].(float64))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, sub_list := range test_list {\n        var new_sub_list []interface{}\n        for _, item := range sub_list {\n            switch item.(type) {\n            case int:\n                new_sub_list = append(new_sub_list, float64(item.(int)))\n            case string:\n                new_sub_list = append(new_sub_list, item)\n            case float64:\n                new_sub_list = append(new_sub_list, item)\n            default:\n                fmt.Println(\"Unsupported type\")\n            }\n        }\n        new_list = append(new_list, new_sub_list)\n    }\n    return new_list\n}\n",
    "    for i, list := range test_list {\n        for j, element := range list {\n            if float_value, ok := element.(float64); ok {\n                test_list[i][j] = float_value\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch v := test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(v)\n            case string:\n                test_list[i][j] = 0.0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                fmt.Println(\"Unknown type\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, list := range test_list {\n        for j, element := range list {\n            switch element.(type) {\n            case int:\n                test_list[i][j] = float64(element.(int))\n            case float64:\n                test_list[i][j] = element.(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(len(test_list[i][j].(string)))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            default:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                continue\n            case string:\n                if test_list[i][j] == \"NaN\" {\n                    test_list[i][j] = nil\n                } else {\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            default:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for _, list := range test_list {\n        for i, element := range list {\n            if val, ok := element.(int); ok {\n                list[i] = float64(val)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(v)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sub_list := range test_list {\n        var sub_result []interface{}\n        for _, item := range sub_list {\n            switch item.(type) {\n            case int:\n                sub_result = append(sub_result, float64(item.(int)))\n            case float64:\n                sub_result = append(sub_result, item.(float64))\n            case string:\n                sub_result = append(sub_result, item.(string))\n            }\n        }\n        result = append(result, sub_result)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if _, ok := test_list[i][j].(float64); ok {\n                continue\n            } else if _, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(test_list[i][j].(int))\n            } else if _, ok := test_list[i][j].(string); ok {\n                test_list[i][j] = float64(test_list[i][j].(string))\n            } else {\n                test_list[i][j] = 0.0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, row := range test_list {\n        for j, col := range row {\n            switch col.(type) {\n            case int:\n                test_list[i][j] = float64(col.(int))\n            case float64:\n                test_list[i][j] = col.(float64)\n            default:\n                test_list[i][j] = col\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, v := range test_list {\n        for j, k := range v {\n            switch k.(type) {\n            case int:\n                test_list[i][j] = float64(k.(int))\n            case float64:\n                test_list[i][j] = k.(float64)\n            case string:\n                test_list[i][j] = float64(k.(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            default:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                if test_list[i][j].(string) == \"\" {\n                    test_list[i][j] = float64(0)\n                } else {\n                    test_list[i][j] = float64(0)\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sub_list := range test_list {\n        var result_sub_list []interface{}\n        for _, item := range sub_list {\n            switch item.(type) {\n            case int:\n                result_sub_list = append(result_sub_list, float64(item.(int)))\n            case float64:\n                result_sub_list = append(result_sub_list, item.(float64))\n            case string:\n                if item.(string) == \"NaN\" {\n                    result_sub_list = append(result_sub_list, item.(string))\n                } else {\n                    result_sub_list = append(result_sub_list, item.(string))\n                }\n            default:\n                result_sub_list = append(result_sub_list, item)\n            }\n        }\n        result = append(result, result_sub_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                if test_list[i][j] == \"NaN\" {\n                    test_list[i][j] = float64(0)\n                } else {\n                    test_list[i][j] = float64(0)\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sublist := range test_list {\n        var new_sublist []interface{}\n        for _, element := range sublist {\n            switch element.(type) {\n            case int:\n                new_sublist = append(new_sublist, float64(element.(int)))\n            case float64:\n                new_sublist = append(new_sublist, element.(float64))\n            default:\n                new_sublist = append(new_sublist, element)\n            }\n        }\n        result = append(result, new_sublist)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, element := range list {\n            switch element.(type) {\n            case int:\n                new_list = append(new_list, float64(element.(int)))\n            case float64:\n                new_list = append(new_list, element.(float64))\n            case string:\n                new_list = append(new_list, element.(string))\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                if test_list[i][j].(string) == \"NaN\" {\n                    test_list[i][j] = float64(0)\n                } else {\n                    test_list[i][j] = float64(0)\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = float64(0)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, element := range list {\n            switch element.(type) {\n            case int:\n                new_list = append(new_list, float64(element.(int)))\n            case float64:\n                new_list = append(new_list, element)\n            default:\n                new_list = append(new_list, element)\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\", &test_list[i][j])\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                default:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, element := range list {\n            switch element.(type) {\n            case int:\n                new_list = append(new_list, float64(element.(int)))\n            case float64:\n                new_list = append(new_list, element.(float64))\n            case string:\n                new_list = append(new_list, element.(string))\n            default:\n                fmt.Println(\"Unsupported type\")\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, v := range test_list {\n        for j, w := range v {\n            switch w.(type) {\n            case int:\n                test_list[i][j] = float64(w.(int))\n            case float64:\n                test_list[i][j] = w.(float64)\n            case string:\n                test_list[i][j] = 0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, list := range test_list {\n        for j, element := range list {\n            if element, ok := element.(int); ok {\n                test_list[i][j] = float64(element)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if _, ok := test_list[i][j].(float64); !ok {\n                if _, ok := test_list[i][j].(int); ok {\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if val, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(val)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(len(test_list[i][j].(string)))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, sub_list := range test_list {\n        var new_sub_list []interface{}\n        for _, element := range sub_list {\n            switch element.(type) {\n                case int:\n                    new_sub_list = append(new_sub_list, float64(element.(int)))\n                case float64:\n                    new_sub_list = append(new_sub_list, element)\n                case string:\n                    new_sub_list = append(new_sub_list, element)\n                default:\n                    new_sub_list = append(new_sub_list, element)\n            }\n        }\n        new_list = append(new_list, new_sub_list)\n    }\n    return new_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if _, ok := test_list[i][j].(float64); ok {\n                continue\n            } else if _, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(test_list[i][j].(int))\n            } else if _, ok := test_list[i][j].(string); ok {\n                fmt.Println(test_list[i][j])\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            default:\n                continue\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(v)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = float64(0)\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                test_list[i][j] = test_list[i][j]\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                continue\n            case string:\n                test_list[i][j] = 0.0\n            default:\n                test_list[i][j] = 0.0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, element := range list {\n            switch element.(type) {\n            case int:\n                new_list = append(new_list, float64(element.(int)))\n            case float64:\n                new_list = append(new_list, element.(float64))\n            default:\n                new_list = append(new_list, element)\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, v := range test_list {\n        for j, k := range v {\n            switch k.(type) {\n            case int:\n                test_list[i][j] = float64(k.(int))\n            case int8:\n                test_list[i][j] = float64(k.(int8))\n            case int16:\n                test_list[i][j] = float64(k.(int16))\n            case int32:\n                test_list[i][j] = float64(k.(int32))\n            case int64:\n                test_list[i][j] = float64(k.(int64))\n            case uint:\n                test_list[i][j] = float64(k.(uint))\n            case uint8:\n                test_list[i][j] = float64(k.(uint8))\n            case uint16:\n                test_list[i][j] = float64(k.(uint16))\n            case uint32:\n                test_list[i][j] = float64(k.(uint32))\n            case uint64:\n                test_list[i][j] = float64(k.(uint64))\n            case float32:\n                test_list[i][j] = float64(k.(float32))\n            case float64:\n                test_list[i][j] = float64(k.(float64))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, element := range list {\n            switch element.(type) {\n            case int:\n                new_list = append(new_list, float64(element.(int)))\n            case float64:\n                new_list = append(new_list, element.(float64))\n            case string:\n                new_list = append(new_list, element.(string))\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = test_list[i][j].(string)\n                default:\n                    fmt.Println(\"Error\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                if test_list[i][j].(string) == \"NaN\" {\n                    test_list[i][j] = float64(0)\n                } else {\n                    test_list[i][j] = float64(0)\n                }\n            default:\n                test_list[i][j] = float64(0)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch v := test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(v)\n            case float64:\n                test_list[i][j] = v\n            case string:\n                if v == \"NaN\" {\n                    test_list[i][j] = float64(0)\n                } else {\n                    test_list[i][j] = float64(0)\n                }\n            default:\n                test_list[i][j] = float64(0)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if _, ok := test_list[i][j].(float64); ok {\n                continue\n            } else if _, ok := test_list[i][j].(int); ok {\n                test_list[i][j] = float64(test_list[i][j].(int))\n            } else if _, ok := test_list[i][j].(string); ok {\n                test_list[i][j] = float64(test_list[i][j].(string))\n            } else {\n                test_list[i][j] = 0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case int8:\n                test_list[i][j] = float64(test_list[i][j].(int8))\n            case int16:\n                test_list[i][j] = float64(test_list[i][j].(int16))\n            case int32:\n                test_list[i][j] = float64(test_list[i][j].(int32))\n            case int64:\n                test_list[i][j] = float64(test_list[i][j].(int64))\n            case uint:\n                test_list[i][j] = float64(test_list[i][j].(uint))\n            case uint8:\n                test_list[i][j] = float64(test_list[i][j].(uint8))\n            case uint16:\n                test_list[i][j] = float64(test_list[i][j].(uint16))\n            case uint32:\n                test_list[i][j] = float64(test_list[i][j].(uint32))\n            case uint64:\n                test_list[i][j] = float64(test_list[i][j].(uint64))\n            case float32:\n                test_list[i][j] = float64(test_list[i][j].(float32))\n            case float64:\n                test_list[i][j] = float64(test_list[i][j].(float64))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sublist := range test_list {\n        var new_sublist []interface{}\n        for _, element := range sublist {\n            switch element.(type) {\n            case int:\n                new_sublist = append(new_sublist, float64(element.(int)))\n            case float64:\n                new_sublist = append(new_sublist, element.(float64))\n            default:\n                new_sublist = append(new_sublist, element)\n            }\n        }\n        result = append(result, new_sublist)\n    }\n    return result\n}\n",
    "    for i, v := range test_list {\n        for j, v2 := range v {\n            switch v2.(type) {\n            case int:\n                test_list[i][j] = float64(v2.(int))\n            case float64:\n                test_list[i][j] = v2.(float64)\n            case string:\n                test_list[i][j] = v2.(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                test_list[i][j] = \"N/A\"\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    if test_list[i][j] == \"NaN\" {\n                        test_list[i][j] = nil\n                    } else {\n                        test_list[i][j] = nil\n                    }\n                default:\n                    test_list[i][j] = nil\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                fmt.Println(\"string\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, v := range test_list {\n        for j, v2 := range v {\n            switch v2.(type) {\n            case int:\n                test_list[i][j] = float64(v2.(int))\n            case float64:\n                test_list[i][j] = v2.(float64)\n            case string:\n                test_list[i][j] = 0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case int8:\n                    test_list[i][j] = float64(test_list[i][j].(int8))\n                case int16:\n                    test_list[i][j] = float64(test_list[i][j].(int16))\n                case int32:\n                    test_list[i][j] = float64(test_list[i][j].(int32))\n                case int64:\n                    test_list[i][j] = float64(test_list[i][j].(int64))\n                case uint:\n                    test_list[i][j] = float64(test_list[i][j].(uint))\n                case uint8:\n                    test_list[i][j] = float64(test_list[i][j].(uint8))\n                case uint16:\n                    test_list[i][j] = float64(test_list[i][j].(uint16))\n                case uint32:\n                    test_list[i][j] = float64(test_list[i][j].(uint32))\n                case uint64:\n                    test_list[i][j] = float64(test_list[i][j].(uint64))\n                case float32:\n                    test_list[i][j] = float64(test_list[i][j].(float32))\n                case float64:\n                    test_list[i][j] = float64(test_list[i][j].(float64))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for _, item := range list {\n            switch item.(type) {\n            case int:\n                new_list = append(new_list, float64(item.(int)))\n            case float64:\n                new_list = append(new_list, item)\n            case string:\n                new_list = append(new_list, item)\n            }\n        }\n        result = append(result, new_list)\n    }\n    return result\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    if test_list[i][j] == \"NaN\" {\n                        test_list[i][j] = nil\n                    } else {\n                        test_list[i][j] = float64(test_list[i][j].(string))\n                    }\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case float64:\n                    test_list[i][j] = test_list[i][j].(float64)\n                case string:\n                    test_list[i][j] = float64(0)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                continue\n            case string:\n                test_list[i][j] = 0\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                continue\n            case string:\n                fmt.Println(\"String found\")\n                continue\n            default:\n                fmt.Println(\"Unknown type found\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var result [][]interface{}\n    for _, sublist := range test_list {\n        var new_sublist []interface{}\n        for _, element := range sublist {\n            switch element.(type) {\n            case int:\n                new_sublist = append(new_sublist, float64(element.(int)))\n            case float64:\n                new_sublist = append(new_sublist, element.(float64))\n            default:\n                new_sublist = append(new_sublist, element)\n            }\n        }\n        result = append(result, new_sublist)\n    }\n    return result\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if _, ok := test_list[i][j].(float64); !ok {\n                if _, ok := test_list[i][j].(int); ok {\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for _, list := range test_list {\n        for i, element := range list {\n            if value, ok := element.(int); ok {\n                list[i] = float64(value)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if test_list[i][j] == nil {\n                continue\n            }\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for _, list := range test_list {\n        for i, item := range list {\n            switch item.(type) {\n            case int:\n                list[i] = float64(item.(int))\n            case string:\n                list[i] = float64(item.(string))\n            }\n        }\n    }\n    return test_list\n}\n"
  ]
}