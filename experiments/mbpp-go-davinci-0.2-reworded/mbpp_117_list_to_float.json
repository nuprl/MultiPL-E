{
  "name": "mbpp_117_list_to_float",
  "language": "go_test.go",
  "prompt": "package list_to_float_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert all possible convertible elements in a list of lists to floats.\nfunc list_to_float(test_list [][]interface{}) [][]interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "reworded",
  "tests": "func TestList_To_Float(t *testing.T) {\n  candidate := list_to_float\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"3\", \"4\"}, []interface{}{\"1\", \"26.45\"}, []interface{}{\"7.32\", \"8\"}, []interface{}{\"4\", \"8\"}}), expected: [][]int{[]interface{}{3.0, 4.0}, []interface{}{1.0, 26.45}, []interface{}{7.32, 8.0}, []interface{}{4.0, 8.0}} },\n     { actual: candidate([][]int{[]interface{}{\"4\", \"4\"}, []interface{}{\"2\", \"27\"}, []interface{}{\"4.12\", \"9\"}, []interface{}{\"7\", \"11\"}}), expected: [][]int{[]interface{}{4.0, 4.0}, []interface{}{2.0, 27.0}, []interface{}{4.12, 9.0}, []interface{}{7.0, 11.0}} },\n     { actual: candidate([][]int{[]interface{}{\"6\", \"78\"}, []interface{}{\"5\", \"26.45\"}, []interface{}{\"1.33\", \"4\"}, []interface{}{\"82\", \"13\"}}), expected: [][]int{[]interface{}{6.0, 78.0}, []interface{}{5.0, 26.45}, []interface{}{1.33, 4.0}, []interface{}{82.0, 13.0}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := range test_list {\n        for j := range test_list[i] {\n            if val, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = val\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for _, inner_list := range test_list {\n        for i, element := range inner_list {\n            if value, ok := element.(int); ok {\n                inner_list[i] = float64(value)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, sublist := range test_list {\n        var new_sublist []interface{}\n        for _, item := range sublist {\n            switch item.(type) {\n            case int:\n                new_sublist = append(new_sublist, float64(item.(int)))\n            case string:\n                new_sublist = append(new_sublist, item.(string))\n            case float64:\n                new_sublist = append(new_sublist, item.(float64))\n            }\n        }\n        new_list = append(new_list, new_sublist)\n    }\n    return new_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            default:\n                test_list[i][j] = nil\n            }\n        }\n    }\n    return test_list\n}\n",
    "    var new_list [][]interface{}\n    for _, list := range test_list {\n        var new_list_item []interface{}\n        for _, item := range list {\n            switch item.(type) {\n            case int:\n                new_list_item = append(new_list_item, float64(item.(int)))\n            case float64:\n                new_list_item = append(new_list_item, item.(float64))\n            case string:\n                new_list_item = append(new_list_item, item.(string))\n            }\n        }\n        new_list = append(new_list, new_list_item)\n    }\n    return new_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if v, ok := test_list[i][j].(float64); ok {\n                test_list[i][j] = v\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i, _ := range test_list {\n        for j, _ := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j], _ = fmt.Sscanf(test_list[i][j].(string), \"%f\")\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            case string:\n                test_list[i][j] = test_list[i][j].(string)\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := range test_list {\n        for j := range test_list[i] {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case string:\n                test_list[i][j] = float64(test_list[i][j].(string))\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            if test_list[i][j] != nil {\n                switch test_list[i][j].(type) {\n                case int:\n                    test_list[i][j] = float64(test_list[i][j].(int))\n                case string:\n                    test_list[i][j] = float64(test_list[i][j].(string))\n                }\n            }\n        }\n    }\n    return test_list\n}\n",
    "    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            switch test_list[i][j].(type) {\n            case int:\n                test_list[i][j] = float64(test_list[i][j].(int))\n            case float64:\n                test_list[i][j] = test_list[i][j].(float64)\n            }\n        }\n    }\n    return test_list\n}\n"
  ]
}