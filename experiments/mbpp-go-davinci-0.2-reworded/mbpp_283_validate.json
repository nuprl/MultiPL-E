{
  "name": "mbpp_283_validate",
  "language": "go_test.go",
  "prompt": "package validate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nfunc validate(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "func TestValidate(t *testing.T) {\n  candidate := validate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1234), expected: true },\n     { actual: candidate(51241), expected: false },\n     { actual: candidate(321), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Write your code here\n    return false\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n\n    m := map[int]int{}\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n\n    for digit, freq := range m {\n        if freq > digit {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        d := n % 10\n        m[d]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var count [10]int\n    for n > 0 {\n        count[n % 10]++\n        n /= 10\n    }\n    for i, c := range count {\n        if c > i {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    // check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    // 1. convert the integer to a string\n    // 2. loop through the string and count the frequency of each digit\n    // 3. check whether the frequency of each digit is less than or equal to the digit itself\n    // 4. return true or false\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s); i++ {\n        count := 0\n        for j := 0; j < len(s); j++ {\n            if s[i] == s[j] {\n                count++\n            }\n        }\n        if count > int(s[i] - '0') {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        n = -n\n    }\n    digits := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digits[digit]++\n        n /= 10\n    }\n    for digit, count := range digits {\n        if count > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    m := make(map[int]int)\n    for n > 0 {\n        m[n % 10]++\n        n /= 10\n    }\n    for k, v := range m {\n        if v > k {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if n < 0 {\n        return false\n    }\n    digitMap := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        digitMap[digit]++\n        n /= 10\n    }\n    for digit, freq := range digitMap {\n        if freq > digit {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return true\n}\n",
    "    m := make(map[int]int)\n    for n > 0 {\n        digit := n % 10\n        m[digit]++\n        n /= 10\n    }\n    for k, v := range m {\n        if k < v {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // convert the integer to a string\n    str := fmt.Sprintf(\"%d\", n)\n    // create a map to store the frequency of each digit\n    freq := make(map[string]int)\n    // loop through the string\n    for _, v := range str {\n        // convert the string to a string\n        s := fmt.Sprintf(\"%c\", v)\n        // if the digit is not in the map, add it to the map\n        if _, ok := freq[s]; !ok {\n            freq[s] = 1\n        } else {\n            // if the digit is in the map, increment the frequency\n            freq[s]++\n        }\n    }\n    // loop through the string\n    for _, v := range str {\n        // convert the string to a string\n        s := fmt.Sprintf(\"%c\", v)\n        // convert the string to an integer\n        i, _ := strconv.Atoi(s)\n        // check whether the frequency of each digit in the integer is less than or equal to the digit itself\n        if freq[s] > i {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}