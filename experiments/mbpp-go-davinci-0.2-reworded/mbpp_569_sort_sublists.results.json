{
  "name": "mbpp_569_sort_sublists",
  "language": "go_test.go",
  "prompt": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i+1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5oqrfy9j_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i])-1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphvnikun2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    temp := list1[i][j]\n                    list1[i][j] = list1[i][k]\n                    list1[i][k] = temp\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvlhri8b5_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:31:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:32:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:33:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i+1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5oqrfy9j_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5oqrfy9j_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5oqrfy9j_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j+1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc0clnxck_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpc0clnxck_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpc0clnxck_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpc0clnxck_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpc0clnxck_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpc0clnxck_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpc0clnxck_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpc0clnxck_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpc0clnxck_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := range list1 {\n        for j := range list1[i] {\n            for k := range list1[i] {\n                if list1[i][j] < list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ld2bl3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := i + 1; j < len(list1); j++ {\n            if list1[i][0] > list1[j][0] {\n                list1[i], list1[j] = list1[j], list1[i]\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmxw0wla_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:27:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := range list1 {\n        for j := range list1[i] {\n            for k := range list1[i] {\n                if list1[i][j] < list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ld2bl3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := range list1 {\n        for j := range list1[i] {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw52elzlz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpw52elzlz_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpw52elzlz_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpw52elzlz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpw52elzlz_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpw52elzlz_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpw52elzlz_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpw52elzlz_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpw52elzlz_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k + 1] {\n                    list1[i][k], list1[i][k + 1] = list1[i][k + 1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeks7xkx3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := i + 1; j < len(list1); j++ {\n            if list1[i][0] > list1[j][0] {\n                list1[i], list1[j] = list1[j], list1[i]\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmxw0wla_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:27:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2); i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgtc60xb1_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpgtc60xb1_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgtc60xb1_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgtc60xb1_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpgtc60xb1_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgtc60xb1_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgtc60xb1_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpgtc60xb1_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgtc60xb1_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list := range list1 {\n        for i := 0; i < len(list) - 1; i++ {\n            for j := i + 1; j < len(list); j++ {\n                if list[i] > list[j] {\n                    list[i], list[j] = list[j], list[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ojmhz3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5ojmhz3c_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5ojmhz3c_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5ojmhz3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5ojmhz3c_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5ojmhz3c_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5ojmhz3c_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp5ojmhz3c_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp5ojmhz3c_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1 - j; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06jqh1zx_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp06jqh1zx_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp06jqh1zx_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp06jqh1zx_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp06jqh1zx_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp06jqh1zx_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp06jqh1zx_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp06jqh1zx_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp06jqh1zx_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]) - 1; j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy79no2cg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k + 1] {\n                    list1[i][k], list1[i][k + 1] = list1[i][k + 1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeks7xkx3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[j] < sublist[i] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem0v7r8b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpem0v7r8b_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpem0v7r8b_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpem0v7r8b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpem0v7r8b_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpem0v7r8b_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpem0v7r8b_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpem0v7r8b_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpem0v7r8b_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i])-1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphvnikun2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphvnikun2_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphvnikun2_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k + 1] {\n                    list1[i][k], list1[i][k + 1] = list1[i][k + 1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeks7xkx3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmx8doa0a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpmx8doa0a_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpmx8doa0a_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k + 1] {\n                    list1[i][k], list1[i][k + 1] = list1[i][k + 1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeks7xkx3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpeks7xkx3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpeks7xkx3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    temp := list1[i][j]\n                    list1[i][j] = list1[i][k]\n                    list1[i][k] = temp\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvlhri8b5_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:31:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:32:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpvlhri8b5_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlhri8b5_test.go:33:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := i + 1; j < len(list1); j++ {\n            if list1[i][0] > list1[j][0] {\n                list1[i], list1[j] = list1[j], list1[i]\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcmxw0wla_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:27:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:28:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpcmxw0wla_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcmxw0wla_test.go:29:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i, sublist := range list1 {\n        for j := 0; j < len(sublist) - 1; j++ {\n            for k := j + 1; k < len(sublist); k++ {\n                if sublist[j] > sublist[k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuu8seuhb_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpuu8seuhb_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpuu8seuhb_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpuu8seuhb_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpuu8seuhb_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpuu8seuhb_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpuu8seuhb_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpuu8seuhb_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpuu8seuhb_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]) - 1; j++ {\n            for k := 0; k < len(list1[i]) - 1 - j; k++ {\n                if list1[i][k] > list1[i][k + 1] {\n                    list1[i][k], list1[i][k + 1] = list1[i][k + 1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnxb52ai1_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpnxb52ai1_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpnxb52ai1_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpnxb52ai1_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpnxb52ai1_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpnxb52ai1_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpnxb52ai1_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpnxb52ai1_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpnxb52ai1_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := range list1 {\n        for j := range list1[i] {\n            for k := range list1[i] {\n                if list1[i][j] < list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ld2bl3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmph2ld2bl3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph2ld2bl3_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]) - 1; j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy79no2cg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpy79no2cg_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpy79no2cg_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, list2 := range list1 {\n        for i := 0; i < len(list2) - 1; i++ {\n            for j := i + 1; j < len(list2); j++ {\n                if list2[i] > list2[j] {\n                    list2[i], list2[j] = list2[j], list2[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9npxbxgh_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp9npxbxgh_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp9npxbxgh_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphww7m45r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmphww7m45r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphww7m45r_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        sort_strings(sublist)\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0srkmvx_test.go:11:9: undefined: sort_strings\n/tmp/tmpn0srkmvx_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:23:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:24:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmpn0srkmvx_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpn0srkmvx_test.go:25:142: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122936,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprj_7pmbe_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmprj_7pmbe_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprj_7pmbe_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n\nfunc TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510370,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6si1k7ii_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:29:157: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:30:158: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]string in argument to candidate\n/tmp/tmp6si1k7ii_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp6si1k7ii_test.go:31:142: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}