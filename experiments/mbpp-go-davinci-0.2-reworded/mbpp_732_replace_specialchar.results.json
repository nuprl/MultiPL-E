{
  "name": "mbpp_732_replace_specialchar",
  "language": "go_test.go",
  "prompt": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return replace_specialchar_recursive(text, \"\")\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsk68g_hg_test.go:10:12: undefined: replace_specialchar_recursive\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, c := range text {\n        switch c {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return replace_specialchar_regexp(text)\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3trtempc_test.go:10:12: undefined: replace_specialchar_regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ':\n            result += \":\"\n        case ',':\n            result += \":\"\n        case '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' || c == ',' || c == '.' {\n            result += \":\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return replace_specialchar_with_char(text, ':')\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124257,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiduo0dv4_test.go:10:12: undefined: replace_specialchar_with_char\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        switch char {\n        case ' ', ',', '.':\n            result += \":\"\n        default:\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' || char == ',' || char == '.' {\n            result += \":\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_specialchar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nfunc replace_specialchar(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Specialchar(t *testing.T) {\n  candidate := replace_specialchar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python language, Programming language.\"), expected: \"Python:language::Programming:language:\" },\n     { actual: candidate(\"a b c,d e f\"), expected: \"a:b:c:d:e:f\" },\n     { actual: candidate(\"ram reshma,ram rahim\"), expected: \"ram:reshma:ram:rahim\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517131,
      "stdout": "--- FAIL: TestReplace_Specialchar (0.00s)\n    --- FAIL: TestReplace_Specialchar/test_num__0 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'Python:language::Programming:language:', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__1 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'a:b:c:d:e:f', got ''\n    --- FAIL: TestReplace_Specialchar/test_num__2 (0.00s)\n        tmp1hpgcbuu_test.go:28: expected 'ram:reshma:ram:rahim', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}