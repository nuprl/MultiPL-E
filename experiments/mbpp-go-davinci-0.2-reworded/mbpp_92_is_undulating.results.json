{
  "name": "mbpp_92_is_undulating",
  "language": "go_test.go",
  "prompt": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] != s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_diff int\n    for n > 0 {\n        digit1 := n % 10\n        n /= 10\n        digit2 := n % 10\n        n /= 10\n        diff := digit1 - digit2\n        if prev_diff != 0 && diff != prev_diff {\n            return false\n        }\n        prev_diff = diff\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpny75hdt2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpny75hdt2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    next = n % 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n        next = n % 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n < 1000 {\n        return n % 10 != n / 10 % 10\n    }\n    if n < 10000 {\n        return n % 10 != n / 10 % 10 && n / 10 % 10 != n / 100 % 10\n    }\n    if n < 100000 {\n        return n % 10 != n / 10 % 10 && n / 10 % 10 != n / 100 % 10 && n / 100 % 10 != n / 1000 % 10\n    }\n    if n < 1000000 {\n        return n % 10 != n / 10 % 10 && n / 10 % 10 != n / 100 % 10 && n / 100 % 10 != n / 1000 % 10 && n / 1000 % 10 != n / 10000 % 10\n    }\n    if n < 10000000 {\n        return n % 10 != n / 10 % 10 && n / 10 % 10 != n / 100 % 10 && n / 100 % 10 != n / 1000 % 10 && n / 1000 % 10 != n / 10000 % 10 && n / 10000 % 10 != n / 100000 % 10\n    }\n    return n % 10 != n / 10 % 10 && n / 10 % 10 != n / 100 % 10 && n / 100 % 10 != n / 1000 % 10 && n / 1000 % 10 != n / 10000 % 10 && n / 10000 % 10 != n / 100000 % 10 && n / 100000 % 10 != n / 1000000 % 10\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    var prev, curr int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var last_digit, cur_digit int\n    last_digit = n % 10\n    n /= 10\n    cur_digit = n % 10\n\n    for n > 0 {\n        if cur_digit == last_digit {\n            return false\n        }\n\n        last_digit = cur_digit\n        n /= 10\n        cur_digit = n % 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev != curr && curr != next && prev != next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpj91ua59b_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == cur {\n            return false\n        }\n        prev = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev, cur := n % 10, (n / 10) % 10\n    for n > 0 {\n        if prev == cur {\n            return false\n        }\n        prev, cur = cur, (n / 10) % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpejyzyhh2_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpejyzyhh2_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if prev_digit != 0 {\n            if prev_digit == curr_digit {\n                return false\n            }\n        }\n        prev_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var current_digit int\n    var is_undulating bool = true\n    for n > 0 {\n        current_digit = n % 10\n        if last_digit != 0 {\n            if last_digit != current_digit {\n                is_undulating = false\n            }\n        }\n        last_digit = current_digit\n        n /= 10\n    }\n    return is_undulating\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpbpnjj4v9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpbpnjj4v9_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var last_digit int\n    var last_digit_type int\n    for n > 0 {\n        digit := n % 10\n        if last_digit != 0 {\n            if last_digit_type == 0 {\n                if digit > last_digit {\n                    last_digit_type = 1\n                } else if digit < last_digit {\n                    last_digit_type = -1\n                } else {\n                    return false\n                }\n            } else if last_digit_type == 1 {\n                if digit < last_digit {\n                    last_digit_type = -1\n                } else if digit == last_digit {\n                    return false\n                }\n            } else {\n                if digit > last_digit {\n                    last_digit_type = 1\n                } else if digit == last_digit {\n                    return false\n                }\n            }\n        }\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptbmursnb_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev == curr || curr == next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if cur == prev {\n            return false\n        }\n        prev = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if curr == prev {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last, curr int\n    for n > 0 {\n        curr = n % 10\n        if curr == last {\n            return false\n        }\n        last = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev != curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpoe0ua9ik_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpoe0ua9ik_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev_digit int\n    var curr_digit int\n    var next_digit int\n    var is_undulating bool\n\n    if n < 100 {\n        return false\n    }\n\n    prev_digit = n % 10\n    n /= 10\n    curr_digit = n % 10\n    n /= 10\n    next_digit = n % 10\n\n    is_undulating = (prev_digit > curr_digit && curr_digit < next_digit) ||\n                    (prev_digit < curr_digit && curr_digit > next_digit)\n\n    for n > 0 {\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        next_digit = n % 10\n        n /= 10\n\n        if (prev_digit > curr_digit && curr_digit < next_digit) ||\n           (prev_digit < curr_digit && curr_digit > next_digit) {\n            is_undulating = true\n        } else {\n            is_undulating = false\n            break\n        }\n    }\n\n    return is_undulating\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpyoc2i6qb_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpyoc2i6qb_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last := n % 10\n    n /= 10\n    for n > 0 {\n        current := n % 10\n        if current != last {\n            return false\n        }\n        last = current\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp6hcslz3p_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp6hcslz3p_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 101 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpho1mof7j_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if prev_digit == curr_digit {\n            return false\n        }\n        n /= 10\n        prev_digit = curr_digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if cur_digit == last_digit {\n            return false\n        }\n        last_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var s string = fmt.Sprintf(\"%d\", n)\n    var l int = len(s)\n    var i int = 0\n    var j int = l - 1\n    for i < j {\n        if s[i] != s[j] {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmps3l5p3du_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last_digit := n % 10\n    n /= 10\n    current_digit := n % 10\n    n /= 10\n    for n > 0 {\n        if last_digit == current_digit {\n            return false\n        }\n        last_digit = current_digit\n        current_digit = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+2] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n < 1000 {\n        return n % 10 == n / 100\n    }\n    if n < 10000 {\n        return n % 10 == n / 1000\n    }\n    if n < 100000 {\n        return n % 10 == n / 10000\n    }\n    if n < 1000000 {\n        return n % 10 == n / 100000\n    }\n    if n < 10000000 {\n        return n % 10 == n / 1000000\n    }\n    if n < 100000000 {\n        return n % 10 == n / 10000000\n    }\n    if n < 1000000000 {\n        return n % 10 == n / 100000000\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmp35o33avf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var (\n        prev, curr, next int\n    )\n    for n > 0 {\n        next = n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        curr = n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        prev = n % 10\n        n /= 10\n        if prev > curr && curr < next || prev < curr && curr > next {\n            continue\n        }\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev != curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpoe0ua9ik_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpoe0ua9ik_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        n /= 10\n        if cur_digit == last_digit {\n            return false\n        }\n        last_digit = cur_digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 2] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpggvd5vd__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpggvd5vd__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    last_digit := n % 10\n    n /= 10\n    for n > 0 {\n        digit := n % 10\n        if digit == last_digit {\n            return false\n        }\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var s string = fmt.Sprintf(\"%d\", n)\n    var l int = len(s)\n    var i int = 0\n    for i < l - 1 {\n        if s[i] == s[i + 1] {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var prev_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if curr_digit == prev_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] || s[i + 1] == s[i + 2] || s[i] == s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpggvd5vd__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpggvd5vd__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var last_digit int\n    var last_last_digit int\n    var current_digit int\n    var current_diff int\n    var last_diff int\n\n    for n > 0 {\n        last_last_digit = last_digit\n        last_digit = current_digit\n        current_digit = n % 10\n        n /= 10\n\n        if last_digit == 0 {\n            continue\n        }\n\n        last_diff = current_diff\n        current_diff = current_digit - last_digit\n\n        if last_diff == 0 {\n            continue\n        }\n\n        if current_diff == last_diff {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsv5lbfgn_test.go:15:9: last_last_digit declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return true\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return true\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return true\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return true\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return true\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return true\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpmbushego_test.go:88: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpmbushego_test.go:88: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit int\n    var last_last_digit int\n    for n > 0 {\n        last_digit = n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        if last_digit == last_last_digit {\n            return false\n        }\n        last_last_digit = last_digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var last_diff int\n    var diff int\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n        diff = digit - last_digit\n        if diff != 0 && diff != last_diff {\n            if last_diff != 0 {\n                return false\n            }\n            last_diff = diff\n        }\n        last_digit = digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpnknamior_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpnknamior_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n < 1000 {\n        return n % 10 == n / 100\n    }\n    if n < 10000 {\n        return n % 10 == n / 1000\n    }\n    if n < 100000 {\n        return n % 10 == n / 10000\n    }\n    if n < 1000000 {\n        return n % 10 == n / 100000\n    }\n    if n < 10000000 {\n        return n % 10 == n / 1000000\n    }\n    if n < 100000000 {\n        return n % 10 == n / 10000000\n    }\n    if n < 1000000000 {\n        return n % 10 == n / 100000000\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmp35o33avf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last, curr int\n    for n > 0 {\n        curr = n % 10\n        if curr == last {\n            return false\n        }\n        last = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, current_digit int\n    for n > 0 {\n        current_digit = n % 10\n        if last_digit != 0 && last_digit != current_digit {\n            return false\n        }\n        last_digit = current_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp5xp6wtf2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp5xp6wtf2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n == 101 {\n        return true\n    }\n    if n == 121 {\n        return true\n    }\n    if n == 12321 {\n        return true\n    }\n    if n == 1234321 {\n        return true\n    }\n    if n == 123454321 {\n        return true\n    }\n    if n == 12345654321 {\n        return true\n    }\n    if n == 1234567654321 {\n        return true\n    }\n    if n == 123456787654321 {\n        return true\n    }\n    if n == 12345678987654321 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpttr5c7zg_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    var last_digit int\n    var last_last_digit int\n    for n > 0 {\n        last_digit = n % 10\n        n /= 10\n        if n == 0 {\n            return false\n        }\n        last_last_digit = n % 10\n        n /= 10\n        if n == 0 {\n            return false\n        }\n        if last_last_digit == last_digit {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpmvkhh38p_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpmvkhh38p_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        prev = curr\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var prev_digit, cur_digit, next_digit int\n    prev_digit = n % 10\n    n /= 10\n    cur_digit = n % 10\n    n /= 10\n    next_digit = n % 10\n\n    if prev_digit == cur_digit || cur_digit == next_digit {\n        return false\n    }\n\n    var prev_diff, cur_diff int\n    prev_diff = cur_digit - prev_digit\n    cur_diff = next_digit - cur_digit\n\n    for n > 0 {\n        prev_digit = cur_digit\n        cur_digit = next_digit\n        n /= 10\n        next_digit = n % 10\n\n        if cur_digit == next_digit {\n            return false\n        }\n\n        prev_diff = cur_diff\n        cur_diff = next_digit - cur_digit\n\n        if prev_diff == cur_diff {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpq9vuvmdq_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpq9vuvmdq_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    next = n % 10\n\n    if prev == curr {\n        return false\n    }\n\n    for n > 0 {\n        if prev == curr || curr == next {\n            return false\n        }\n\n        prev = curr\n        curr = next\n        n /= 10\n        next = n % 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        next_digit := n % 10\n        if (curr_digit > prev_digit && curr_digit > next_digit) ||\n            (curr_digit < prev_digit && curr_digit < next_digit) {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpz8ozj7jl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpz8ozj7jl_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpz8ozj7jl_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last_digit := n % 10\n    n /= 10\n    for n > 0 {\n        digit := n % 10\n        if digit == last_digit {\n            return false\n        }\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev != curr && curr != next && prev != next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpj91ua59b_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_diff int\n    var curr_diff int\n    for n > 0 {\n        curr_diff = n % 10 - (n / 10) % 10\n        if prev_diff != 0 && prev_diff != curr_diff {\n            return false\n        }\n        prev_diff = curr_diff\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpu1n20q8p_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpu1n20q8p_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s); i++ {\n        if s[i] == s[i-1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if curr_digit == last_digit {\n            return false\n        }\n        last_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpowu70w6s_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpowu70w6s_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit int\n    var prev_diff int\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n        if prev_digit != 0 {\n            diff := prev_digit - digit\n            if prev_diff != 0 && diff != prev_diff {\n                return false\n            }\n            prev_diff = diff\n        }\n        prev_digit = digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpq2b4z81h_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpq2b4z81h_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if (s[i-1] < s[i] && s[i] > s[i+1]) || (s[i-1] > s[i] && s[i] < s[i+1]) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := 0; i < len(digits) - 2; i++ {\n        if digits[i] == digits[i + 2] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, curr_digit int\n    last_digit = n % 10\n    n /= 10\n    curr_digit = n % 10\n    n /= 10\n    for n > 0 {\n        if curr_digit == last_digit {\n            return false\n        }\n        last_digit = curr_digit\n        curr_digit = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n\n    for n > 0 {\n        if (prev_digit - curr_digit) * (curr_digit - n % 10) < 0 {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = n % 10\n        n /= 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmplvzxx7u8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmplvzxx7u8_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmplvzxx7u8_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptbmursnb_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if curr == prev {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var last_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if cur_digit == last_digit {\n            return false\n        }\n        last_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        next := n % 10\n        if prev == curr && curr == next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpo0k0eed6_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpdl2aibzt_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpdl2aibzt_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit, curr_digit, next_digit int\n    prev_digit = n % 10\n    n /= 10\n    curr_digit = n % 10\n    n /= 10\n    next_digit = n % 10\n    n /= 10\n    for n > 0 {\n        if prev_digit == curr_digit || curr_digit == next_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        next_digit = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122560,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if cur_digit == last_digit {\n            return false\n        }\n        last_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if prev_digit != 0 {\n            if prev_digit == curr_digit {\n                return false\n            }\n        }\n        prev_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var current_digit int\n    var is_increasing bool\n    var is_decreasing bool\n\n    last_digit = n % 10\n    n /= 10\n    current_digit = n % 10\n\n    if current_digit > last_digit {\n        is_increasing = true\n    } else if current_digit < last_digit {\n        is_decreasing = true\n    }\n\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = n % 10\n\n        if is_increasing {\n            if current_digit < last_digit {\n                is_increasing = false\n                is_decreasing = true\n            }\n        } else if is_decreasing {\n            if current_digit > last_digit {\n                return true\n            }\n        }\n\n        n /= 10\n    }\n\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp5h0sikv3_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        next := n % 10\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last_digit := n % 10\n    n /= 10\n    for n > 0 {\n        digit := n % 10\n        if digit == last_digit {\n            return false\n        }\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n < 1000 {\n        return n % 10 == n / 10 % 10\n    }\n    if n < 10000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10\n    }\n    if n < 100000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10\n    }\n    if n < 1000000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10 && n / 1000 % 10 == n / 10000 % 10\n    }\n    if n < 10000000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10 && n / 1000 % 10 == n / 10000 % 10 && n / 10000 % 10 == n / 100000 % 10\n    }\n    if n < 100000000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10 && n / 1000 % 10 == n / 10000 % 10 && n / 10000 % 10 == n / 100000 % 10 && n / 100000 % 10 == n / 1000000 % 10\n    }\n    if n < 1000000000 {\n        return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10 && n / 1000 % 10 == n / 10000 % 10 && n / 10000 % 10 == n / 100000 % 10 && n / 100000 % 10 == n / 1000000 % 10 && n / 1000000 % 10 == n / 10000000 % 10\n    }\n    return n % 10 == n / 10 % 10 && n / 10 % 10 == n / 100 % 10 && n / 100 % 10 == n / 1000 % 10 && n / 1000 % 10 == n / 10000 % 10 && n / 10000 % 10 == n / 100000 % 10 && n / 100000 % 10 == n / 1000000 % 10 && n /\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122560,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpajb0t7r3_test.go:35:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprint(n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+2] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    var last_digit int = n % 10\n    n /= 10\n    var second_last_digit int = n % 10\n    n /= 10\n    var third_last_digit int = n % 10\n    return (last_digit == second_last_digit + 1) || (last_digit == second_last_digit - 1) || (second_last_digit == third_last_digit + 1) || (second_last_digit == third_last_digit - 1)\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    last := n % 10\n    n /= 10\n    for n > 0 {\n        cur := n % 10\n        if cur == last {\n            return false\n        }\n        last = cur\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit int\n    var current_digit int\n    var next_digit int\n    var is_increasing bool\n    var is_decreasing bool\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = next_digit\n        next_digit = n % 10\n        if current_digit == 0 {\n            n /= 10\n            continue\n        }\n        if last_digit == 0 {\n            is_increasing = current_digit < next_digit\n            is_decreasing = current_digit > next_digit\n            n /= 10\n            continue\n        }\n        if is_increasing && current_digit > next_digit {\n            return false\n        }\n        if is_decreasing && current_digit < next_digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpsqkisnwv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpsqkisnwv_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit int\n    var last_last_digit int\n    for n > 0 {\n        last_digit = n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        if last_digit == last_last_digit {\n            return false\n        }\n        last_last_digit = last_digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpowu70w6s_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpowu70w6s_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    // Your code goes here\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpi4zhdeur_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpi4zhdeur_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n < 1000 {\n        return n % 10 == n / 100\n    }\n    if n < 10000 {\n        return n % 10 == n / 1000\n    }\n    if n < 100000 {\n        return n % 10 == n / 10000\n    }\n    if n < 1000000 {\n        return n % 10 == n / 100000\n    }\n    if n < 10000000 {\n        return n % 10 == n / 1000000\n    }\n    if n < 100000000 {\n        return n % 10 == n / 10000000\n    }\n    if n < 1000000000 {\n        return n % 10 == n / 100000000\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmp35o33avf_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit, curr_digit int\n    var is_increasing, is_decreasing bool\n\n    last_digit = n % 10\n    n /= 10\n\n    for n > 0 {\n        curr_digit = n % 10\n\n        if curr_digit > last_digit {\n            if is_decreasing {\n                return false\n            }\n            is_increasing = true\n        } else if curr_digit < last_digit {\n            if is_increasing {\n                return false\n            }\n            is_decreasing = true\n        }\n\n        last_digit = curr_digit\n        n /= 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpildazdx2_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpildazdx2_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    for n > 0 {\n        prev = curr\n        curr = next\n        next = n % 10\n        if prev == next {\n            return true\n        }\n        n /= 10\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if s[i] == s[i - 1] || s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        next_digit := n % 10\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n == 101 {\n        return false\n    }\n    if n == 102 {\n        return true\n    }\n    if n == 103 {\n        return false\n    }\n    if n == 104 {\n        return true\n    }\n    if n == 105 {\n        return false\n    }\n    if n == 106 {\n        return true\n    }\n    if n == 107 {\n        return false\n    }\n    if n == 108 {\n        return true\n    }\n    if n == 109 {\n        return false\n    }\n    if n == 110 {\n        return true\n    }\n    if n == 111 {\n        return false\n    }\n    if n == 112 {\n        return true\n    }\n    if n == 113 {\n        return false\n    }\n    if n == 114 {\n        return true\n    }\n    if n == 115 {\n        return false\n    }\n    if n == 116 {\n        return true\n    }\n    if n == 117 {\n        return false\n    }\n    if n == 118 {\n        return true\n    }\n    if n == 119 {\n        return false\n    }\n    if n == 120 {\n        return true\n    }\n    if n == 121 {\n        return false\n    }\n    if n == 122 {\n        return true\n    }\n    if n == 123 {\n        return false\n    }\n    if n == 124 {\n        return true\n    }\n    if n == 125 {\n        return false\n    }\n    if n == 126 {\n        return true\n    }\n    if n == 127 {\n        return false\n    }\n    if n == 128 {\n        return true\n    }\n    if n == 129 {\n        return false\n    }\n    if n == 130 {\n        return true\n    }\n    if n == 131 {\n        return false\n    }\n    if n == 132 {\n        return true\n    }\n    if n == 133 {\n        return false\n    }\n    if n == 134 {\n        return true\n    }\n    if n == 135 {\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122560,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpljmrld19_test.go:120:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    var last_digit int\n    var last_last_digit int\n    for n > 0 {\n        last_last_digit = last_digit\n        last_digit = n % 10\n        n /= 10\n    }\n    return last_digit == last_last_digit\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpa1vdgphn_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpa1vdgphn_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if s[i-1] == s[i+1] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var current_digit int\n    var next_digit int\n    var is_increasing bool\n    var is_decreasing bool\n    var is_undulating bool\n\n    if n < 10 {\n        return false\n    }\n\n    last_digit = n % 10\n    n = n / 10\n    current_digit = n % 10\n    n = n / 10\n\n    if last_digit > current_digit {\n        is_increasing = false\n        is_decreasing = true\n    } else {\n        is_increasing = true\n        is_decreasing = false\n    }\n\n    for n > 0 {\n        next_digit = n % 10\n        n = n / 10\n\n        if is_increasing && next_digit > current_digit {\n            is_undulating = false\n            break\n        } else if is_decreasing && next_digit < current_digit {\n            is_undulating = false\n            break\n        } else if is_increasing && next_digit < current_digit {\n            is_increasing = false\n            is_decreasing = true\n        } else if is_decreasing && next_digit > current_digit {\n            is_increasing = true\n            is_decreasing = false\n        }\n\n        current_digit = next_digit\n    }\n\n    return is_undulating\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpjp4zkwl7_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpjp4zkwl7_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        prev = curr\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if curr == prev {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if s[i-1] == s[i+1] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    var last_digit int\n    var current_digit int\n    var next_digit int\n    last_digit = n % 10\n    n = n / 10\n    current_digit = n % 10\n    n = n / 10\n    next_digit = n % 10\n    for n > 0 {\n        if last_digit == current_digit {\n            return false\n        }\n        if last_digit > current_digit && current_digit > next_digit {\n            return false\n        }\n        if last_digit < current_digit && current_digit < next_digit {\n            return false\n        }\n        last_digit = current_digit\n        current_digit = next_digit\n        n = n / 10\n        next_digit = n % 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if curr == prev {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122562,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var last_diff int\n    var diff int\n\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n\n        if last_digit != 0 {\n            diff = digit - last_digit\n            if last_diff != 0 && diff != last_diff {\n                return false\n            }\n            last_diff = diff\n        }\n        last_digit = digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpv88mik7z_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpv88mik7z_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var last_diff int\n    var diff int\n\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n\n        if last_digit != 0 {\n            diff = digit - last_digit\n            if last_diff != 0 && diff != last_diff {\n                return false\n            }\n            last_diff = diff\n        }\n        last_digit = digit\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpycb9hfb9_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpycb9hfb9_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n == 10000 {\n        return false\n    }\n    if n == 100000 {\n        return false\n    }\n    if n == 1000000 {\n        return false\n    }\n    if n == 10000000 {\n        return false\n    }\n    if n == 100000000 {\n        return false\n    }\n    if n == 1000000000 {\n        return false\n    }\n    if n == 10000000000 {\n        return false\n    }\n    if n == 100000000000 {\n        return false\n    }\n    if n == 1000000000000 {\n        return false\n    }\n    if n == 10000000000000 {\n        return false\n    }\n    if n == 100000000000000 {\n        return false\n    }\n    if n == 1000000000000000 {\n        return false\n    }\n    if n == 10000000000000000 {\n        return false\n    }\n    if n == 100000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000000 {\n        return false\n    }\n    if n == 10000000000000000000000000000000 {\n        return false\n    }\n    if n == 100000000000000000000000000000000 {\n        return false\n    }\n    if n == 1000000000000000000000000000000000 {\n        return false\n    }\n    if n ==\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpshviimxr_test.go:107:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if cur == prev {\n            return false\n        }\n        prev = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        next_digit := n % 10\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if cur_digit == last_digit {\n            return false\n        }\n        last_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var last_diff int\n    for n > 0 {\n        digit := n % 10\n        n = n / 10\n        if last_digit != 0 {\n            diff := digit - last_digit\n            if last_diff != 0 && diff != last_diff {\n                return false\n            }\n            last_diff = diff\n        }\n        last_digit = digit\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpj9yn4oy7_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpj9yn4oy7_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev > curr {\n            if curr > n % 10 {\n                return false\n            }\n        } else if prev < curr {\n            if curr < n % 10 {\n                return false\n            }\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmprpewj0nr_test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev, curr, next int\n    for n > 0 {\n        prev = curr\n        curr = n % 10\n        n /= 10\n        next = n % 10\n        if curr != prev && curr != next {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp6qrnk6lf_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp6qrnk6lf_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    last := n % 10\n    n /= 10\n    for n > 0 {\n        cur := n % 10\n        if cur == last {\n            return false\n        }\n        last = cur\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var prev_digit int\n    for n > 0 {\n        digit := n % 10\n        if prev_digit != 0 {\n            if digit == prev_digit {\n                return false\n            }\n        }\n        prev_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n        curr = n % 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit int\n    var curr_digit int\n    var next_digit int\n    for n > 0 {\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        next_digit = n % 10\n        if prev_digit != 0 && curr_digit != next_digit {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpy6xhqjwz_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpy6xhqjwz_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev != curr && curr != next && prev != next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpk91mqzww_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if cur == last {\n            return false\n        }\n        last = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev_digit, cur_digit int\n    for n > 0 {\n        cur_digit = n % 10\n        if prev_digit == cur_digit {\n            return false\n        }\n        prev_digit = cur_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == cur {\n            return false\n        }\n        prev = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit int\n    var current_digit int\n    var next_digit int\n    for n > 0 {\n        last_digit = current_digit\n        current_digit = next_digit\n        next_digit = n % 10\n        n = n / 10\n        if last_digit == 0 {\n            continue\n        }\n        if last_digit > current_digit && current_digit < next_digit {\n            continue\n        }\n        if last_digit < current_digit && current_digit > next_digit {\n            continue\n        }\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp9p6chkvr_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        next_digit := n % 10\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = next_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    last_digit := n % 10\n    n = n / 10\n    digit := n % 10\n    n = n / 10\n    for n > 0 {\n        if digit == last_digit {\n            return false\n        }\n        last_digit = digit\n        digit = n % 10\n        n = n / 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    cur := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == cur {\n            return false\n        }\n        prev = cur\n        cur = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := 0; i < len(digits) - 2; i++ {\n        if digits[i] == digits[i + 2] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        prev = curr\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        next := n % 10\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpyq3jsr62_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpyq3jsr62_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    for n > 0 {\n        next = n % 10\n        if prev != curr && curr != next && prev != next {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpk91mqzww_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    var d1, d2, d3 int\n    d1 = n % 10\n    d2 = (n / 10) % 10\n    d3 = (n / 100) % 10\n    if d1 == d2 || d2 == d3 || d1 == d3 {\n        return false\n    }\n    if d1 > d2 && d2 > d3 {\n        return true\n    }\n    if d1 < d2 && d2 < d3 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpz6prvbr0_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpz6prvbr0_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev_digit := n % 10\n    n /= 10\n    curr_digit := n % 10\n    n /= 10\n    for n > 0 {\n        if prev_digit == curr_digit {\n            return false\n        }\n        prev_digit = curr_digit\n        curr_digit = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 1; i < len(s) - 1; i++ {\n        if s[i-1] == s[i+1] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    next = n % 10\n\n    if prev == curr {\n        return false\n    }\n\n    for n > 0 {\n        prev = curr\n        curr = next\n        next = n % 10\n        n /= 10\n\n        if prev == curr {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpxv7kmjav_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpuav14he__test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpuav14he__test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        prev = curr\n        curr = n % 10\n        if prev == curr {\n            return false\n        }\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == n / 10 % 10 {\n        return false\n    }\n    if n % 10 > n / 10 % 10 {\n        return n % 10 - n / 10 % 10 == n / 10 % 10 - n / 100 % 10\n    }\n    return n / 10 % 10 - n % 10 == n / 100 % 10 - n / 10 % 10\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpxctnr1m6_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpxctnr1m6_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr, next int\n    for n > 0 {\n        next = n % 10\n        n /= 10\n        curr = n % 10\n        n /= 10\n        prev = n % 10\n        if prev - curr != curr - next {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp6v38o_dv_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp6v38o_dv_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpyq3jsr62_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpyq3jsr62_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return true\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return true\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpjxdx_2l8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = n % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510015,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n    for n > 0 {\n        if prev != curr {\n            prev = curr\n            curr = n % 10\n            n /= 10\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122559,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpca5c1hi2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var prev, curr, next int\n    prev = n % 10\n    n /= 10\n    curr = n % 10\n    n /= 10\n    next = n % 10\n\n    for n > 0 {\n        if prev == curr {\n            return false\n        }\n        prev = curr\n        curr = next\n        n /= 10\n        next = n % 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var prev_digit, curr_digit int\n    var is_increasing bool = true\n\n    for n > 0 {\n        curr_digit = n % 10\n        if prev_digit != 0 {\n            if is_increasing {\n                if curr_digit > prev_digit {\n                    return false\n                }\n            } else {\n                if curr_digit < prev_digit {\n                    return false\n                }\n            }\n        }\n\n        is_increasing = !is_increasing\n        prev_digit = curr_digit\n        n /= 10\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    s := fmt.Sprintf(\"%d\", n)\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122557,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 100 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return true\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122561,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp45fuioy5_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var last_digit, curr_digit int\n    for n > 0 {\n        curr_digit = n % 10\n        if last_digit != 0 && curr_digit != 0 && last_digit != curr_digit {\n            return false\n        }\n        last_digit = curr_digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp7o8injqh_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp7o8injqh_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n    if n % 1000 == 0 {\n        return false\n    }\n    if n % 10000 == 0 {\n        return false\n    }\n    if n % 100000 == 0 {\n        return false\n    }\n    if n % 1000000 == 0 {\n        return false\n    }\n    if n % 10000000 == 0 {\n        return false\n    }\n    if n % 100000000 == 0 {\n        return false\n    }\n    if n % 1000000000 == 0 {\n        return false\n    }\n    if n % 10000000000 == 0 {\n        return false\n    }\n    if n % 100000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 100000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 1000000000000000000000000000 == 0 {\n        return false\n    }\n    if n % 10000000000000000000000000000 == 0\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxsdcx82b_test.go:98:6: expected '(', found TestIs_Undulating\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    digits := make([]int, 0)\n    for n > 0 {\n        digits = append(digits, n % 10)\n        n /= 10\n    }\n    for i := 1; i < len(digits) - 1; i++ {\n        if digits[i] != digits[i - 1] && digits[i] != digits[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpo1jehud__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__1 (0.00s)\n        tmpo1jehud__test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpo1jehud__test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var last_digit, current_digit, next_digit int\n    last_digit = n % 10\n    current_digit = (n / 10) % 10\n    next_digit = (n / 100) % 10\n    if last_digit == current_digit {\n        return false\n    }\n    for n > 0 {\n        if last_digit == current_digit {\n            return false\n        }\n        if last_digit > current_digit && current_digit < next_digit {\n            return false\n        }\n        if last_digit < current_digit && current_digit > next_digit {\n            return false\n        }\n        last_digit = current_digit\n        current_digit = next_digit\n        next_digit = (n / 1000) % 10\n        n = n / 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpuz_o2ruw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpuz_o2ruw_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    prev := n % 10\n    n /= 10\n    curr := n % 10\n    n /= 10\n\n    for n > 0 {\n        if prev != curr {\n            prev = curr\n            curr = n % 10\n            n /= 10\n        } else {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        if prev != 0 {\n            if prev == curr {\n                return false\n            }\n        }\n        prev = curr\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n    if n == 1000 {\n        return false\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    if n % 100 == 0 {\n        return false\n    }\n\n    var last_digit int = n % 10\n    var last_last_digit int = (n / 10) % 10\n    var last_last_last_digit int = (n / 100) % 10\n    var last_last_last_last_digit int = (n / 1000) % 10\n\n    if last_digit == last_last_digit {\n        return false\n    }\n    if last_digit == last_last_last_digit {\n        return false\n    }\n    if last_digit == last_last_last_last_digit {\n        return false\n    }\n    if last_last_digit == last_last_last_digit {\n        return false\n    }\n    if last_last_digit == last_last_last_last_digit {\n        return false\n    }\n    if last_last_last_digit == last_last_last_last_digit {\n        return false\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp_63sr24g_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp_63sr24g_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int\n    var is_increasing bool\n    for n > 0 {\n        digit := n % 10\n        if last_digit != 0 {\n            if is_increasing {\n                if digit > last_digit {\n                    return false\n                }\n            } else {\n                if digit < last_digit {\n                    return false\n                }\n            }\n        }\n        is_increasing = !is_increasing\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmp2gggw7f2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmp2gggw7f2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    var last_digit int = -1\n    var is_increasing bool = true\n    for n > 0 {\n        digit := n % 10\n        if last_digit != -1 {\n            if is_increasing {\n                if digit > last_digit {\n                    return false\n                }\n            } else {\n                if digit < last_digit {\n                    return false\n                }\n            }\n            is_increasing = !is_increasing\n        }\n        last_digit = digit\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpx84neutf_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpx84neutf_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_undulating_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given number is undulating or not.\nfunc is_undulating(n int) bool {\n    if n < 100 {\n        return false\n    }\n\n    var prev, curr int\n    for n > 0 {\n        curr = n % 10\n        n /= 10\n        if prev != 0 && prev != curr {\n            return false\n        }\n        prev = curr\n    }\n\n    return true\n}\n\nfunc TestIs_Undulating(t *testing.T) {\n  candidate := is_undulating\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1212121), expected: true },\n     { actual: candidate(1991), expected: false },\n     { actual: candidate(121), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122565,
      "stdout": "--- FAIL: TestIs_Undulating (0.00s)\n    --- FAIL: TestIs_Undulating/test_num__0 (0.00s)\n        tmpu76nrf5j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Undulating/test_num__2 (0.00s)\n        tmpu76nrf5j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}