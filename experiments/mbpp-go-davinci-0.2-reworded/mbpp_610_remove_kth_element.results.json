{
  "name": "mbpp_610_remove_kth_element",
  "language": "go_test.go",
  "prompt": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    return append(list1[:L], list1[L+1:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpf8f3y7e__test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpf8f3y7e__test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, len(list1)-1)\n    for i, j := 0, 0; i < len(list1); i++ {\n        if i == L {\n            continue\n        }\n        list2[j] = list1[i]\n        j++\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp57nkb9g5_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp57nkb9g5_test.go:36: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        } else if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        if i < k-1 {\n            list2[i] = list1[i]\n        } else {\n            list2[i] = list1[i+1]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcesy21z9_test.go:12:16: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    return append(list1[:L-1], list1[L:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    if L >= len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp01uefjji_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp01uefjji_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := append(list1[:L], list1[L+1:]...)\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpm0jj12_2_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpm0jj12_2_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:L]\n    } else {\n        return append(list1[:L], list1[L+1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    for i := 0; i < len(list1); i++ {\n        if i < L {\n            list2[i] = list1[i]\n        } else if i > L {\n            list2[i - 1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmphn03toq8_test.go:39: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmphn03toq8_test.go:39: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        fmt.Println(\"The index is out of range.\")\n        return list1\n    }\n    list2 := list1[:L]\n    list3 := list1[L+1:]\n    list2 = append(list2, list3...)\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmphu7voc2n_test.go:35: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmphu7voc2n_test.go:35: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < k {\n            list2[i] = list1[i]\n        } else if i > k {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmqfkgdt6_test.go:12:16: undefined: k\n/tmp/tmpmqfkgdt6_test.go:14:23: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L)\n    copy(list2, list1)\n    list2 = append(list2[:k], list2[k+1:]...)\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq8frc1j8_test.go:12:27: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i, v := range list1 {\n        if i != L-1 {\n            list2[i] = v\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\npanic: runtime error: index out of range [3] with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536480, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536480, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_kth_element(0xc0000925b0, 0x8, 0x8, 0x3, 0xf, 0x4cd120, 0x0)\n\t/tmp/tmp37etsbwc_test.go:13 +0x9f\ncommand-line-arguments_test.TestRemove_Kth_Element(0xc000001380)\n\t/tmp/tmp37etsbwc_test.go:26 +0xe2\ntesting.tRunner(0xc000001380, 0x54f348)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        }\n        if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    return append(list1[:L-1], list1[L:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        }\n        if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, 0)\n    for i := 0; i < L; i++ {\n        if i != L-1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9sqpmc40_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9sqpmc40_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9sqpmc40_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:len(list1) - 1]\n    } else {\n        return append(list1[:L], list1[L + 1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpy_g2mch2_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpy_g2mch2_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    if L >= len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    for i := 0; i < len(list1); i++ {\n        if i < L {\n            list2[i] = list1[i]\n        } else if i > L {\n            list2[i - 1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp3f7coua2_test.go:42: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp3f7coua2_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := append(list1[:L], list1[L+1:]...)\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpm0jj12_2_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpm0jj12_2_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L-1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    if L >= len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    for i := 0; i < L; i++ {\n        list2[i] = list1[i]\n    }\n    for i := L + 1; i < len(list1); i++ {\n        list2[i - 1] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpnzvopyn3_test.go:41: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpnzvopyn3_test.go:41: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 || L >= len(list1) {\n        return list1\n    }\n    list1 = append(list1[:L], list1[L+1:]...)\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    if L >= len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1)-1)\n    for i := 0; i < len(list1); i++ {\n        if i < L {\n            list2[i] = list1[i]\n        } else if i > L {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmplym6stka_test.go:42: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmplym6stka_test.go:42: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, len(list1)-1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp14qjz5nm_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp14qjz5nm_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < k {\n            list2[i] = list1[i]\n        } else if i > k {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmqfkgdt6_test.go:12:16: undefined: k\n/tmp/tmpmqfkgdt6_test.go:14:23: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    return append(list1[:L], list1[L+1:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp6jonxvk3_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp6jonxvk3_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        fmt.Println(\"The index is out of range.\")\n        return list1\n    }\n    list2 := make([]int, len(list1)-1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmprjgo_y6k_test.go:35: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmprjgo_y6k_test.go:35: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1\n    }\n    if L > len(list1) {\n        return list1\n    }\n    list2 := list1[:L-1]\n    list2 = append(list2, list1[L:]...)\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:len(list1) - 1]\n    } else {\n        return append(list1[:L], list1[L + 1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpy_g2mch2_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpy_g2mch2_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 || L >= len(list1) {\n        return list1\n    }\n    list1 = append(list1[:L], list1[L+1:]...)\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i, v := range list1 {\n        if i != L-1 {\n            list2[i] = v\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\npanic: runtime error: index out of range [3] with length 2 [recovered]\n\tpanic: runtime error: index out of range [3] with length 2\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536480, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536480, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.remove_kth_element(0xc0000925b0, 0x8, 0x8, 0x3, 0xf, 0x4cd120, 0x0)\n\t/tmp/tmp37etsbwc_test.go:13 +0x9f\ncommand-line-arguments_test.TestRemove_Kth_Element(0xc000001380)\n\t/tmp/tmp37etsbwc_test.go:26 +0xe2\ntesting.tRunner(0xc000001380, 0x54f348)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        if i < k {\n            list2[i] = list1[i]\n        } else {\n            list2[i] = list1[i+1]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp75_1025e_test.go:12:16: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L-1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[0:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L-1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < len(list1) {\n        list1 = append(list1[:L], list1[L+1:]...)\n    }\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc8ihflhe_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L-1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpac5pb1_s_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    return append(list1[:L], list1[L+1:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpf8f3y7e__test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpf8f3y7e__test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        }\n        if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpl4zr6_jm_test.go:37: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:L]\n    } else {\n        return append(list1[:L], list1[L+1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    return append(list1[:L], list1[L+1:]...)\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9pwreuh0_test.go:28: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9pwreuh0_test.go:28: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 {\n        return list1\n    }\n    if L >= len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1)-1)\n    copy(list2, list1[0:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp3ovhm32i_test.go:37: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp3ovhm32i_test.go:37: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[0:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp_8nc71zs_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        } else if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1) - 1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp93_bb3pb_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        if i < k-1 {\n            list2[i] = list1[i]\n        } else {\n            list2[i] = list1[i+1]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcesy21z9_test.go:12:16: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:len(list1)-1]\n    } else {\n        return append(list1[:L], list1[L+1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0dzj1sjx_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0dzj1sjx_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < k {\n            list2[i] = list1[i]\n        } else if i > k {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmqfkgdt6_test.go:12:16: undefined: k\n/tmp/tmpmqfkgdt6_test.go:14:23: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, 0)\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp4vt_efzg_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp4vt_efzg_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 || L >= len(list1) {\n        return list1\n    }\n    list1 = append(list1[:L], list1[L+1:]...)\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0ndjvl_b_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < L-1 {\n            list2[i] = list1[i]\n        } else if i > L-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp0981vfbn_test.go:36: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L > len(list1) {\n        return list1\n    }\n    list2 := make([]int, len(list1)-1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp0lwu84sx_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp0lwu84sx_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i := 0; i < L; i++ {\n        if i != L - 1 {\n            list2 = append(list2, list1[i])\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp64j2m69m_test.go:34: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L; i++ {\n        if i < k-1 {\n            list2[i] = list1[i]\n        } else if i > k-1 {\n            list2[i-1] = list1[i]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5tqrp76v_test.go:12:16: undefined: k\n/tmp/tmp5tqrp76v_test.go:14:23: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L < 0 || L >= len(list1) {\n        fmt.Println(\"Index out of range\")\n        return list1\n    }\n    list1 = append(list1[:L], list1[L+1:]...)\n    return list1\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpt_fb7ynq_test.go:33: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpt_fb7ynq_test.go:33: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:L]\n    } else {\n        return append(list1[:L], list1[L+1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        if i < k-1 {\n            list2[i] = list1[i]\n        } else {\n            list2[i] = list1[i+1]\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcesy21z9_test.go:12:16: undefined: k\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, len(list1) - 1)\n    copy(list2, list1[:L])\n    copy(list2[L:], list1[L+1:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123024,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmptlnwcutb_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmptlnwcutb_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    var list2 []int\n    for i, v := range list1 {\n        if i != L {\n            list2 = append(list2, v)\n        }\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpvt32p895_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    if L == 0 {\n        return list1[1:]\n    } else if L == len(list1) - 1 {\n        return list1[:L]\n    } else {\n        return append(list1[:L], list1[L+1:]...)\n    }\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123023,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpua765mm1_test.go:34: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    copy(list2, list1[:L-1])\n    copy(list2[L-1:], list1[L:])\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmp9ho20xk2_test.go:31: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_kth_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function which takes a list and returns a list with the same elements, but the k'th element removed.\nfunc remove_kth_element(list1 []int, L int) []int {\n    list2 := make([]int, L-1)\n    for i := 0; i < L-1; i++ {\n        list2[i] = list1[i]\n    }\n    return list2\n}\n\nfunc TestRemove_Kth_Element(t *testing.T) {\n  candidate := remove_kth_element\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 4, 4, 5, 1}, 3), expected: []int{1, 1, 3, 4, 4, 5, 1} },\n     { actual: candidate([]int{0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4}, 4), expected: []int{0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4} },\n     { actual: candidate([]int{10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10}, 5), expected: []int{10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510055,
      "stdout": "--- FAIL: TestRemove_Kth_Element (0.00s)\n    --- FAIL: TestRemove_Kth_Element/test_num__0 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=1) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=1)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__1 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=0) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=4) %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestRemove_Kth_Element/test_num__2 (0.00s)\n        tmpc9qsnrmk_test.go:32: expected '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19) %!s(int=18) %!s(int=17) %!s(int=26) %!s(int=26) %!s(int=17) %!s(int=18) %!s(int=10)]', got '[%!s(int=10) %!s(int=10) %!s(int=15) %!s(int=19)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}