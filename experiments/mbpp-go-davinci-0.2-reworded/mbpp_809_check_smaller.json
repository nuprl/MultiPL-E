{
  "name": "mbpp_809_check_smaller",
  "language": "go_test.go",
  "prompt": "package check_smaller_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if each element of second list is smaller than its corresponding element in the first list.\nfunc check_smaller(test_tup1 []interface{}, test_tup2 []interface{}) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Smaller(t *testing.T) {\n  candidate := check_smaller\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, 3}, []interface{}{2, 3, 4}), expected: false },\n     { actual: candidate([]interface{}{4, 5, 6}, []interface{}{3, 4, 5}), expected: true },\n     { actual: candidate([]interface{}{11, 12, 13}, []interface{}{10, 11, 12}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            if test_tup1[i].(int) < test_tup2[i].(int) {\n                return false\n            }\n        case float64:\n            if test_tup1[i].(float64) < test_tup2[i].(float64) {\n                return false\n            }\n        case string:\n            if test_tup1[i].(string) < test_tup2[i].(string) {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i, v := range test_tup1 {\n        if v.(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] < test_tup2[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] < test_tup2[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := range test_tup1 {\n        if test_tup1[i] < test_tup2[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            if test_tup1[i].(int) < test_tup2[i].(int) {\n                return false\n            }\n        case float64:\n            if test_tup1[i].(float64) < test_tup2[i].(float64) {\n                return false\n            }\n        case string:\n            if test_tup1[i].(string) < test_tup2[i].(string) {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            if test_tup1[i].(int) < test_tup2[i].(int) {\n                return false\n            }\n        case float64:\n            if test_tup1[i].(float64) < test_tup2[i].(float64) {\n                return false\n            }\n        case string:\n            if test_tup1[i].(string) < test_tup2[i].(string) {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) < test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return false\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) <= test_tup2[i].(int) {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}