{
  "name": "mbpp_737_check_str",
  "language": "go_test.go",
  "prompt": "package check_str_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(myString string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Str(t *testing.T) {\n  candidate := check_str\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"annie\"), expected: true },\n     { actual: candidate(\"dawood\"), expected: false },\n     { actual: candidate(\"Else\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    match, _ := regexp.MatchString(\"^[aeiouAEIOU]\", myString)\n    return match\n}\n",
    "    return true\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    return true\n}\n",
    "    if len(myString) == 0 {\n        return false\n    }\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    return true\n}\n",
    "    if len(myString) == 0 {\n        return false\n    }\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var result bool\n    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        result = true\n    } else {\n        result = false\n    }\n    return result\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    return true\n}\n",
    "    // regex := regexp.MustCompile(\"^[aeiou]\")\n    regex := regexp.MustCompile(\"^[aeiou]\")\n    return regex.MatchString(myString)\n}\n",
    "    if myString[0] == 'a' || myString[0] == 'e' || myString[0] == 'i' || myString[0] == 'o' || myString[0] == 'u' {\n        return true\n    }\n    return false\n}\n",
    "    return true\n}\n",
    "    var re = regexp.MustCompile(`^[aeiou]`)\n    return re.MatchString(myString)\n}\n",
    "    // regex := regexp.MustCompile(`^[aeiou]`)\n    // return regex.MatchString(myString)\n    return true\n}\n"
  ]
}