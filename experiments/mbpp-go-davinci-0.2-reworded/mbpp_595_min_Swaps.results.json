{
  "name": "mbpp_595_min_Swaps",
  "language": "go_test.go",
  "prompt": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr6rp_6_5_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr6rp_6_5_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int = 0\n    var i int = 0\n    var j int = 0\n    for i < len(str1) && j < len(str2) {\n        if str1[i] != str2[j] {\n            count++\n        }\n        i++\n        j++\n    }\n    return count\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpbes2tr36_test.go:38: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpbes2tr36_test.go:38: expected 'Not Possible', got '%!s(int=3)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpbes2tr36_test.go:38: expected 'Not Possible', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    if len(str1) != len(str2) {\n        return -1\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpu2t8b4ms_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpu2t8b4ms_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvrb9osap_test.go:35: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvrb9osap_test.go:35: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int = 0\n    var str1_arr []string = strings.Split(str1, \"\")\n    var str2_arr []string = strings.Split(str2, \"\")\n    for i := 0; i < len(str1_arr); i++ {\n        if str1_arr[i] != str2_arr[i] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu845g14i_test.go:11:29: undefined: strings\n/tmp/tmpu845g14i_test.go:12:29: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmps4ka5c5z_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmps4ka5c5z_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpxl5uwppa_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpxl5uwppa_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7snc9101_test.go:35: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7snc9101_test.go:35: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpm5vn3z40_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpm5vn3z40_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7snc9101_test.go:35: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7snc9101_test.go:35: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of the same length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp3ipzfu8p_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp3ipzfu8p_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"not possible\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp8dilqciw_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp8dilqciw_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    // return \"Not Implemented\"\n    // fmt.Println(str1)\n    // fmt.Println(str2)\n    if len(str1) != len(str2) {\n        return \"Not Implemented\"\n    }\n\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp_hjf3zbu_test.go:42: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp_hjf3zbu_test.go:42: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"String lengths are not equal\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmphbou07mt_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmphbou07mt_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp2kirloqd_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp2kirloqd_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of both strings must be equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7w0w90tx_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7w0w90tx_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpu4uych70_test.go:31: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpu4uych70_test.go:31: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpu4uych70_test.go:31: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int = 0\n    var i int = 0\n    var j int = 0\n    var len1 int = len(str1)\n    var len2 int = len(str2)\n    if len1 != len2 {\n        return -1\n    }\n    for i < len1 && j < len2 {\n        if str1[i] != str2[j] {\n            count++\n        }\n        i++\n        j++\n    }\n    return count\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1qvd2vw1_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1qvd2vw1_test.go:43: expected 'Not Possible', got '%!s(int=3)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1qvd2vw1_test.go:43: expected 'Not Possible', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of both strings should be same\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmprpk9jqcl_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmprpk9jqcl_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp338fw7j5_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp338fw7j5_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of same length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpfr9qd6tn_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpfr9qd6tn_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of equal length\"\n    }\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppdj5hx2g_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppdj5hx2g_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code goes here\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    if str1 == str2 {\n        return 0\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpw25rtec__test.go:41: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpw25rtec__test.go:41: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp3cvw608d_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp3cvw608d_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    // To print results to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"Hello world!\")\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpu4uych70_test.go:31: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpu4uych70_test.go:31: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpu4uych70_test.go:31: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Not Possible\"\n    }\n\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpt11xwpke_test.go:39: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpt11xwpke_test.go:39: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Error: strings must be of equal length\"\n    }\n    if str1 == str2 {\n        return 0\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122555,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp0snlz52e_test.go:40: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp0snlz52e_test.go:40: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Error: strings must be the same length\"\n    }\n    swaps := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            swaps++\n        }\n    }\n    return swaps\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpqdfyzcjt_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpqdfyzcjt_test.go:37: expected 'Not Possible', got '%!s(int=3)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpqdfyzcjt_test.go:37: expected 'Not Possible', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpfs1m3xo6_test.go:35: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpfs1m3xo6_test.go:35: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of strings are not equal\"\n    }\n    if str1 == str2 {\n        return \"No swaps required\"\n    }\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpdl6if7fo_test.go:40: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpdl6if7fo_test.go:40: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpbg84eo8o_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpbg84eo8o_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp2kirloqd_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp2kirloqd_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp3cvw608d_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp3cvw608d_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return 0\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp9ticrk9d_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp9ticrk9d_test.go:29: expected 'Not Possible', got '%!s(int=0)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp9ticrk9d_test.go:29: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of both strings should be same\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpgczzxvb5_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpgczzxvb5_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings must be of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp7a7kp5_q_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Error: Strings are not equal in length\"\n    }\n\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppsrcqe3u_test.go:39: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppsrcqe3u_test.go:39: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmps4ka5c5z_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmps4ka5c5z_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Input strings should be of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjm80yduo_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjm80yduo_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvrb9osap_test.go:35: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvrb9osap_test.go:35: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Not possible\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmptojy6wdq_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmptojy6wdq_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmppz2le1h2_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpryl7wpk5_test.go:34: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpryl7wpk5_test.go:34: expected 'Not Possible', got '%!s(int=3)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpryl7wpk5_test.go:34: expected 'Not Possible', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of both strings should be same\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmprpk9jqcl_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmprpk9jqcl_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpaz7p6h26_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpbevcdh6t_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpbevcdh6t_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpjanokmm6_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjanokmm6_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpukau4pvj_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpukau4pvj_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Length of both strings should be equal\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpyw8n5w6r_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpyw8n5w6r_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpnwjbwswn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnwjbwswn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr7kb2qjg_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp_k4p3j_d_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp_k4p3j_d_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not equal\"\n    }\n\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122556,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpjf3wpwdu_test.go:39: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpjf3wpwdu_test.go:39: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of same length\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpfr9qd6tn_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpfr9qd6tn_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnbqehelh_test.go:34: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Strings are not of equal length\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122554,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpnb7fw5ui_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpvg68viub_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpvg68viub_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509822,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpiow4hkgb_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpiow4hkgb_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}