{
  "name": "mbpp_11_remove_Occ",
  "language": "go_test.go",
  "prompt": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    // convert string to rune slice\n    s_rune := []rune(s)\n    // convert char to rune\n    ch_rune := []rune(ch)[0]\n    // find the first occurrence of the character\n    first_occ := -1\n    for i, v := range s_rune {\n        if v == ch_rune {\n            first_occ = i\n            break\n        }\n    }\n    // find the last occurrence of the character\n    last_occ := -1\n    for i := len(s_rune) - 1; i >= 0; i-- {\n        if s_rune[i] == ch_rune {\n            last_occ = i\n            break\n        }\n    }\n    // remove the character\n    if first_occ != -1 && last_occ != -1 {\n        s_rune = append(s_rune[:first_occ], s_rune[first_occ+1:]...)\n        s_rune = append(s_rune[:last_occ-1], s_rune[last_occ:]...)\n    }\n    return string(s_rune)\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s)-1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var s1 string\n    var s2 string\n    var s3 string\n    var s4 string\n    var s5 string\n    var s6 string\n    var s7 string\n    var s8 string\n    var s9 string\n    var s10 string\n    var s11 string\n    var s12 string\n    var s13 string\n    var s14 string\n    var s15 string\n    var s16 string\n    var s17 string\n    var s18 string\n    var s19 string\n    var s20 string\n    var s21 string\n    var s22 string\n    var s23 string\n    var s24 string\n    var s25 string\n    var s26 string\n    var s27 string\n    var s28 string\n    var s29 string\n    var s30 string\n    var s31 string\n    var s32 string\n    var s33 string\n    var s34 string\n    var s35 string\n    var s36 string\n    var s37 string\n    var s38 string\n    var s39 string\n    var s40 string\n    var s41 string\n    var s42 string\n    var s43 string\n    var s44 string\n    var s45 string\n    var s46 string\n    var s47 string\n    var s48 string\n    var s49 string\n    var s50 string\n    var s51 string\n    var s52 string\n    var s53 string\n    var s54 string\n    var s55 string\n    var s56 string\n    var s57 string\n    var s58 string\n    var s59 string\n    var s60 string\n    var s61 string\n    var s62 string\n    var s63 string\n    var s64 string\n    var s65 string\n    var s66 string\n    var s67 string\n    var s68 string\n    var s69 string\n    var s70 string\n    var s71 string\n    var s72 string\n    var s73 string\n    var s74 string\n    var s75 string\n    var s76 string\n    var s77 string\n    var s78 string\n    var s79 string\n    var s80 string\n    var s81 string\n    var s82 string\n    var s83 string\n    var s84 string\n    var s85 string\n   ",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == []rune(ch)[0] {\n            if i == 0 {\n                res = s[i+1:]\n            } else if i == len(s)-1 {\n                res = s[:i]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s)-1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        }\n        return s\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ch[0] {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n                break\n            } else {\n                result = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    // fmt.Println(s)\n    // fmt.Println(ch)\n    if len(s) < 1 {\n        return s\n    }\n    if len(ch) < 1 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    if s[0] == ch[0] {\n        return s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        return s[:len(s)-1]\n    }\n    return s[:len(s)-1]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if i == 0 || i == len(s)-1 {\n            continue\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    // your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i == 0 {\n            result += string(s[i+1:])\n            break\n        } else if string(s[i]) == ch && i == len(s)-1 {\n            result += string(s[:i])\n            break\n        } else if string(s[i]) == ch {\n            result += string(s[:i]) + string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch {\n            result += string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i, v := range s {\n        if string(v) != ch {\n            result += string(v)\n        } else if i == 0 {\n            result += string(v)\n        } else if i == len(s) - 1 {\n            result += string(v)\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else {\n            res += string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n                break\n            } else {\n                result = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i == 0 {\n            result += string(s[i+1:])\n        } else if string(s[i]) == ch && i == len(s)-1 {\n            result += string(s[:i])\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if i == 0 {\n            result += string(s[i+1:])\n        } else if i == len(s)-1 {\n            result += string(s[:i])\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return result\n}\n",
    "    var new_str string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            new_str += string(s[i])\n        }\n    }\n    return new_str\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0:1] == ch {\n        s = s[1:]\n    }\n    if s[len(s)-1:] == ch {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return s[:1] + strings.Replace(s[1:len(s)-1], ch, \"\", -1) + s[len(s)-1:]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, c := range s {\n        if string(c) != ch {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        } else {\n            result += string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) == 0 {\n        return s\n    }\n    if len(s) == 1 {\n        if s == ch {\n            return \"\"\n        }\n        return s\n    }\n    if s[0] == ch[0] {\n        return remove_Occ(s[1:], ch)\n    }\n    if s[len(s)-1] == ch[0] {\n        return remove_Occ(s[:len(s)-1], ch)\n    }\n    return s[0:1] + remove_Occ(s[1:len(s)-1], ch) + s[len(s)-1:len(s)]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    return s[1:len(s)-1]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            result = s[1:]\n        } else if s[i] == rune(ch[0]) && i == len(s)-1 {\n            result = s[:len(s)-1]\n        } else if s[i] == rune(ch[0]) && i != 0 && i != len(s)-1 {\n            result = s[:i] + s[i+1:]\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s) - 1 {\n            continue\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    // convert string to rune\n    r := []rune(s)\n    // convert character to rune\n    c := []rune(ch)[0]\n    // check if the character is in the string\n    if !contains(r, c) {\n        return s\n    }\n    // find the first occurrence of the character\n    i := index(r, c)\n    // find the last occurrence of the character\n    j := lastIndex(r, c)\n    // remove the first occurrence of the character\n    r = append(r[:i], r[i+1:]...)\n    // remove the last occurrence of the character\n    r = append(r[:j-1], r[j:]...)\n    // convert rune to string\n    return string(r)\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s)-1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var new_str string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        new_str += string(s[i])\n    }\n    return new_str\n}\n",
    "    var result string\n    for _, v := range s {\n        if string(v) != ch {\n            result += string(v)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else {\n            res += string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n",
    "    var new_str string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_str = s[1:]\n            } else if i == len(s) - 1 {\n                new_str = s[:len(s) - 1]\n            } else {\n                new_str = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return new_str\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i != 0 && i != len(s)-1 {\n            result += string(s[i])\n        } else if i == 0 && s[i] != rune(ch[0]) {\n            result += string(s[i])\n        } else if i == len(s)-1 && s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return strings.Trim(s, ch)\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return s[:1] + strings.Replace(s[1:len(s)-1], ch, \"\", -1) + s[len(s)-1:]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, c := range s {\n        if string(c) != ch {\n            result += string(c)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var first_occ, last_occ int\n    for i, v := range s {\n        if string(v) == ch {\n            if first_occ == 0 {\n                first_occ = i\n            }\n            last_occ = i\n        }\n    }\n    result = s[:first_occ] + s[last_occ+1:]\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s)-1 {\n            continue\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else if i == 0 {\n            res += string(s[i+1:])\n        } else if i == len(s) - 1 {\n            res += string(s[:i])\n        } else {\n            res += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ch[0] {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n                break\n            } else {\n                result = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    return s[1:len(s)-1]\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    return s[:1] + s[1:len(s)-1] + s[len(s)-1:]\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i != 0 && i != len(s)-1 {\n            new_s += string(s[i])\n        } else if i == 0 && s[i] != rune(ch[0]) {\n            new_s += string(s[i])\n        } else if i == len(s)-1 && s[i] != rune(ch[0]) {\n            new_s += string(s[i])\n        }\n    }\n    return new_s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result += s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n\n    return s\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s)-1 {\n            continue\n        } else {\n            new_s += string(s[i])\n        }\n    }\n    return new_s\n}\n",
    "    // convert string to rune\n    r := []rune(s)\n    // convert character to rune\n    c := []rune(ch)[0]\n    // find the first occurrence of c in r\n    first := 0\n    for i, v := range r {\n        if v == c {\n            first = i\n            break\n        }\n    }\n    // find the last occurrence of c in r\n    last := 0\n    for i := len(r) - 1; i >= 0; i-- {\n        if r[i] == c {\n            last = i\n            break\n        }\n    }\n    // remove first and last occurrence of c\n    r = append(r[:first], r[first+1:]...)\n    r = append(r[:last-1], r[last:]...)\n    // convert rune to string\n    return string(r)\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        } else if i == 0 {\n            res += string(v)\n        } else if i == len(s)-1 {\n            res += string(v)\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n                break\n            } else {\n                result = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s)-1]\n                break\n            } else {\n                result = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    // TODO: Write - Your - Code\n    return s\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n            } else {\n                res = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return s[:1] + strings.Replace(s[1:len(s)-1], ch, \"\", -1) + s[len(s)-1:]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var tttt int\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i:i+1] == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if result[i:i+1] == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == []rune(ch)[0] {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return string(s[0]) + s[1:len(s)-1] + string(s[len(s)-1])\n}\n",
    "    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i == 0 {\n            result += string(s[i+1:])\n            break\n        } else if string(s[i]) == ch && i == len(s)-1 {\n            result += string(s[:i])\n            break\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var new_str string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            new_str += string(s[i])\n        }\n    }\n    return new_str\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        } else if i == 0 {\n            result += string(s[i+1:])\n            break\n        } else if i == len(s)-1 {\n            result += string(s[:i])\n            break\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    // remove first occurrence\n    if len(s) > 0 && s[0:1] == ch {\n        s = s[1:]\n    }\n    // remove last occurrence\n    if len(s) > 0 && s[len(s)-1:] == ch {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != []rune(ch)[0] {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    return s[:1] + strings.Replace(s[1:len(s)-1], ch, \"\", -1) + s[len(s)-1:]\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i == 0 {\n            result += string(s[i+1:])\n        } else if string(s[i]) == ch && i == len(s)-1 {\n            result += string(s[:i])\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return result\n}\n",
    "    var res string\n    var i int\n    for i = 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        } else {\n            break\n        }\n    }\n    for i = i + 1; i < len(s) - 1; i++ {\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch {\n            result += string(s[i+1:])\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        new_s += string(s[i])\n    }\n    return new_s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_s = s[1:]\n            } else if i == len(s) - 1 {\n                new_s = s[:len(s)-1]\n            } else {\n                new_s = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return new_s\n}\n",
    "    return s[1:len(s)-1]\n}\n",
    "    // Write your code here\n    return \"\"\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i != 0 && i != len(s)-1 {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    return s[:strings.Index(s, ch)] + s[strings.Index(s, ch)+1:]\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0:1] == ch {\n        s = s[1:]\n    }\n    if s[len(s)-1:] == ch {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else {\n            result += \"\"\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            result = s[1:]\n        } else if s[i] == rune(ch[0]) && i == len(s)-1 {\n            result = s[:len(s)-1]\n        } else if s[i] == rune(ch[0]) && i != 0 && i != len(s)-1 {\n            result = s[:i] + s[i+1:]\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var new_str string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_str = s[1:]\n            } else if i == len(s)-1 {\n                new_str = s[:i]\n            } else {\n                new_str = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return new_str\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                new_s = s[1:]\n            } else if i == len(s) - 1 {\n                new_s = s[:len(s)-1]\n            } else {\n                new_s = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return new_s\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    // return string without first and last occurrence of ch\n    return s[:strings.Index(s, ch)] + s[strings.Index(s, ch)+1:]\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var s1 string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            s1 = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(s1)-1; i >= 0; i-- {\n        if string(s1[i]) == ch {\n            s1 = s1[:i] + s1[i+1:]\n            break\n        }\n    }\n    return s1\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s)-1 {\n                result = s[:len(s)-1]\n            } else {\n                result = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for _, v := range s {\n        if string(v) != ch {\n            res += string(v)\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                result = s[1:]\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n            } else {\n                result = s[:i] + s[i + 1:]\n            }\n            break\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if i == 0 {\n            result += string(s[i+1:])\n        } else if i == len(s)-1 {\n            result += string(s[:i])\n        } else {\n            result += string(s[:i]) + string(s[i+1:])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result) - 1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n",
    "    if len(s) < 2 {\n        return s\n    }\n    if s[0] == ch[0] {\n        s = s[1:]\n    }\n    if s[len(s)-1] == ch[0] {\n        s = s[:len(s)-1]\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s)-1 {\n            continue\n        } else {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            result += string(s[i])\n        } else if string(s[i]) == ch && i != 0 && i != len(s)-1 {\n            result += string(s[i])\n        }\n    }\n    return result\n}\n"
  ]
}