{
  "name": "mbpp_166_find_even_pair",
  "language": "go_test.go",
  "prompt": "package find_even_pair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that counts the number of pairs of integers in a list that xor to an even number.\nfunc find_even_pair(A []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Even_Pair(t *testing.T) {\n  candidate := find_even_pair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 4, 7, 2, 1}), expected: 4 },\n     { actual: candidate([]int{7, 2, 8, 1, 0, 5, 11}), expected: 9 },\n     { actual: candidate([]int{1, 2, 3}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // write your code in Go 1.4\n    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i+1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(A); i++ {\n        for j := i + 1; j < len(A); j++ {\n            if (A[i] ^ A[j]) % 2 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"
  ]
}