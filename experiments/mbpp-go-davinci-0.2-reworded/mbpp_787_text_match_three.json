{
  "name": "mbpp_787_text_match_three",
  "language": "go_test.go",
  "prompt": "package text_match_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by three 'b'.\nfunc text_match_three(text string) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "func TestText_Match_Three(t *testing.T) {\n  candidate := text_match_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"caacabbbba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // Write code here\n    return false\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    // Write code here\n    return true\n}\n",
    "    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n\n    return len(text) == 4 && text[:1] == \"a\" && text[1:4] == \"bbb\"\n}\n",
    "    // if len(text) < 4 {\n    //     return false\n    // }\n    // if text[0] != 'a' {\n    //     return false\n    // }\n    // if text[1] != 'b' {\n    //     return false\n    // }\n    // if text[2] != 'b' {\n    //     return false\n    // }\n    // if text[3] != 'b' {\n    //     return false\n    // }\n    // return true\n\n    // return len(text) == 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b'\n\n    return len(text) == 4 && text[:1] == \"a\" && text[1:4] == \"bbb\"\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    return false\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    // your code here\n    return false\n}\n",
    "    if len(text) >= 4 && text[0] == 'a' && text[1] == 'b' && text[2] == 'b' && text[3] == 'b' {\n        return true\n    }\n    return false\n}\n",
    "    // Write code here\n    return false\n}\n",
    "    // Write code here\n    return false\n}\n"
  ]
}