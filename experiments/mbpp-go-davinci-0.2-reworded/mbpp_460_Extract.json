{
  "name": "mbpp_460_Extract",
  "language": "go_test.go",
  "prompt": "package Extract_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to get the first element of each sublist.\nfunc Extract(lst [][]int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "reworded",
  "tests": "func TestExtract(t *testing.T) {\n  candidate := Extract\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2}, []int{3, 4, 5}, []int{6, 7, 8, 9}}), expected: []int{1, 3, 6} },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5}}), expected: []int{1, 4} },\n     { actual: candidate([][]int{[]int{9, 8, 1}, []int{1, 2}}), expected: []int{9, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, v := range lst {\n        res = append(res, v[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sublist := range lst {\n        res = append(res, sublist[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, v := range lst {\n        res = append(res, v[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sub := range lst {\n        result[i] = sub[0]\n    }\n    return result\n}\n",
    "    var res []int\n    for _, l := range lst {\n        res = append(res, l[0])\n    }\n    return res\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    // Your code here\n    var result []int\n    for _, v := range lst {\n        result = append(result, v[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sublst := range lst {\n        res = append(res, sublst[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublst := range lst {\n        result = append(result, sublst[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublst := range lst {\n        result = append(result, sublst[0])\n    }\n    return result\n}\n",
    "    result := make([]int, len(lst))\n    for i, sublist := range lst {\n        result[i] = sublist[0]\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range lst {\n        result = append(result, v[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, v := range lst {\n        res = append(res, v[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sub := range lst {\n        result = append(result, sub[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, v := range lst {\n        if len(v) > 0 {\n            result = append(result, v[0])\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var new_lst []int\n    for _, sub_lst := range lst {\n        new_lst = append(new_lst, sub_lst[0])\n    }\n    return new_lst\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sub := range lst {\n        res = append(res, sub[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublst := range lst {\n        result = append(result, sublst[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n",
    "    var res []int\n    for _, sublist := range lst {\n        res = append(res, sublist[0])\n    }\n    return res\n}\n",
    "    var result []int\n    for _, sublist := range lst {\n        result = append(result, sublist[0])\n    }\n    return result\n}\n"
  ]
}