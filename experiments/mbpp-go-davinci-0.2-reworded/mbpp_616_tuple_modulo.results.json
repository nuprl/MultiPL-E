{
  "name": "mbpp_616_tuple_modulo",
  "language": "go_test.go",
  "prompt": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Unknown type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj9pz0w97_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdofv36_j_test.go:16:68: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            default:\n                fmt.Println(\"tuple_modulo: type mismatch\")\n                return nil\n            }\n        default:\n            fmt.Println(\"tuple_modulo: type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuple lengths are not equal\")\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2wt23hhv_test.go:20:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6vzx5ll_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Only int and float64 types are supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1q4tiyig_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuples must be the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                panic(\"tuple_modulo: tuples must be of type int or float64\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphjtq75k3_test.go:19:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Tuples must be of type int or float64\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifz_edk_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                fmt.Println(\"Error: Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpya23bcyg_test.go:16:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Unknown type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj9pz0w97_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Type not supported.\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02hns02k_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsd_fj7il_test.go:16:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzb93gpu9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4taa27e_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i] % test_tup2[i])\n    }\n    return test_tup3\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmskd4rnn_test.go:12:52: invalid operation: test_tup1[i] % test_tup2[i] (operator % not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] % test_tup2[i])\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe9rsu210_test.go:12:46: invalid operation: test_tup1[i] % test_tup2[i] (operator % not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp64fs6ipg_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"ERROR: tuple_modulo() requires two lists of the same length\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            default:\n                fmt.Println(\"ERROR: tuple_modulo() requires two lists of the same type\")\n                return result\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                fmt.Println(\"ERROR: tuple_modulo() requires two lists of the same type\")\n                return result\n            }\n        default:\n            fmt.Println(\"ERROR: tuple_modulo() requires two lists of the same type\")\n            return result\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1c2kw1rf_test.go:28:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzb93gpu9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Tuple elements must be of type int or float64\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpffpa3slh_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            default:\n                fmt.Println(\"Error: Type mismatch\")\n                return nil\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                fmt.Println(\"Error: Type mismatch\")\n                return nil\n            }\n        default:\n            fmt.Println(\"Error: Type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbedntc3e_test.go:24:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuples are not the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"tuple_modulo: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5p9axqgm_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            ret_tup = append(ret_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            ret_tup = append(ret_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return ret_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptzbt_4dh_test.go:16:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: len(test_tup1) != len(test_tup2)\")\n    }\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            ret_tup = append(ret_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            ret_tup = append(ret_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"tuple_modulo: unsupported type\")\n        }\n    }\n    return ret_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ui9kz19_test.go:19:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            ret_tup = append(ret_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            ret_tup = append(ret_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return ret_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9q1wqsil_test.go:16:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            ret_tup = append(ret_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            ret_tup = append(ret_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            ret_tup = append(ret_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return ret_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp94k1qx9s_test.go:16:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return test_tup3\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi610091v_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5p_t50c__test.go:16:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be the same length\")\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplszaapjj_test.go:20:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6vzx5ll_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmwnxaw4w_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"The two lists must be of the same length!\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"The lists must only contain ints and floats!\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe9yp2fmj_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuple lengths do not match\")\n    }\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            test_tup3 = append(test_tup3, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            test_tup3 = append(test_tup3, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return test_tup3\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjdphsoxb_test.go:19:66: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Lists must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmnt1wqef_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuples must be of the same length\")\n    }\n    var ret_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            ret_tup = append(ret_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            ret_tup = append(ret_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"tuple_modulo: unsupported type\")\n        }\n    }\n    return ret_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuc_iszsa_test.go:19:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63ha3pkb_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuple lengths are not the same\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2cptwrhm_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Error: tuples are not the same length.\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Error: unsupported type.\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzcttpv7e_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Length of tuples must be the same\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm35ypuhb_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var mod_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            mod_tup = append(mod_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            mod_tup = append(mod_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return mod_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpso6uoii0_test.go:16:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"type error\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcosybad9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprl9g7o6f_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, \"\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqrr_66tf_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6vzx5ll_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprl9g7o6f_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi610091v_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuple lengths do not match\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"tuple_modulo: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7j5fmaj_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple lengths are not equal\")\n    }\n    result := make([]interface{}, len(test_tup1))\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result[i] = test_tup1[i].(int) % test_tup2[i].(int)\n        case float64:\n            result[i] = test_tup1[i].(float64) % test_tup2[i].(float64)\n        default:\n            panic(\"unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr52f6321_test.go:19:48: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmwnxaw4w_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr7urtuto_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int)%test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64)%test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string)+test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzzjtd8wq_test.go:16:59: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdofv36_j_test.go:16:68: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] % test_tup2[i])\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe9rsu210_test.go:12:46: invalid operation: test_tup1[i] % test_tup2[i] (operator % not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuples must be of equal length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"tuple_modulo: type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx0dvaysy_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7pyf70a_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv6ozpihq_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var mod_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        mod_tup = append(mod_tup, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return mod_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4taa27e_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4taa27e_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var mod_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            mod_tup = append(mod_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            mod_tup = append(mod_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Invalid type\")\n        }\n    }\n    return mod_tup\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ljr8nku_test.go:16:62: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] % test_tup2[i])\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe9rsu210_test.go:12:46: invalid operation: test_tup1[i] % test_tup2[i] (operator % not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6vzx5ll_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplj_xcevr_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrkuwm3e_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp448lv3kt_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplxdkk9lw_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6vzx5ll_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxkpboziy_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqfkh22ze_test.go:16:64: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: Unknown type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpacjrwhyv_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrkuwm3e_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Lists are not of equal length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Unsupported type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn58yjmny_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzb93gpu9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i] % test_tup2[i])\n    }\n    return test_tup3\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123821,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmskd4rnn_test.go:12:52: invalid operation: test_tup1[i] % test_tup2[i] (operator % not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnu2kjm9_test.go:16:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples are not the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Invalid type\")\n        }\n    }\n    return result\n}\n\nfunc TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123823,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpky4lvgxe_test.go:19:60: invalid operation: test_tup1[i].(float64) % test_tup2[i].(float64) (operator % not defined on float64)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}