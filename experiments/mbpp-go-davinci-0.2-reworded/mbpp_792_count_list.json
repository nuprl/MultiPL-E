{
  "name": "mbpp_792_count_list",
  "language": "go_test.go",
  "prompt": "package count_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of lists in a given number of lists.\nfunc count_list(input_list [][]int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_List(t *testing.T) {\n  candidate := count_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: 4 },\n     { actual: candidate([][]int{[]int{1, 2}, []int{2, 3}, []int{4, 5}}), expected: 3 },\n     { actual: candidate([][]int{[]int{1, 0}, []int{2, 0}}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, v := range input_list {\n        if len(v) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        count += 1\n    }\n    return count\n}\n",
    "    count := 0\n    for _, item := range input_list {\n        if len(item) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    return len(input_list)\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        count += len(list)\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, _ = range input_list {\n        count += 1\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        count += len(list)\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        if len(list) > 0 {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for _, list := range input_list {\n        count += len(list)\n    }\n    return count\n}\n"
  ]
}