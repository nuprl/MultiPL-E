{
  "name": "mbpp_70_get_equal",
  "language": "go_test.go",
  "prompt": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py",
  "prompt_terminology": "reworded",
  "tests": "func TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyafmua4_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var len_list []int\n    for _, list := range Input {\n        len_list = append(len_list, len(list))\n    }\n    for i := 0; i < len(len_list) - 1; i++ {\n        if len_list[i] != len_list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrwq45ie_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvrwq45ie_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvrwq45ie_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    length := len(Input[0])\n    for _, list := range Input {\n        if len(list) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_70dg7ez_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_70dg7ez_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_70dg7ez_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_70dg7ez_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_70dg7ez_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_70dg7ez_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        }\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjm2h_5v4_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjm2h_5v4_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjm2h_5v4_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yxyck3j_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yxyck3j_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yxyck3j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if len(v) != length {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1cghdd4j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cghdd4j_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cghdd4j_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cghdd4j_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1cghdd4j_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1cghdd4j_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i := 0; i < len(Input); i++ {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvketd_cl_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvketd_cl_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvketd_cl_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvketd_cl_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvketd_cl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvketd_cl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpokmljp1x_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzoexw405_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzoexw405_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzoexw405_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzoexw405_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzoexw405_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzoexw405_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, i := range Input {\n        if length == 0 {\n            length = len(i)\n        } else if length != len(i) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpndswkyjq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpndswkyjq_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpndswkyjq_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else if length != len(Input[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnfr16g09_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnfr16g09_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnfr16g09_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnfr16g09_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnfr16g09_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnfr16g09_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9bxt_a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        }\n        if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd_2exzx2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd_2exzx2_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd_2exzx2_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd_2exzx2_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpd_2exzx2_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpd_2exzx2_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeonjxn1f_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpeonjxn1f_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpeonjxn1f_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpeonjxn1f_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpeonjxn1f_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpeonjxn1f_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, i := range Input {\n        if len(i) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5oh2ek3s_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5oh2ek3s_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5oh2ek3s_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5oh2ek3s_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5oh2ek3s_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5oh2ek3s_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    var equal bool\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n            equal = true\n        } else {\n            if length != len(v) {\n                equal = false\n            }\n        }\n    }\n    return equal\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4mnsizz1_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4mnsizz1_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4mnsizz1_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4mnsizz1_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4mnsizz1_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4mnsizz1_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpokmljp1x_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        }\n        if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6g18quiv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6g18quiv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6g18quiv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6g18quiv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6g18quiv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6g18quiv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8fnobgcd_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        }\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjm2h_5v4_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjm2h_5v4_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjm2h_5v4_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjm2h_5v4_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    var equal bool\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                equal = false\n                break\n            } else {\n                equal = true\n            }\n        }\n    }\n    return equal\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6lfkpnsn_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6lfkpnsn_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6lfkpnsn_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6lfkpnsn_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6lfkpnsn_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6lfkpnsn_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9bxt_a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9bxt_a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var len_list = len(Input)\n    var len_slice = len(Input[0])\n    for i := 0; i < len_list; i++ {\n        if len(Input[i]) != len_slice {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_xhkn9qc_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xhkn9qc_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xhkn9qc_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xhkn9qc_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_xhkn9qc_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_xhkn9qc_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9lhz5v05_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9lhz5v05_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9lhz5v05_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, value := range Input {\n        if len(value) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjgiqr9n3_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjgiqr9n3_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjgiqr9n3_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjgiqr9n3_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjgiqr9n3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjgiqr9n3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    var length = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq37kiy3h_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq37kiy3h_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq37kiy3h_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq37kiy3h_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq37kiy3h_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq37kiy3h_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8fnobgcd_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6tayol61_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6tayol61_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6tayol61_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6tayol61_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6tayol61_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6tayol61_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyafmua4_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9bxt_a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq9jzoxbg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq9jzoxbg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq9jzoxbg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq9jzoxbg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpq9jzoxbg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpq9jzoxbg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9gp01tp_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp9gp01tp_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp9gp01tp_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp9gp01tp_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp9gp01tp_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp9gp01tp_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppkh9agy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppkh9agy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppkh9agy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppkh9agy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppkh9agy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppkh9agy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpokmljp1x_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpokmljp1x_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpokmljp1x_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsu9bxt_a_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsu9bxt_a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsu9bxt_a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else {\n            if length != len(list) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123559,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpstods9at_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpstods9at_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpstods9at_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123559,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnlf91bv8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123559,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnlf91bv8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123559,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnlf91bv8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpnlf91bv8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpnlf91bv8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, value := range Input {\n        if length == 0 {\n            length = len(value)\n        } else if length != len(value) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pc_0gb8_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8pc_0gb8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8pc_0gb8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyafmua4_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ebunsgk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3ebunsgk_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3ebunsgk_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzmwz5u_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprdzmwz5u_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprdzmwz5u_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8fnobgcd_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8fnobgcd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8fnobgcd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyafmua4_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyafmua4_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjyafmua4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjyafmua4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var len_list []int\n    for _, list := range Input {\n        len_list = append(len_list, len(list))\n    }\n    for i := 0; i < len(len_list) - 1; i++ {\n        if len_list[i] != len_list[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrwq45ie_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvrwq45ie_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvrwq45ie_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvrwq45ie_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else {\n            if length != len(list) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123559,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpstods9at_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpstods9at_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpstods9at_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpstods9at_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, i := range Input {\n        if length == 0 {\n            length = len(i)\n        } else if length != len(i) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpndswkyjq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpndswkyjq_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpndswkyjq_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpndswkyjq_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yb1vnm6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yb1vnm6_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yb1vnm6_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yxyck3j_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yxyck3j_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yxyck3j_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yxyck3j_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, list := range Input {\n        if length == 0 {\n            length = len(list)\n        } else if length != len(list) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb7upm852_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpb7upm852_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpb7upm852_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given lists have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123558,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9lhz5v05_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9lhz5v05_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9lhz5v05_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9lhz5v05_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}