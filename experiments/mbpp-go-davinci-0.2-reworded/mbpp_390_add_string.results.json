{
  "name": "mbpp_390_add_string",
  "language": "go_test.go",
  "prompt": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "func TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000806b8, 0x545b81, 0x7, 0x2adf0aaa85b8, 0xc000126b78, 0x4cd164)\n\t/tmp/tmpud9nkhma_test.go:10 +0x1a5\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpud9nkhma_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp1zkrppki_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp1zkrppki_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp1zkrppki_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfhyrl13v_test.go:48: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA string=1) temp{0}%!(EXTRA string=2) temp{0}%!(EXTRA string=3) temp{0}%!(EXTRA string=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfhyrl13v_test.go:48: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfhyrl13v_test.go:48: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA string=5) string{0}%!(EXTRA string=6) string{0}%!(EXTRA string=7) string{0}%!(EXTRA string=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%v%v\", v, myString)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b50ec998108, 0xc0000c0de8, 0x4cd164)\n\t/tmp/tmp0830yrj0_test.go:10 +0x1cb\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp0830yrj0_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = v + myString\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp_obyofi6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp_obyofi6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp_obyofi6_test.go:46: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%s\", myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%d\", myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%f\", myString, v))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpirmfusqt_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpirmfusqt_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpirmfusqt_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, item := range list {\n        result[i] = fmt.Sprintf(myString, item)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000b4ea0, 0x546165, 0x9, 0xc0000ba640, 0x4, 0x4)\n\t/tmp/tmpxt05roqz_test.go:10 +0x176\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpxt05roqz_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    new_list := make([]string, len(list))\n    for i, v := range list {\n        new_list[i] = fmt.Sprintf(\"%v%s\", v, myString)\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b85, 0x7, 0x2b3e518f8108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmpm7a7ox5n_test.go:10 +0x1cb\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpm7a7ox5n_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    default:\n        return list\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpy1ef18h2_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpy1ef18h2_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpy1ef18h2_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, item))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpup8zumgj_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpup8zumgj_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpup8zumgj_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            result = append(result, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            result = append(result, fmt.Sprintf(myString, item))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpl2v1hb0f_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpl2v1hb0f_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpl2v1hb0f_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list_int := list_.([]int)\n        for _, v := range list_int {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        return []string{}\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpqgx9_6a2_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpqgx9_6a2_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpqgx9_6a2_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list := list_.(type) {\n    case []string:\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%s\", v, myString))\n        }\n    case []int:\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%d%s\", v, myString))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpafvzwg_f_test.go:39: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpafvzwg_f_test.go:39: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpafvzwg_f_test.go:39: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch reflect.TypeOf(list_).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list_)\n        for i := 0; i < s.Len(); i++ {\n            result = append(result, fmt.Sprintf(\"%s%v\", myString, s.Index(i)))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpky4un81e_test.go:11:12: undefined: reflect\n/tmp/tmpky4un81e_test.go:12:10: undefined: reflect\n/tmp/tmpky4un81e_test.go:13:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b85, 0x7, 0x2aab1009a108, 0xc0000c6de8, 0x4cd164)\n\t/tmp/tmp_9c010bn_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp_9c010bn_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%s\", myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%d\", myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%f\", myString, item))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp2a4462xg_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp2a4462xg_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp2a4462xg_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000806b8, 0x545b81, 0x7, 0x2adf0aaa85b8, 0xc000126b78, 0x4cd164)\n\t/tmp/tmpud9nkhma_test.go:10 +0x1a5\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpud9nkhma_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    newList := []string{}\n    for _, v := range list {\n        newList = append(newList, fmt.Sprintf(\"%s%d\", myString, v))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc000188640, 0x4, 0x4)\n\t/tmp/tmphf5yew3r_test.go:10 +0x265\ncommand-line-arguments_test.TestAdd_String(0xc000186300)\n\t/tmp/tmphf5yew3r_test.go:26 +0x1e3\ntesting.tRunner(0xc000186300, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var result []string\n    for _, v := range list {\n        result = append(result, fmt.Sprintf(myString, v))\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b056475d108, 0xc0000c69d8, 0x4cd164)\n\t/tmp/tmp94uyr9dk_test.go:10 +0x213\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp94uyr9dk_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    default:\n        panic(\"Not a list\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: Not a list [recovered]\n\tpanic: Not a list\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpgcp_fhk9_test.go:15 +0x19e\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpgcp_fhk9_test.go:30 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        return []string{}\n    }\n\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6s8idmp7_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6s8idmp7_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6s8idmp7_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var new_list []string\n    for _, v := range list {\n        new_list = append(new_list, fmt.Sprintf(myString, v))\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00010c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000106300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00010c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008ceb8, 0x545b81, 0x7, 0x2afe3b6745b8, 0xc00010ec48, 0x4cd164)\n\t/tmp/tmpveaihy0l_test.go:10 +0x213\ncommand-line-arguments_test.TestAdd_String(0xc000106300)\n\t/tmp/tmpveaihy0l_test.go:25 +0xce\ntesting.tRunner(0xc000106300, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    var result []string\n    for _, item := range list {\n        result = append(result, fmt.Sprintf(myString, item))\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b81, 0x7, 0x2ba355d015b8, 0xc000126c48, 0x4cd164)\n\t/tmp/tmp6q04ela7_test.go:10 +0x233\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmp6q04ela7_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var newList []string\n    for _, item := range list {\n        newList = append(newList, fmt.Sprintf(\"%v%v\", item, myString))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008ceb8, 0x545b85, 0x7, 0x2abacdd12a68, 0xc00018eb78, 0x4cd164)\n\t/tmp/tmp6t_azqlj_test.go:10 +0x24a\ncommand-line-arguments_test.TestAdd_String(0xc000186300)\n\t/tmp/tmp6t_azqlj_test.go:25 +0xce\ntesting.tRunner(0xc000186300, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp35e5s7ic_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp35e5s7ic_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp35e5s7ic_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%s\", myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%d\", myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%f\", myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123600,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkqk5onzu_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkqk5onzu_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkqk5onzu_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc00011aea0, 0x546165, 0x9, 0xc000134640, 0x4, 0x4)\n\t/tmp/tmpiecp_23u_test.go:10 +0x176\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpiecp_23u_test.go:26 +0x1e3\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(myString, v))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpymxt7gts_test.go:36: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpymxt7gts_test.go:36: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpymxt7gts_test.go:36: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var new_list []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%s\", myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            new_list = append(new_list, fmt.Sprintf(\"%s%d\", myString, v))\n        }\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9duqwlmg_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9duqwlmg_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9duqwlmg_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for i, _ := range list {\n            list[i] = fmt.Sprintf(myString, list[i])\n        }\n        return list\n    case []int:\n        list := list_.([]int)\n        for i, _ := range list {\n            list[i] = list[i] + 1\n        }\n        return list\n    default:\n        return nil\n    }\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq46uv77v_test.go:22:9: cannot use list (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for i, _ := range list {\n            list[i] = fmt.Sprintf(myString, list[i])\n        }\n        return list\n    case []int:\n        list := list_.([]int)\n        for i, _ := range list {\n            list[i] = list[i] + 1\n        }\n        return list\n    default:\n        return nil\n    }\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq46uv77v_test.go:22:9: cannot use list (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6x96f22p_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for i, _ := range list {\n            list[i] = fmt.Sprintf(myString, list[i])\n        }\n        return list\n    case []int:\n        list := list_.([]int)\n        for i, _ := range list {\n            list[i] = list[i] + 1\n        }\n        return list\n    }\n    return nil\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk26z__k3_test.go:22:9: cannot use list (type []int) as type []string in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    var newList []string\n    for _, v := range list {\n        newList = append(newList, fmt.Sprintf(\"%s%d\", myString, v))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpj5i183m0_test.go:10 +0x251\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpj5i183m0_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    new_list := make([]string, len(list))\n    for i, v := range list {\n        new_list[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b85, 0x7, 0x2b0e3807c108, 0xc0000c69d8, 0x4cd164)\n\t/tmp/tmpz8hh31cx_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpz8hh31cx_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000806b8, 0x545b81, 0x7, 0x2adf0aaa85b8, 0xc000126b78, 0x4cd164)\n\t/tmp/tmpud9nkhma_test.go:10 +0x1a5\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpud9nkhma_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var newList []string\n    for _, item := range list {\n        newList = append(newList, fmt.Sprintf(\"%s%v\", myString, item))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b85, 0x7, 0x2ae18bf98108, 0xc0000c6aa8, 0x4cd164)\n\t/tmp/tmph038nqar_test.go:10 +0x26a\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmph038nqar_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp3xrx8ebu_test.go:48: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp3xrx8ebu_test.go:48: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp3xrx8ebu_test.go:48: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n        case []string:\n            list = list_.([]string)\n        default:\n            return nil\n    }\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpt7i5bzrm_test.go:38: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpt7i5bzrm_test.go:38: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpt7i5bzrm_test.go:38: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc00011aea0, 0x546165, 0x9, 0xc000134640, 0x4, 0x4)\n\t/tmp/tmp_83_fmfp_test.go:10 +0x176\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmp_83_fmfp_test.go:26 +0x1e3\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list := list_.(type) {\n    case []string:\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%s\", myString, v))\n        }\n    case []int:\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%d\", myString, v))\n        }\n    case []float64:\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%f\", myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmph384xu4n_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmph384xu4n_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmph384xu4n_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n        case []string:\n            list = list_.([]string)\n        default:\n            panic(\"Not a string list\")\n    }\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: Not a string list [recovered]\n\tpanic: Not a string list\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmptn1sp3vj_test.go:15 +0x193\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmptn1sp3vj_test.go:30 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2b8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp2kftd9ps_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp2kftd9ps_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp2kftd9ps_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for i, _ := range list {\n            list[i] = fmt.Sprintf(myString, list[i])\n        }\n        return list\n    default:\n        return []string{}\n    }\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp44qdbphv_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp44qdbphv_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp44qdbphv_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = v + myString\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123603,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpjay7ef61_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpjay7ef61_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpjay7ef61_test.go:44: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123604,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc000124210)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc000124210)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000906b8, 0x545b81, 0x7, 0x2ab712b0d5b8, 0xc0001265c8, 0x4cd164)\n\t/tmp/tmpdkywr7g5_test.go:10 +0x1a5\ncommand-line-arguments_test.TestAdd_String(0xc000102480)\n\t/tmp/tmpdkywr7g5_test.go:25 +0xce\ntesting.tRunner(0xc000102480, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, i := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", i))\n        }\n    case []float64:\n        for _, i := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", i))\n        }\n    default:\n        return nil\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123604,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpmzvhtstq_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpmzvhtstq_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpmzvhtstq_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp47xjy6sl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    new_list := make([]string, len(list))\n    for i, item := range list {\n        new_list[i] = fmt.Sprintf(\"%s%v\", myString, item)\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b85, 0x7, 0x2b3176ed05b8, 0xc000126eb8, 0x4cd164)\n\t/tmp/tmpo2a0kngl_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpo2a0kngl_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list_int := list_.([]int)\n        for _, v := range list_int {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        list_float := list_.([]float64)\n        for _, v := range list_float {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9p_w1jyb_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9p_w1jyb_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9p_w1jyb_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", v, myString)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpeldohkl8_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpeldohkl8_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpeldohkl8_test.go:40: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    default:\n        fmt.Println(\"Type not supported\")\n        return list\n    }\n    for i, v := range list {\n        list[i] = v + myString\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "Type not supported\nType not supported\n--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpc8uala6v_test.go:39: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpc8uala6v_test.go:39: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpc8uala6v_test.go:39: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    // Type assertion\n    list, ok := list_.([]string)\n    if !ok {\n        panic(\"Invalid type\")\n    }\n    // Append the string to each element\n    for i, _ := range list {\n        list[i] = list[i] + myString\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: Invalid type [recovered]\n\tpanic: Invalid type\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51ca40, 0x56df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6f8, 0x545be1, 0x7, 0x5fa240, 0x5825c3, 0xf)\n\t/tmp/tmpngsoc7vr_test.go:13 +0x13d\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpngsoc7vr_test.go:29 +0xc6\ntesting.tRunner(0xc000102600, 0x54f2b8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%s\", v, myString))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%d%s\", v, myString))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123604,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpq9elh0lw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpq9elh0lw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpq9elh0lw_test.go:41: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list_int := list_.([]int)\n        for _, i := range list_int {\n            list = append(list, fmt.Sprintf(\"%d\", i))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpdly2u90a_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpdly2u90a_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpdly2u90a_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%s\", myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(\"%s%d\", myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpdosgio7j_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpdosgio7j_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpdosgio7j_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for i, _ := range list {\n            list[i] = fmt.Sprintf(myString, list[i])\n        }\n        return list\n    default:\n        return []string{}\n    }\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpqyw44cup_test.go:37: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%v%s\", v, myString)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b85, 0x7, 0x2ac8fa0ea5b8, 0xc000126908, 0x4cd164)\n\t/tmp/tmpzuzb_xc4_test.go:10 +0x1cb\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpzuzb_xc4_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        for _, v := range list_.([]string) {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        for _, v := range list_.([]int) {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123604,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpahq615zb_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpahq615zb_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpahq615zb_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpgv2_cuue_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpgv2_cuue_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    new_list := make([]string, len(list))\n    for i, v := range list {\n        new_list[i] = fmt.Sprintf(myString, v)\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2ac184fcb108, 0xc0000c6de8, 0x4cd164)\n\t/tmp/tmpoenjioks_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpoenjioks_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, i := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", i))\n        }\n    case []float64:\n        for _, i := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", i))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpqg7mpy4a_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpqg7mpy4a_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpqg7mpy4a_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6f8, 0x545be5, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpg8q59dbo_test.go:10 +0x1e9\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpg8q59dbo_test.go:24 +0xc6\ntesting.tRunner(0xc000102600, 0x54f2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp4rh7jc_a_test.go:42: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp4rh7jc_a_test.go:42: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp4rh7jc_a_test.go:42: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpydknobfe_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpydknobfe_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpydknobfe_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := []string{}\n    for _, item := range list {\n        result = append(result, fmt.Sprintf(myString, item))\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2ab2cf7f0108, 0xc0000c6c48, 0x4cd164)\n\t/tmp/tmpijsoz7nv_test.go:10 +0x21f\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpijsoz7nv_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var newList []string\n    for _, item := range list {\n        newList = append(newList, fmt.Sprintf(\"%s%v\", myString, item))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b85, 0x7, 0x2ae18bf98108, 0xc0000c6aa8, 0x4cd164)\n\t/tmp/tmph038nqar_test.go:10 +0x26a\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmph038nqar_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var result []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            result = append(result, fmt.Sprintf(myString, v))\n        }\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpvf3onno8_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%v%s\", v, myString)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b85, 0x7, 0x2ac8fa0ea5b8, 0xc000126908, 0x4cd164)\n\t/tmp/tmpzuzb_xc4_test.go:10 +0x1cb\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpzuzb_xc4_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list_int := list_.([]int)\n        for _, v := range list_int {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpl80choxw_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpl80choxw_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpl80choxw_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    default:\n        fmt.Println(\"Not a string list\")\n        return list\n    }\n\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "Not a string list\nNot a string list\n--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6hvdfgkr_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6hvdfgkr_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6hvdfgkr_test.go:40: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmps8pzdjdl_test.go:40: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    var newList []string\n    for _, element := range list {\n        newList = append(newList, fmt.Sprintf(myString, element))\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546165, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpd7xs27eq_test.go:10 +0x205\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpd7xs27eq_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp63alshay_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp63alshay_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp63alshay_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    }\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp34f_08bk_test.go:36: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp34f_08bk_test.go:36: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp34f_08bk_test.go:36: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := []string{}\n    for _, v := range list {\n        result = append(result, fmt.Sprintf(myString, v))\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b81, 0x7, 0x2b6d2fc5f5b8, 0xc000126de8, 0x4cd164)\n\t/tmp/tmpwb02rbxh_test.go:10 +0x21f\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpwb02rbxh_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    var result []string\n    for _, item := range list {\n        result = append(result, fmt.Sprintf(myString, item))\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b81, 0x7, 0x2b441461c5b8, 0xc000126de8, 0x4cd164)\n\t/tmp/tmphkjc7794_test.go:10 +0x213\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmphkjc7794_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmphnpimtrv_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmphnpimtrv_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmphnpimtrv_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc00011aea0, 0x546169, 0x9, 0xc000188640, 0x4, 0x4)\n\t/tmp/tmpfhhpbxzs_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000186300)\n\t/tmp/tmpfhhpbxzs_test.go:26 +0x1e3\ntesting.tRunner(0xc000186300, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch reflect.TypeOf(list_).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list_)\n        for i := 0; i < s.Len(); i++ {\n            newList = append(newList, fmt.Sprintf(\"%s%v\", myString, s.Index(i)))\n        }\n    default:\n        panic(\"Not a slice\")\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe62mc86j_test.go:11:12: undefined: reflect\n/tmp/tmpe62mc86j_test.go:12:10: undefined: reflect\n/tmp/tmpe62mc86j_test.go:13:14: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpgv2_cuue_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpgv2_cuue_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc00011aea0, 0x546169, 0x9, 0xc000188640, 0x4, 0x4)\n\t/tmp/tmpfhhpbxzs_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000186300)\n\t/tmp/tmpfhhpbxzs_test.go:26 +0x1e3\ntesting.tRunner(0xc000186300, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpyrk1cg3j_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc00011aea0, 0x546165, 0x9, 0xc000134640, 0x4, 0x4)\n\t/tmp/tmpiecp_23u_test.go:10 +0x176\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpiecp_23u_test.go:26 +0x1e3\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list_int := list_.([]int)\n        for _, i := range list_int {\n            list = append(list, fmt.Sprintf(\"%d\", i))\n        }\n    case []float64:\n        list_float := list_.([]float64)\n        for _, i := range list_float {\n            list = append(list, fmt.Sprintf(\"%f\", i))\n        }\n    default:\n        panic(\"Unknown type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp14h93vnt_test.go:48: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp14h93vnt_test.go:48: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp14h93vnt_test.go:48: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = myString + v\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpve3t1sma_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp1yi5qzf7_test.go:42: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%v%s\", v, myString)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008c6b8, 0x545b85, 0x7, 0x2ac8fa0ea5b8, 0xc000126908, 0x4cd164)\n\t/tmp/tmpzuzb_xc4_test.go:10 +0x1cb\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpzuzb_xc4_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    case []float64:\n        list = make([]string, len(list_.([]float64)))\n        for i, v := range list_.([]float64) {\n            list[i] = fmt.Sprintf(\"%f\", v)\n        }\n    default:\n        return []string{}\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkex_8jlr_test.go:48: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkex_8jlr_test.go:48: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkex_8jlr_test.go:48: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    default:\n        panic(\"Unknown type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", v, myString)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpqqcu8uyc_test.go:42: expected '[temp1 temp2 temp3 temp4]', got '[1temp{0} 2temp{0} 3temp{0} 4temp{0}]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpqqcu8uyc_test.go:42: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpqqcu8uyc_test.go:42: expected '[string5 string6 string7 string8]', got '[5string{0} 6string{0} 7string{0} 8string{0}]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926f8, 0x545be5, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpqa_gd2bw_test.go:10 +0x1cc\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpqa_gd2bw_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpjognbhwf_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    default:\n        fmt.Println(\"Invalid input\")\n        return nil\n    }\n    for i, v := range list {\n        list[i] = v + myString\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "Invalid input\nInvalid input\n--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpc2oou9jw_test.go:39: expected '[temp1 temp2 temp3 temp4]', got '[]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpc2oou9jw_test.go:39: expected '[pythona pythonb pythonc pythond]', got '[apython{0} bpython{0} cpython{0} dpython{0}]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpc2oou9jw_test.go:39: expected '[string5 string6 string7 string8]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp9mjmbcor_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp6n_mrr_m_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        for _, v := range list_.([]int) {\n            list = append(list, fmt.Sprintf(\"%d\", v))\n        }\n    case []float64:\n        for _, v := range list_.([]float64) {\n            list = append(list, fmt.Sprintf(\"%f\", v))\n        }\n    }\n    for i, _ := range list {\n        list[i] = myString + list[i]\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8bbuohjh_test.go:44: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    for i, _ := range list {\n        list[i] = fmt.Sprintf(myString, list[i])\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523780, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866f8, 0x545be1, 0x7, 0x5fa260, 0x5825e3, 0xf)\n\t/tmp/tmpkrlokuwt_test.go:10 +0x17b\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpkrlokuwt_test.go:24 +0xc6\ntesting.tRunner(0xc000001380, 0x54f2a8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    new_list := []string{}\n    for _, item := range list {\n        new_list = append(new_list, fmt.Sprintf(myString, item))\n    }\n    return new_list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123606,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc00008ceb8, 0x545b81, 0x7, 0x2afb74d8aa68, 0xc00018e9d8, 0x4cd164)\n\t/tmp/tmppr048z6w_test.go:10 +0x21f\ncommand-line-arguments_test.TestAdd_String(0xc000186300)\n\t/tmp/tmppr048z6w_test.go:25 +0xce\ntesting.tRunner(0xc000186300, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]string)\n    newList := make([]string, len(list))\n    for i, v := range list {\n        newList[i] = fmt.Sprintf(myString, v)\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []string [recovered]\n\tpanic: interface conversion: interface {} is []int, not []string\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000806b8, 0x545b81, 0x7, 0x2adf0aaa85b8, 0xc000126b78, 0x4cd164)\n\t/tmp/tmpud9nkhma_test.go:10 +0x1a5\ncommand-line-arguments_test.TestAdd_String(0xc000102600)\n\t/tmp/tmpud9nkhma_test.go:25 +0xce\ntesting.tRunner(0xc000102600, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpgv2_cuue_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpgv2_cuue_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, value := range list {\n            newList = append(newList, fmt.Sprintf(myString, value))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmp8_ntj48j_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]int)\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%d\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123605,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []string, not []int [recovered]\n\tpanic: interface conversion: interface {} is []string, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51aea0, 0xc0000c2ea0, 0x546169, 0x9, 0xc0000c8640, 0x4, 0x4)\n\t/tmp/tmpgv2_cuue_test.go:10 +0x1d2\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmpgv2_cuue_test.go:26 +0x1e3\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    case []float64:\n        list := list_.([]float64)\n        for _, v := range list {\n            newList = append(newList, fmt.Sprintf(myString, v))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpwr6_prc6_test.go:46: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var list []string\n    switch list_.(type) {\n    case []string:\n        list = list_.([]string)\n    case []int:\n        list = make([]string, len(list_.([]int)))\n        for i, v := range list_.([]int) {\n            list[i] = fmt.Sprintf(\"%d\", v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    for i, v := range list {\n        list[i] = fmt.Sprintf(\"%s%s\", myString, v)\n    }\n    return list\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}1 temp{0}2 temp{0}3 temp{0}4]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[pythona pythonb pythonc pythond]', got '[python{0}a python{0}b python{0}c python{0}d]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpfgwz3udg_test.go:43: expected '[string5 string6 string7 string8]', got '[string{0}5 string{0}6 string{0}7 string{0}8]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(\"%s%v\", myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000866b8, 0x545b85, 0x7, 0x2b2027af3108, 0xc0000b8aa8, 0x4cd164)\n\t/tmp/tmp3lh5l0t2_test.go:10 +0x1e8\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp3lh5l0t2_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    list := list_.([]interface{})\n    result := make([]string, len(list))\n    for i, v := range list {\n        result[i] = fmt.Sprintf(myString, v)\n    }\n    return result\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.add_string(0x51a3a0, 0xc0000926b8, 0x545b81, 0x7, 0x2b70d062e108, 0xc0000c6b78, 0x4cd164)\n\t/tmp/tmp5z49kwhc_test.go:10 +0x186\ncommand-line-arguments_test.TestAdd_String(0xc000001380)\n\t/tmp/tmp5z49kwhc_test.go:25 +0xce\ntesting.tRunner(0xc000001380, 0x54f248)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package add_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to apply a given format string to all of the elements in a list.\nfunc add_string(list_ interface{}, myString string) []string {\n    var newList []string\n    switch list_.(type) {\n    case []string:\n        list := list_.([]string)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    case []int:\n        list := list_.([]int)\n        for _, item := range list {\n            newList = append(newList, fmt.Sprintf(myString, item))\n        }\n    }\n    return newList\n}\n\nfunc TestAdd_String(t *testing.T) {\n  candidate := add_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, \"temp{0}\"), expected: []string{\"temp1\", \"temp2\", \"temp3\", \"temp4\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"c\", \"d\"}, \"python{0}\"), expected: []string{\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"} },\n     { actual: candidate([]int{5, 6, 7, 8}, \"string{0}\"), expected: []string{\"string5\", \"string6\", \"string7\", \"string8\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123601,
      "stdout": "--- FAIL: TestAdd_String (0.00s)\n    --- FAIL: TestAdd_String/test_num__0 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[temp1 temp2 temp3 temp4]', got '[temp{0}%!(EXTRA int=1) temp{0}%!(EXTRA int=2) temp{0}%!(EXTRA int=3) temp{0}%!(EXTRA int=4)]'\n    --- FAIL: TestAdd_String/test_num__1 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[pythona pythonb pythonc pythond]', got '[python{0}%!(EXTRA string=a) python{0}%!(EXTRA string=b) python{0}%!(EXTRA string=c) python{0}%!(EXTRA string=d)]'\n    --- FAIL: TestAdd_String/test_num__2 (0.00s)\n        tmpkc_07cvw_test.go:41: expected '[string5 string6 string7 string8]', got '[string{0}%!(EXTRA int=5) string{0}%!(EXTRA int=6) string{0}%!(EXTRA int=7) string{0}%!(EXTRA int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}