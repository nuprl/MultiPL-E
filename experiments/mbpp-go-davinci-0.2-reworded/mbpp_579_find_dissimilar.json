{
  "name": "mbpp_579_find_dissimilar",
  "language": "go_test.go",
  "prompt": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n",
    "    var ret []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            ret = append(ret, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            ret = append(ret, val)\n        }\n    }\n    return ret\n}\n",
    "    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n",
    "    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 != val2 {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    return dissimilar\n}\n",
    "    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n",
    "    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        if !contains(test_tup2, elem1) {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        if !contains(test_tup1, elem2) {\n            dissimilar_list = append(dissimilar_list, elem2)\n        }\n    }\n    return dissimilar_list\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var ret []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            ret = append(ret, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n",
    "    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n",
    "    var res []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            res = append(res, test_tup1[i])\n        }\n    }\n    return res\n}\n",
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v := range test_tup1 {\n        if !in_tuple(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !in_tuple(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n",
    "    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n"
  ]
}