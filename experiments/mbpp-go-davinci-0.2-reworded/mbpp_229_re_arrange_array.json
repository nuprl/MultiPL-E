{
  "name": "mbpp_229_re_arrange_array",
  "language": "go_test.go",
  "prompt": "package re_arrange_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a list and an integer n, and re-arranges the first n elements of the given list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\nfunc re_arrange_array(arr []int, n int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRe_Arrange_Array(t *testing.T) {\n  candidate := re_arrange_array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), expected: []int{-1, -3, -7, 4, 5, 6, 2, 8, 9} },\n     { actual: candidate([]int{12, -14, -26, 13, 15}, 5), expected: []int{-14, -26, 12, 13, 15} },\n     { actual: candidate([]int{10, 24, 36, -42, -39, -78, 85}, 7), expected: []int{-42, -39, -78, 10, 24, 36, 85} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j > 0 && arr[j-1] > 0 {\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                j--\n            }\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    // if n == 2 {\n    //     if arr[0] < 0 && arr[1] < 0 {\n    //         return arr\n    //     } else if arr[0] < 0 && arr[1] >= 0 {\n    //         return []int{arr[0], arr[1]}\n    //     } else if arr[0] >= 0 && arr[1] < 0 {\n    //         return []int{arr[1], arr[0]}\n    //     } else {\n    //         return []int{arr[1], arr[0]}\n    //     }\n    // }\n    if arr[0] < 0 {\n        return append([]int{arr[0]}, re_arrange_array(arr[1:], n-1)...)\n    } else {\n        return append(re_arrange_array(arr[1:], n-1), []int{arr[0]}...)\n    }\n}\n",
    "    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 2 {\n        if arr[0] < 0 && arr[1] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] > 0 {\n            return []int{arr[0], arr[1]}\n        } else if arr[0] > 0 && arr[1] < 0 {\n            return []int{arr[1], arr[0]}\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if n == 3 {\n        if arr[0] < 0 && arr[1] < 0 && arr[2] < 0 {\n            return arr\n        } else if arr[0] < 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] < 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[0], arr[2], arr[1]}\n        } else if arr[0] > 0 && arr[1] < 0 && arr[2] < 0 {\n            return []int{arr[1], arr[2], arr[0]}\n        } else if arr[0] < 0 && arr[1] > 0 && arr[2] > 0 {\n            return []int{arr[0], arr[1], arr[2]}\n        } else if arr[0] > 0 && arr[1] < 0 && arr[2] > 0 {\n            return []int{arr[1], arr[0], arr[2]}\n        } else if arr[0] > 0 && arr[1] > 0 && arr[2] < 0 {\n            return []int{arr[2], arr[0], arr[1]}\n        } else {\n            return []int{arr[2], arr[1], arr[0]}\n        }\n    }\n    if n ==",
    "    i := 0\n    j := n - 1\n    for i < j {\n        if arr[i] < 0 {\n            i++\n        } else if arr[j] >= 0 {\n            j--\n        } else {\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n\n    i := 0\n    j := n - 1\n\n    for i < j {\n        if arr[i] < 0 {\n            i++\n            continue\n        }\n        if arr[j] > 0 {\n            j--\n            continue\n        }\n        arr[i], arr[j] = arr[j], arr[i]\n        i++\n        j--\n    }\n\n    return arr\n}\n",
    "    if n < 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n",
    "    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    return arr\n}\n",
    "    // Write your code here\n    if n == 0 {\n        return arr\n    }\n\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            continue\n        }\n        for j = i + 1; j < n; j++ {\n            if arr[j] < 0 {\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n            }\n        }\n    }\n\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                return arr\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n",
    "    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n                j++\n            }\n        }\n    }\n    return arr\n}\n",
    "    if n <= 0 {\n        return arr\n    }\n    if n > len(arr) {\n        n = len(arr)\n    }\n    i := 0\n    for j := 0; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n",
    "    // Write your code here\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            for j < n && arr[j] < 0 {\n                j++\n            }\n            if j == n {\n                break\n            }\n            arr[i], arr[j] = arr[j], arr[i]\n        }\n    }\n    return arr\n}\n",
    "    if n < 1 {\n        return arr\n    }\n    for i := 0; i < n; i++ {\n        if arr[i] < 0 {\n            for j := i + 1; j < n; j++ {\n                if arr[j] >= 0 {\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                }\n            }\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    if arr[n-1] < 0 {\n        return append([]int{arr[n-1]}, append(re_arrange_array(arr[:n-1], n-1), arr[n-1])...)\n    } else {\n        return append(re_arrange_array(arr[:n-1], n-1), arr[n-1])\n    }\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j+1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j], arr[i] = arr[i], arr[j]\n            j++\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    if n == 1 {\n        if arr[0] < 0 {\n            return arr\n        } else {\n            return []int{arr[1], arr[0]}\n        }\n    }\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] >= 0 {\n            break\n        }\n    }\n    if i == n {\n        return arr\n    }\n    var j int\n    for j = i + 1; j < n; j++ {\n        if arr[j] < 0 {\n            arr[i], arr[j] = arr[j], arr[i]\n            i++\n        }\n    }\n    return arr\n}\n",
    "    if n == 0 {\n        return arr\n    }\n    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] < 0 {\n            j = i\n            break\n        }\n    }\n    for i = j + 1; i < n; i++ {\n        if arr[i] < 0 {\n            arr[j] = arr[i]\n            j++\n        }\n    }\n    for i = j; i < n; i++ {\n        if arr[i] > 0 {\n            arr[j] = arr[i]\n            j++\n        }\n    }\n    return arr\n}\n"
  ]
}