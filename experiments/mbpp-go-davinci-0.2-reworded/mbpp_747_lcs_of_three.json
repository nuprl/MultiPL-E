{
  "name": "mbpp_747_lcs_of_three",
  "language": "go_test.go",
  "prompt": "package lcs_of_three_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\nfunc lcs_of_three(X string, Y string, Z string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "func TestLcs_Of_Three(t *testing.T) {\n  candidate := lcs_of_three\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"AGGT12\", \"12TXAYB\", \"12XBA\"), expected: 2 },\n     { actual: candidate(\"Reels\", \"Reelsfor\", \"ReelsforReels\"), expected: 5 },\n     { actual: candidate(\"abcd1e2\", \"bc12ea\", \"bd1ea\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m + 1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n + 1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o + 1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n\n    L := make([][][]int, m+1)\n    for i := range L {\n        L[i] = make([][]int, n+1)\n        for j := range L[i] {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := range L {\n        L[i] = make([][]int, n+1)\n        for j := range L[i] {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := range L {\n        L[i] = make([][]int, n+1)\n        for j := range L[i] {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    var m, n, o int = len(X), len(Y), len(Z)\n    var L [][][]int = make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := range L {\n        L[i] = make([][]int, n+1)\n        for j := range L[i] {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m + 1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n + 1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o + 1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i - 1] == Y[j - 1] && X[i - 1] == Z[k - 1] {\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                } else {\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n",
    "    m := len(X)\n    n := len(Y)\n    o := len(Z)\n    L := make([][][]int, m+1)\n    for i := 0; i <= m; i++ {\n        L[i] = make([][]int, n+1)\n        for j := 0; j <= n; j++ {\n            L[i][j] = make([]int, o+1)\n        }\n    }\n    for i := 0; i <= m; i++ {\n        for j := 0; j <= n; j++ {\n            for k := 0; k <= o; k++ {\n                if i == 0 || j == 0 || k == 0 {\n                    L[i][j][k] = 0\n                } else if X[i-1] == Y[j-1] && X[i-1] == Z[k-1] {\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                } else {\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                }\n            }\n        }\n    }\n    return L[m][n][o]\n}\n"
  ]
}