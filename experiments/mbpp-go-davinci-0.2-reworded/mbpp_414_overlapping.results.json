{
  "name": "mbpp_414_overlapping",
  "language": "go_test.go",
  "prompt": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py",
  "prompt_terminology": "reworded",
  "tests": "func TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, item := range list1 {\n        for _, item2 := range list2 {\n            if item == item2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, item1 := range list1 {\n        for _, item2 := range list2 {\n            if item1 == item2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, val1 := range list1 {\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list2); j++ {\n            if list1[i] == list2[j] {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, val1 := range list1 {\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, val1 := range list1 {\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, val1 := range list1 {\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, val1 := range list1 {\n        for _, val2 := range list2 {\n            if val1 == val2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value := range list1 {\n        for _, value2 := range list2 {\n            if value == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, item1 := range list1 {\n        for _, item2 := range list2 {\n            if item1 == item2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, value1 := range list1 {\n        for _, value2 := range list2 {\n            if value1 == value2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v := range list1 {\n        for _, v2 := range list2 {\n            if v == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, i := range list1 {\n        for _, j := range list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package overlapping_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether any value in a sequence exists in a sequence or not.\nfunc overlapping(list1 []int, list2 []int) bool {\n    for _, v1 := range list1 {\n        for _, v2 := range list2 {\n            if v1 == v2 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestOverlapping(t *testing.T) {\n  candidate := overlapping\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{6, 7, 8, 9}), expected: false },\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 4, 5}, []int{1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}