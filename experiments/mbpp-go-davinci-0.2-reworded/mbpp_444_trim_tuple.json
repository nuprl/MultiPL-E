{
  "name": "mbpp_444_trim_tuple",
  "language": "go_test.go",
  "prompt": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var output string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        output += fmt.Sprintf(\"%v\", list)\n    }\n    return output\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n",
    "    var result string\n    for _, sub_list := range test_list {\n        if len(sub_list) > K {\n            result += fmt.Sprintf(\"%v\", sub_list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", sub_list)\n        }\n    }\n    return result\n}\n",
    "    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\\n\", list)\n    }\n    return result\n}\n"
  ]
}