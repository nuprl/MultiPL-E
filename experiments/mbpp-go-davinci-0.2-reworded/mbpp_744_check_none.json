{
  "name": "mbpp_744_check_none",
  "language": "go_test.go",
  "prompt": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given list has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case interface{}:\n        return test_tup == nil\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case interface{}:\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, elem := range test_tup.([]interface{}) {\n            if check_none(elem) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, elem := range test_tup.(map[interface{}]interface{}) {\n            if check_none(elem) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case string:\n        if test_tup.(string) == \"\" {\n            return true\n        }\n    case int:\n        if test_tup.(int) == 0 {\n            return true\n        }\n    case float64:\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n    case bool:\n        if test_tup.(bool) == false {\n            return true\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case string:\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return false\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case []string:\n        for _, val := range test_tup.([]string) {\n            if val == \"\" {\n                return true\n            }\n        }\n    case []int:\n        for _, val := range test_tup.([]int) {\n            if val == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case interface{}:\n        return test_tup == nil\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case interface{}:\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) == true {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) == true {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, item := range test_tup.([]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, item := range test_tup.(map[string]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case string:\n        return test_tup.(string) == \"none\"\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, item := range test_tup.([]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, item := range test_tup.(map[string]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case []string:\n        for _, val := range test_tup.([]string) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case string:\n        return test_tup.(string) == \"None\"\n    case int:\n        return test_tup.(int) == 0\n    case float64:\n        return test_tup.(float64) == 0\n    case bool:\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case string:\n        return test_tup.(string) == \"none\"\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) == false {\n                return false\n            }\n        }\n        return true\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) == false {\n                return false\n            }\n        }\n        return true\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case string:\n        return test_tup.(string) == \"none\"\n    case int:\n        return test_tup.(int) == -1\n    case float64:\n        return test_tup.(float64) == -1.0\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    case []string:\n        for _, v := range test_tup.([]string) {\n            if v == \"\" {\n                return true\n            }\n        }\n    case []int:\n        for _, v := range test_tup.([]int) {\n            if v == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case string:\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, elem := range test_tup.([]interface{}) {\n            if check_none(elem) {\n                return true\n            }\n        }\n        return false\n    case map[string]interface{}:\n        for _, elem := range test_tup.(map[string]interface{}) {\n            if check_none(elem) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[interface{}]interface{}:\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n"
  ]
}