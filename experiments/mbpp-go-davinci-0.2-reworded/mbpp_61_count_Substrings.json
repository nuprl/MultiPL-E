{
  "name": "mbpp_61_count_Substrings",
  "language": "go_test.go",
  "prompt": "package count_Substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Substrings(t *testing.T) {\n  candidate := count_Substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"112112\"), expected: 6 },\n     { actual: candidate(\"111\"), expected: 6 },\n     { actual: candidate(\"1101112\"), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_of_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // Write your code here\n    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i + 1; j <= len(s); j++ {\n            if sum_digits(s[i:j]) == j - i {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == (j - i + 1) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            var sum int\n            for k := i; k <= j; k++ {\n                sum += int(s[k] - '0')\n            }\n            if sum == j - i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum_digits(s[i:j+1]) == len(s[i:j+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(s); i++ {\n        for j := i; j < len(s); j++ {\n            if sum(s[i:j+1]) == j-i+1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"
  ]
}