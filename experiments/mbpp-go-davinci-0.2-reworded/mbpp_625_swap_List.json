{
  "name": "mbpp_625_swap_List",
  "language": "go_test.go",
  "prompt": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to interchange the first and last element in a given list.\nfunc swap_List(newList []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{1, 2, 3, 4, 4}), expected: []int{4, 2, 3, 4, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    // Get the length of the list\n    length := len(newList)\n    // Swap the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    if len(newList) == 1 {\n        return newList\n    }\n    if len(newList) == 2 {\n        newList[0], newList[1] = newList[1], newList[0]\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    first := newList[0]\n    last := newList[len(newList) - 1]\n    newList[0] = last\n    newList[len(newList) - 1] = first\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    temp := newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    // swap the first and last element\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    // Swap the first and last element in the list\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    // newList := []int{1, 2, 3, 4, 5}\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n",
    "    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n",
    "    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n"
  ]
}