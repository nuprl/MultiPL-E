{
  "name": "mbpp_119_search",
  "language": "go_test.go",
  "prompt": "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the element that appears only once in a sorted list.\nfunc search(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}), expected: 8 },\n     { actual: candidate([]int{1, 2, 2, 3, 3, 4, 4}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    var i int\n    for i = 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr)-1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if mid % 2 == 0 {\n        if arr[mid] == arr[mid-1] {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        if arr[mid] == arr[mid-1] {\n            return search(arr[:mid-1])\n        } else {\n            return search(arr[mid+1:])\n        }\n    }\n}\n",
    "    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] != arr[i+1] {\n            return arr[i]\n        }\n        i++\n    }\n    return arr[i]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return 0\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    }\n    if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if mid % 2 == 0 {\n        if arr[mid] == arr[mid - 1] {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[:mid])\n        }\n    } else {\n        if arr[mid] == arr[mid - 1] {\n            return search(arr[:mid - 1])\n        } else {\n            return search(arr[mid + 1:])\n        }\n    }\n}\n",
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        if mid % 2 == 0 {\n            return search(arr[mid+1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid+1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid-1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    for i := 0; i < len(arr); i++ {\n        if i == 0 {\n            if arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        } else if i == len(arr) - 1 {\n            if arr[i] != arr[i-1] {\n                return arr[i]\n            }\n        } else {\n            if arr[i] != arr[i-1] && arr[i] != arr[i+1] {\n                return arr[i]\n            }\n        }\n    }\n    return -1\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    } else if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 0 {\n        return -1\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        if mid % 2 == 0 {\n            return search(arr[mid + 1:])\n        } else {\n            return search(arr[mid:])\n        }\n    } else if arr[mid] == arr[mid + 1] {\n        if mid % 2 == 0 {\n            return search(arr[:mid])\n        } else {\n            return search(arr[:mid - 1])\n        }\n    } else {\n        return arr[mid]\n    }\n}\n",
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        }\n        return arr[0]\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid - 1] {\n        return search(arr[mid + 1:])\n    }\n    if arr[mid] == arr[mid + 1] {\n        return search(arr[:mid])\n    }\n    return arr[mid]\n}\n",
    "    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        if arr[0] == arr[1] {\n            return -1\n        } else {\n            return arr[0]\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] == arr[1] {\n            return arr[2]\n        } else if arr[1] == arr[2] {\n            return arr[0]\n        } else {\n            return arr[1]\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] == arr[1] {\n            if arr[2] == arr[3] {\n                return -1\n            } else {\n                return arr[2]\n            }\n        } else if arr[1] == arr[2] {\n            return arr[0]\n        } else if arr[2] == arr[3] {\n            return arr[1]\n        } else {\n            return arr[2]\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] == arr[mid-1] {\n        return search(arr[mid+1:])\n    } else if arr[mid] == arr[mid+1] {\n        return search(arr[:mid])\n    } else {\n        return arr[mid]\n    }\n}\n"
  ]
}