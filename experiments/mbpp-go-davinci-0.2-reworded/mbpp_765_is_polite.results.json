{
  "name": "mbpp_765_is_polite",
  "language": "go_test.go",
  "prompt": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n / 2 + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i, j, k int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            if i * j == n {\n                k++\n            }\n        }\n    }\n    return k\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1wbjfep2_test.go:39: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1wbjfep2_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1wbjfep2_test.go:39: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmppctxjbfu_test.go:34: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmppctxjbfu_test.go:34: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmppctxjbfu_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4 {\n        return 7\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 10\n    }\n    if n == 7 {\n        return 11\n    }\n    if n == 8 {\n        return 13\n    }\n    if n == 9 {\n        return 14\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 17\n    }\n    if n == 12 {\n        return 19\n    }\n    if n == 13 {\n        return 20\n    }\n    if n == 14 {\n        return 22\n    }\n    if n == 15 {\n        return 23\n    }\n    if n == 16 {\n        return 25\n    }\n    if n == 17 {\n        return 26\n    }\n    if n == 18 {\n        return 28\n    }\n    if n == 19 {\n        return 29\n    }\n    if n == 20 {\n        return 31\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 34\n    }\n    if n == 23 {\n        return 35\n    }\n    if n == 24 {\n        return 37\n    }\n    if n == 25 {\n        return 38\n    }\n    if n == 26 {\n        return 40\n    }\n    if n == 27 {\n        return 41\n    }\n    if n == 28 {\n        return 43\n    }\n    if n == 29 {\n        return 44\n    }\n    if n == 30 {\n        return 46\n    }\n    if n == 31 {\n        return 47\n    }\n    if n == 32 {\n        return 49\n    }\n    if n == 33 {\n        return 50\n    }\n    if n == 34 {\n        return 52\n    }\n    if n == 35 {\n        return 53\n    }\n    if n == 36 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpiullkrq8_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpueumadwt_test.go:36: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpueumadwt_test.go:36: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpueumadwt_test.go:36: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i <= n; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be represented as sum of two or more consecutive natural numbers.\n    // For example, 28 can be expressed as 5 + 6 + 7 + 8 + 9,\n    // where as 23 cannot be expressed as sum of consecutive numbers.\n    // The first few polite numbers are:\n    // 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123752,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpua7f_wv0_test.go:15:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A polite number is a number whose sum of digits is a prime number.\n    // For example, 23 is a polite number because 2 + 3 = 5 is a prime number.\n    // The first polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, \u2026\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123752,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp41kzahw0_test.go:21:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 19\n    }\n    if n == 15 {\n        return 20\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 23\n    }\n    if n == 18 {\n        return 24\n    }\n    if n == 19 {\n        return 25\n    }\n    if n == 20 {\n        return 26\n    }\n    if n == 21 {\n        return 27\n    }\n    if n == 22 {\n        return 28\n    }\n    if n == 23 {\n        return 29\n    }\n    if n == 24 {\n        return 30\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 33\n    }\n    if n == 27 {\n        return 34\n    }\n    if n == 28 {\n        return 35\n    }\n    if n == 29 {\n        return 36\n    }\n    if n == 30 {\n        return 37\n    }\n    if n == 31 {\n        return 38\n    }\n    if n == 32 {\n        return 39\n    }\n    if n == 33 {\n        return 40\n    }\n    if n == 34 {\n        return 41\n    }\n    if n == 35 {\n        return 42\n    }\n    if n == 36 {\n        return 43\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123752,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpk1tkfcys_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=11)', got '%!s(int=81)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=7)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo22_ruxy_test.go:40: expected '%!s(int=13)', got '%!s(int=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n / 2 + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3k9m591m_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3k9m591m_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3k9m591m_test.go:37: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    i := 1\n    for {\n        if n % i == 0 {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpbx72ybtd_test.go:37: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpbx72ybtd_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpbx72ybtd_test.go:37: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n / 2 + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpadg8t52i_test.go:34: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return is_polite(n - 1) + is_polite(n - 2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpjgm7iacl_test.go:31: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpjgm7iacl_test.go:31: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpjgm7iacl_test.go:31: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n + 1\n    }\n\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 17\n    }\n    if n == 12 {\n        return 19\n    }\n    if n == 13 {\n        return 20\n    }\n    if n == 14 {\n        return 21\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 24\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 33\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 36\n    }\n    if n == 26 {\n        return 37\n    }\n    if n == 27 {\n        return 38\n    }\n    if n == 28 {\n        return 40\n    }\n    if n == 29 {\n        return 41\n    }\n    if n == 30 {\n        return 43\n    }\n    if n == 31 {\n        return 44\n    }\n    if n == 32 {\n        return 45\n    }\n    if n == 33 {\n        return 46\n    }\n    if n == 34 {\n        return 48\n    }\n    if n == 35 {\n        return 49\n    }\n    if n == 36 {\n        return 50\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123752,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq0ak951h_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i, j int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= n; j++ {\n            if i * j == n {\n                return 1\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpxl77u573_test.go:40: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpxl77u573_test.go:40: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpxl77u573_test.go:40: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpv5j27ezl_test.go:37: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpv5j27ezl_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpv5j27ezl_test.go:37: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int = 1\n    for {\n        if n % i == 0 {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpffmzb_56_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpffmzb_56_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpffmzb_56_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpo0poauwv_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // 1 is polite\n    if n == 1 {\n        return 1\n    }\n\n    // 2 is polite\n    if n == 2 {\n        return 2\n    }\n\n    // 3 is not polite\n    if n == 3 {\n        return 0\n    }\n\n    // 4 is polite\n    if n == 4 {\n        return 4\n    }\n\n    // 5 is not polite\n    if n == 5 {\n        return 0\n    }\n\n    // 6 is polite\n    if n == 6 {\n        return 6\n    }\n\n    // 7 is not polite\n    if n == 7 {\n        return 0\n    }\n\n    // 8 is polite\n    if n == 8 {\n        return 8\n    }\n\n    // 9 is not polite\n    if n == 9 {\n        return 0\n    }\n\n    // 10 is polite\n    if n == 10 {\n        return 10\n    }\n\n    // 11 is not polite\n    if n == 11 {\n        return 0\n    }\n\n    // 12 is polite\n    if n == 12 {\n        return 12\n    }\n\n    // 13 is not polite\n    if n == 13 {\n        return 0\n    }\n\n    // 14 is polite\n    if n == 14 {\n        return 14\n    }\n\n    // 15 is not polite\n    if n == 15 {\n        return 0\n    }\n\n    // 16 is polite\n    if n == 16 {\n        return 16\n    }\n\n    // 17 is not polite\n    if n == 17 {\n        return 0\n    }\n\n    // 18 is polite\n    if n == 18 {\n        return 18\n    }\n\n    // 19 is not polite\n    if n == 19 {\n        return 0\n    }\n\n    // 20 is polite\n    if n == 20 {\n        return 20\n    }\n\n    // 21 is not polite\n    if n == 21 {\n        return 0\n    }\n\n    // 22 is polite\n    if n == 22 {\n        return 22\n    }\n\n    // 23 is not polite\n    if n == 23 {\n        return 0\n    }\n\n    // 24 is polite\n    if n == 24 {\n        return 24\n    }\n\n    // 25 is not polite\n    if n == 25 {\n        return 0\n    }\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123752,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_60hrs0t_test.go:134:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpp3_cav8g_test.go:36: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpp3_cav8g_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpp3_cav8g_test.go:36: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    for i := n; i > 0; i-- {\n        if n % i == 0 {\n            if i % 2 == 0 {\n                return i\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmprrtvssrj_test.go:35: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmprrtvssrj_test.go:35: expected '%!s(int=7)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmprrtvssrj_test.go:35: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123754,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp36pt12m3_test.go:38: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp36pt12m3_test.go:38: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    return is_polite(n-1) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmph8t9ohbe_test.go:43: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmph8t9ohbe_test.go:43: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmph8t9ohbe_test.go:43: expected '%!s(int=13)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var count int\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                count++\n            }\n        }\n        if count == 2 {\n            return i\n        }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpv7olkppj_test.go:41: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpv7olkppj_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpv7olkppj_test.go:41: expected '%!s(int=13)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i, j int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            if i * j == n {\n                return 0\n            }\n        }\n    }\n    return 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp8lupl8wo_test.go:39: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp8lupl8wo_test.go:39: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp8lupl8wo_test.go:39: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmph6fqi68h_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmph6fqi68h_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 17\n    }\n    if n == 10 {\n        return 18\n    }\n    if n == 11 {\n        return 20\n    }\n    if n == 12 {\n        return 24\n    }\n    if n == 13 {\n        return 25\n    }\n    if n == 14 {\n        return 27\n    }\n    if n == 15 {\n        return 32\n    }\n    if n == 16 {\n        return 33\n    }\n    if n == 17 {\n        return 36\n    }\n    if n == 18 {\n        return 40\n    }\n    if n == 19 {\n        return 42\n    }\n    if n == 20 {\n        return 45\n    }\n    if n == 21 {\n        return 48\n    }\n    if n == 22 {\n        return 50\n    }\n    if n == 23 {\n        return 52\n    }\n    if n == 24 {\n        return 54\n    }\n    if n == 25 {\n        return 56\n    }\n    if n == 26 {\n        return 60\n    }\n    if n == 27 {\n        return 64\n    }\n    if n == 28 {\n        return 72\n    }\n    if n == 29 {\n        return 75\n    }\n    if n == 30 {\n        return 80\n    }\n    if n == 31 {\n        return 81\n    }\n    if n == 32 {\n        return 84\n    }\n    if n == 33 {\n        return 90\n    }\n    if n == 34 {\n        return 96\n    }\n    if n == 35 {\n        return 98\n    }\n    if n == 36 {\n        return 100\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4bpt0hi7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n/2\n    }\n    return 3*n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfutv7anq_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n_polite int\n    var n_polite_prev int\n    var n_polite_prev_prev int\n    var n_polite_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var n_polite_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpql44zolk_test.go:33:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be expressed as sum of two or more consecutive natural numbers.\n    // For example, 29 is a polite number because it can be expressed as sum of two consecutive natural numbers i.e., 15 + 14.\n    //\n    // The first few polite numbers are:\n    // 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, \u2026\n    //\n    // The idea is to use the fact that if a number is polite, then it can be expressed as sum of two consecutive natural numbers.\n    //\n    // Let the number be n.\n    //\n    // 1) If n is even, then n = (n/2) + (n/2)\n    // 2) If n is odd, then n = (n/2) + (n/2) + 1\n    //\n    // The above two cases can be written as n = (n/2) + (n/2 + 1)\n    //\n    // So, we can say that if a number is polite, then it can be expressed as sum of two consecutive natural numbers.\n    //\n    // The above two cases can be written as n = (n/2) + (n/2 + 1)\n    //\n    // So, we can say that if a number is polite, then it can be expressed as sum of two consecutive natural numbers.\n    //\n    // The above two cases can be written as n = (n/2) + (n/2 + 1)\n    //\n    // So, we can say that if a number is polite, then it can be expressed as sum of two consecutive natural numbers.\n    //\n    // The above two cases can be written as n = (n/2) + (n/2 + 1)\n    //\n    // So, we can say that if a number is polite, then it can be expressed as sum of two consecutive natural numbers.\n    //\n    // The above two cases can be written as n = (n/2) + (n/2 + 1)\n    //\n    // So, we\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp853ndmx7_test.go:42:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpszaj9c5g_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpszaj9c5g_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpszaj9c5g_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A polite number is a number whose sum of digits is a prime number.\n    // For example, 23 is a polite number because 2 + 3 = 5 is a prime number.\n    // The first few polite numbers are: 2, 3, 5, 7, 11, 13, 17, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n    // The nth polite number is the nth number in the sequence of polite numbers.\n    // For example, the 5th polite number is 11.\n    // Write a function to find nth polite number.\n    //\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzncn900r_test.go:17:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n + 1\n    }\n\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1c8sja0u_test.go:36: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return is_polite(n / 2)\n    }\n    return is_polite(n / 2) + is_polite(n / 2 + 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=13)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmptayobkqy_test.go:37: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmptayobkqy_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmptayobkqy_test.go:37: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 18\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 21\n    }\n    if n == 16 {\n        return 22\n    }\n    if n == 17 {\n        return 24\n    }\n    if n == 18 {\n        return 25\n    }\n    if n == 19 {\n        return 26\n    }\n    if n == 20 {\n        return 28\n    }\n    if n == 21 {\n        return 29\n    }\n    if n == 22 {\n        return 30\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 33\n    }\n    if n == 25 {\n        return 34\n    }\n    if n == 26 {\n        return 36\n    }\n    if n == 27 {\n        return 37\n    }\n    if n == 28 {\n        return 38\n    }\n    if n == 29 {\n        return 40\n    }\n    if n == 30 {\n        return 41\n    }\n    if n == 31 {\n        return 42\n    }\n    if n == 32 {\n        return 44\n    }\n    if n == 33 {\n        return 45\n    }\n    if n == 34 {\n        return 46\n    }\n    if n == 35 {\n        return 48\n    }\n    if n == 36 {\n        return 49\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueawf8um_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            n = n - i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpwr142061_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3) + is_polite(n-4)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpx0aewd34_test.go:40: expected '%!s(int=11)', got '%!s(int=52)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpx0aewd34_test.go:40: expected '%!s(int=13)', got '%!s(int=193)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var result int\n    for i = 1; i < n; i++ {\n        for j = 1; j < n; j++ {\n            for k = 1; k < n; k++ {\n                result = (i * i) + (j * j * j) + (k * k * k * k)\n                if result == n {\n                    return 1\n                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpncn7i2_a_test.go:40: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpncn7i2_a_test.go:40: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpncn7i2_a_test.go:40: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp68fefrpd_test.go:36: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp68fefrpd_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp68fefrpd_test.go:36: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n - 1) + is_polite(n - 2) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4yyu4do6_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmphxr8s0rl_test.go:34: expected '%!s(int=11)', got '%!s(int=29)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmphxr8s0rl_test.go:34: expected '%!s(int=7)', got '%!s(int=11)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmphxr8s0rl_test.go:34: expected '%!s(int=13)', got '%!s(int=46)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var count int\n    for i = 1; count < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return i-1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmw4b_9yj_test.go:13:12: undefined: is_prime\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // A number is polite if it can be written as sum of two or more consecutive positive integers.\n    // For example, 28 = 5 + 6 + 7 + 8, so 28 is a polite number.\n    // The first few polite numbers are:\n    // 2, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpoxvuok18_test.go:14:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; n > 0; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return i-1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123783,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var sum int\n    var polite_numbers []int\n    var polite_number int\n    var found bool\n    var count int\n    var polite_count int\n\n    for i = 1; i < n; i++ {\n        sum = 0\n        for j = 1; j < i; j++ {\n            if i % j == 0 {\n                sum += j\n            }\n        }\n        if sum > i {\n            polite_numbers = append(polite_numbers, i)\n        }\n    }\n\n    for polite_count = 1; polite_count <= n; polite_count++ {\n        found = false\n        for count = 0; count < len(polite_numbers); count++ {\n            if polite_numbers[count] == polite_count {\n                found = true\n                break\n            }\n        }\n        if !found {\n            polite_number = polite_count\n            break\n        }\n    }\n\n    return polite_number\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpasxb1zb6_test.go:62: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpasxb1zb6_test.go:62: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpasxb1zb6_test.go:62: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    return is_polite(n - 1) + is_polite(n - 3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=11)', got '%!s(int=16)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp8acl42dp_test.go:40: expected '%!s(int=13)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpvib7wi5__test.go:36: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return is_polite(n - 1) + n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpmwn_3o2b_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpmwn_3o2b_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpmwn_3o2b_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpol_bmfzo_test.go:40: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j, k int\n    var polite_numbers []int\n\n    for i = 1; i <= n; i++ {\n        for j = 1; j <= n; j++ {\n            k = i + j\n            if k == n {\n                polite_numbers = append(polite_numbers, n)\n                break\n            }\n        }\n    }\n\n    return len(polite_numbers)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp0wguoon7_test.go:41: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp0wguoon7_test.go:41: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp0wguoon7_test.go:41: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 12\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 15\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 17\n    }\n    if n == 14 {\n        return 18\n    }\n    if n == 15 {\n        return 19\n    }\n    if n == 16 {\n        return 20\n    }\n    if n == 17 {\n        return 21\n    }\n    if n == 18 {\n        return 22\n    }\n    if n == 19 {\n        return 23\n    }\n    if n == 20 {\n        return 24\n    }\n    if n == 21 {\n        return 25\n    }\n    if n == 22 {\n        return 26\n    }\n    if n == 23 {\n        return 27\n    }\n    if n == 24 {\n        return 28\n    }\n    if n == 25 {\n        return 29\n    }\n    if n == 26 {\n        return 30\n    }\n    if n == 27 {\n        return 31\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 33\n    }\n    if n == 30 {\n        return 34\n    }\n    if n == 31 {\n        return 35\n    }\n    if n == 32 {\n        return 36\n    }\n    if n == 33 {\n        return 37\n    }\n    if n == 34 {\n        return 38\n    }\n    if n == 35 {\n        return 39\n    }\n    if n == 36 {\n        return 40\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpem59hna7_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return is_polite(n / 2)\n    }\n\n    return is_polite(3 * n + 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpetm1rcyp_test.go:36: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpetm1rcyp_test.go:36: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpetm1rcyp_test.go:36: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return 1\n    }\n\n    if n == 1 {\n        return 2\n    }\n\n    if n == 2 {\n        return 4\n    }\n\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpyqpfme06_test.go:44: expected '%!s(int=11)', got '%!s(int=81)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpyqpfme06_test.go:44: expected '%!s(int=7)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpyqpfme06_test.go:44: expected '%!s(int=13)', got '%!s(int=274)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpb755hivj_test.go:29: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpb755hivj_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpb755hivj_test.go:29: expected '%!s(int=13)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return n + i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpqc1uy5lz_test.go:38: expected '%!s(int=11)', got '%!s(int=8)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpqc1uy5lz_test.go:38: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpqc1uy5lz_test.go:38: expected '%!s(int=13)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n * is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1om2iijz_test.go:31: expected '%!s(int=11)', got '%!s(int=5040)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1om2iijz_test.go:31: expected '%!s(int=7)', got '%!s(int=24)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1om2iijz_test.go:31: expected '%!s(int=13)', got '%!s(int=362880)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 17\n    }\n    if n == 10 {\n        return 18\n    }\n    if n == 11 {\n        return 20\n    }\n    if n == 12 {\n        return 24\n    }\n    if n == 13 {\n        return 25\n    }\n    if n == 14 {\n        return 27\n    }\n    if n == 15 {\n        return 32\n    }\n    if n == 16 {\n        return 33\n    }\n    if n == 17 {\n        return 34\n    }\n    if n == 18 {\n        return 36\n    }\n    if n == 19 {\n        return 40\n    }\n    if n == 20 {\n        return 41\n    }\n    if n == 21 {\n        return 42\n    }\n    if n == 22 {\n        return 45\n    }\n    if n == 23 {\n        return 48\n    }\n    if n == 24 {\n        return 49\n    }\n    if n == 25 {\n        return 50\n    }\n    if n == 26 {\n        return 52\n    }\n    if n == 27 {\n        return 54\n    }\n    if n == 28 {\n        return 56\n    }\n    if n == 29 {\n        return 60\n    }\n    if n == 30 {\n        return 64\n    }\n    if n == 31 {\n        return 65\n    }\n    if n == 32 {\n        return 68\n    }\n    if n == 33 {\n        return 72\n    }\n    if n == 34 {\n        return 73\n    }\n    if n == 35 {\n        return 80\n    }\n    if n == 36 {\n        return 81\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvebqcsac_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 9\n    }\n    if n == 7 {\n        return 11\n    }\n    if n == 8 {\n        return 13\n    }\n    if n == 9 {\n        return 14\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 17\n    }\n    if n == 12 {\n        return 19\n    }\n    if n == 13 {\n        return 21\n    }\n    if n == 14 {\n        return 22\n    }\n    if n == 15 {\n        return 24\n    }\n    if n == 16 {\n        return 25\n    }\n    if n == 17 {\n        return 27\n    }\n    if n == 18 {\n        return 29\n    }\n    if n == 19 {\n        return 31\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 34\n    }\n    if n == 22 {\n        return 36\n    }\n    if n == 23 {\n        return 37\n    }\n    if n == 24 {\n        return 39\n    }\n    if n == 25 {\n        return 41\n    }\n    if n == 26 {\n        return 43\n    }\n    if n == 27 {\n        return 44\n    }\n    if n == 28 {\n        return 46\n    }\n    if n == 29 {\n        return 48\n    }\n    if n == 30 {\n        return 49\n    }\n    if n == 31 {\n        return 51\n    }\n    if n == 32 {\n        return 53\n    }\n    if n == 33 {\n        return 55\n    }\n    if n == 34 {\n        return 56\n    }\n    if n == 35 {\n        return 58\n    }\n    if n == 36 {\n        return 60\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4vzys1fk_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i, j int\n    var polite_numbers []int\n    var polite_numbers_map = make(map[int]int)\n\n    for i = 1; i <= n; i++ {\n        polite_numbers_map[i] = 1\n    }\n\n    for i = 2; i <= n; i++ {\n        if polite_numbers_map[i] == 1 {\n            for j = i; j <= n; j += i {\n                polite_numbers_map[j] = 0\n            }\n        }\n    }\n\n    for i = 1; i <= n; i++ {\n        if polite_numbers_map[i] == 1 {\n            polite_numbers = append(polite_numbers, i)\n        }\n    }\n\n    return polite_numbers[len(polite_numbers) - 1]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123757,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpu_rvudu__test.go:54: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpu_rvudu__test.go:54: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpu_rvudu__test.go:54: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return is_polite(n / 2)\n    }\n    return is_polite(3 * n + 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp_r8jpsnu_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp_r8jpsnu_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp_r8jpsnu_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    for i := 1; i < n; i++ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpdg6e4h3b_test.go:33: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpdg6e4h3b_test.go:33: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpdg6e4h3b_test.go:33: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int = 1\n    var count int = 0\n    for {\n        if n == count {\n            return i\n        }\n        if i % 2 == 0 || i % 3 == 0 || i % 5 == 0 {\n            count++\n        }\n        i++\n    }\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpbeic8zza_test.go:38: expected '%!s(int=11)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpbeic8zza_test.go:38: expected '%!s(int=7)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var count int\n    var is_polite bool\n    for i = 1; i < n; i++ {\n        is_polite = true\n        for j = 2; j < i; j++ {\n            if i % j == 0 {\n                is_polite = false\n                break\n            }\n        }\n        if is_polite {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp92jxp2cs_test.go:43: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp92jxp2cs_test.go:43: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp92jxp2cs_test.go:43: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpne9j3gtq_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n + 1\n    }\n    return n - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=11)', got '%!s(int=6)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpfethrizj_test.go:34: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return n + is_polite(n-1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpit7gjv41_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpit7gjv41_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpit7gjv41_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; n > 0; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i, j int\n    var count int\n    var result int\n    for i = 1; i <= n; i++ {\n        count = 0\n        for j = 1; j <= i; j++ {\n            if i % j == 0 {\n                count++\n            }\n        }\n        if count % 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpl5pa8evf_test.go:42: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpl5pa8evf_test.go:42: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpl5pa8evf_test.go:42: expected '%!s(int=13)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return is_polite(n-1) + is_polite(n-2)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp784iho0v_test.go:34: expected '%!s(int=13)', got '%!s(int=55)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    for i = 0; i < n; i++ {\n        if n % (i + 1) == 0 {\n            break\n        }\n    }\n\n    return i + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpz4ye9yht_test.go:43: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpz4ye9yht_test.go:43: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpz4ye9yht_test.go:43: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; n > 0; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123786,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 1 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-3) + is_polite(n-4)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp4z6shaua_test.go:40: expected '%!s(int=11)', got '%!s(int=21)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp4z6shaua_test.go:40: expected '%!s(int=7)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp4z6shaua_test.go:40: expected '%!s(int=13)', got '%!s(int=52)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i <= n; i++ {\n        if n % i == 0 {\n            n -= i\n        }\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=11)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpomgzyvg5_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i, j, k int\n    var polite_numbers []int\n    polite_numbers = append(polite_numbers, 0)\n    polite_numbers = append(polite_numbers, 1)\n    for i = 2; i <= n; i++ {\n        j = polite_numbers[i-1]\n        k = polite_numbers[i-2]\n        polite_numbers = append(polite_numbers, j+k)\n    }\n    return polite_numbers[n]\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3wqj5l9e_test.go:46: expected '%!s(int=11)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3wqj5l9e_test.go:46: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3wqj5l9e_test.go:46: expected '%!s(int=13)', got '%!s(int=34)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    if n % 2 == 0 {\n        return n / 2\n    }\n\n    return n / 2 + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=11)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp1ms_0fq7_test.go:36: expected '%!s(int=13)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 3 {\n        return n\n    }\n    return is_polite(n-1) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmppaj1lehn_test.go:31: expected '%!s(int=11)', got '%!s(int=13)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmppaj1lehn_test.go:31: expected '%!s(int=7)', got '%!s(int=4)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmppaj1lehn_test.go:31: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    var count int\n    for i = 1; count < n; i++ {\n        if i % 2 == 0 || i % 3 == 0 || i % 5 == 0 {\n            count++\n        }\n    }\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmppzfa4agd_test.go:35: expected '%!s(int=11)', got '%!s(int=9)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmppzfa4agd_test.go:35: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmppzfa4agd_test.go:35: expected '%!s(int=13)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n        return 53\n    }\n    if n == 37 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpc0dnqftp_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return n + is_polite(n - 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=11)', got '%!s(int=28)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmp3y0j0fc4_test.go:31: expected '%!s(int=13)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmph261pvwh_test.go:34: expected '%!s(int=11)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmph261pvwh_test.go:34: expected '%!s(int=7)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmph261pvwh_test.go:34: expected '%!s(int=13)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return is_polite(n / 2)\n    }\n    return is_polite(n / 2) + is_polite(n / 2 + 1)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123756,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=11)', got '%!s(int=3)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmph2y3osdj_test.go:34: expected '%!s(int=13)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    return is_polite(n-1) + is_polite(n-2) + is_polite(n-3)\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=11)', got '%!s(int=44)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpsckcrv4r_test.go:37: expected '%!s(int=13)', got '%!s(int=149)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123753,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpe7ol2xac_test.go:39: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    var i int\n    for i = 1; i < n; i++ {\n        if n % i == 0 {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=11)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpiwyuyaw5_test.go:34: expected '%!s(int=13)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return n\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=11)', got '%!s(int=7)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpeflvay1r_test.go:34: expected '%!s(int=13)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n\n    var i int\n    var count int\n    for i = 1; count < n; i++ {\n        if i % 2 == 0 || i % 3 == 0 || i % 5 == 0 {\n            count++\n        }\n    }\n\n    return i - 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpdmfrla6m_test.go:40: expected '%!s(int=11)', got '%!s(int=9)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpdmfrla6m_test.go:40: expected '%!s(int=7)', got '%!s(int=5)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpdmfrla6m_test.go:40: expected '%!s(int=13)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n        return n / 2\n    }\n    return 3 * n + 1\n}\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510432,
      "stdout": "--- FAIL: TestIs_Polite (0.00s)\n    --- FAIL: TestIs_Polite/test_num__0 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=11)', got '%!s(int=22)'\n    --- FAIL: TestIs_Polite/test_num__1 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestIs_Polite/test_num__2 (0.00s)\n        tmpanzxkov1_test.go:34: expected '%!s(int=13)', got '%!s(int=28)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_polite_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nfunc is_polite(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 5\n    }\n    if n == 5 {\n        return 7\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 10\n    }\n    if n == 8 {\n        return 11\n    }\n    if n == 9 {\n        return 13\n    }\n    if n == 10 {\n        return 14\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 17\n    }\n    if n == 13 {\n        return 19\n    }\n    if n == 14 {\n        return 20\n    }\n    if n == 15 {\n        return 22\n    }\n    if n == 16 {\n        return 23\n    }\n    if n == 17 {\n        return 25\n    }\n    if n == 18 {\n        return 26\n    }\n    if n == 19 {\n        return 28\n    }\n    if n == 20 {\n        return 29\n    }\n    if n == 21 {\n        return 31\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 34\n    }\n    if n == 24 {\n        return 35\n    }\n    if n == 25 {\n        return 37\n    }\n    if n == 26 {\n        return 38\n    }\n    if n == 27 {\n        return 40\n    }\n    if n == 28 {\n        return 41\n    }\n    if n == 29 {\n        return 43\n    }\n    if n == 30 {\n        return 44\n    }\n    if n == 31 {\n        return 46\n    }\n    if n == 32 {\n        return 47\n    }\n    if n == 33 {\n        return 49\n    }\n    if n == 34 {\n        return 50\n    }\n    if n == 35 {\n        return 52\n    }\n    if n == 36 {\n\nfunc TestIs_Polite(t *testing.T) {\n  candidate := is_polite\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(7), expected: 11 },\n     { actual: candidate(4), expected: 7 },\n     { actual: candidate(9), expected: 13 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpyp1vmv91_test.go:120:6: expected '(', found TestIs_Polite\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}